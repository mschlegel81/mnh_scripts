
UNARY_PATTERNS:=['%s','(%s)','-%s','-(%s)'];

PATTERNS:=['+','*','-','/','^']
          .each(op,'%s'&op&'%s')
          .cross(UNARY_PATTERNS,UNARY_PATTERNS)
          .map({format@$x})
          .cross(UNARY_PATTERNS)
          .map({$x[1].format($x[0])})
          .replace('--','-')
          .unique;


sortByLength(s:StringCollection)->begin
  local L:=s.sort;
  L[L.length.sortPerm];
end;

filterArithmeticDuplicates(E:StringList,parCount>=1)->begin
  local P:=[1..parCount].map({random(5)});
  local V:=E.pMap({$e.format@P.map(::interpret)});
  E.group(V).map(::sortByLength).map(::head);
end;

memoized
anonE(n)->regex.replace(E(n),'%{\$\d}s','%s').unique;
memoized
E(1)->['%{$0}s','-%{$0}s'];
E(n>1)->begin
  [1..n-1].each(k,cross(PATTERNS,anonE(k),anonE(n-k)),|)
          .pMap({format@$x})
          .replace('--','-')
          .unique
          .cross(UNARY_PATTERNS)
          .map({$x[1].format($x[0])})
          .replace('--','-')
          .unique
          .cross(permutations('%{$'&[0..n-1]&'}s'))
          .pMap({$x[0].format@($x[1])})
          .filterArithmeticDuplicates(n)
          .sortByLength;
end;

E(1).size; anonE(1).size;
E(2).size; anonE(2).size;
E(3).size; anonE(3).size;
