private logoFile:='log.png';
private logoMask:='itestraLogo_alpha.png';
private logoSize:=loadImage(logoFile) orElse imageSize;

private expandLogoToPictureAspect(outputResolution:IntList(2),relativeLogoSize:Numeric,logoPositionRelativeToCenter:NumericList(2))->begin
  local relativeWidth :=(1/relativeLogoSize);
  local relativeHeight:=(1/relativeLogoSize)*logoSize[0]/logoSize[1]*outputResolution[1]/outputResolution[0];
  relativeWidth :=(relativeWidth -1)/2;
  relativeHeight:=(relativeHeight-1)/2;
  [format('crop:%s,%s,%s,%s',-relativeWidth-relativeWidth*logoPositionRelativeToCenter[0],
                           1+relativeWidth-relativeWidth*logoPositionRelativeToCenter[0],
                           -relativeHeight-relativeHeight*logoPositionRelativeToCenter[1],
                          1+relativeHeight-relativeHeight*logoPositionRelativeToCenter[1]),
   'fill:'&(outputResolution.join('x'))];
end;

sizeLimit(outputResolution:IntList(2))->round(sqrt(outputResolution.agg(*)/(1920*1080))*1024^2);

COLORED_LOGO :=0;
BRIGHTER_LOGO:=1;
DARKER_LOGO  :=2;

directPrinter->{begin
  local lastLine:=0;
save;
  printDirect("\r",$s,repeat(" ",lastLine-(lastLine:=length($s))));
end};

private processImage(inputFileName:String,
                     outputFileName:String,
                     outputResolution:IntList(2),
                     logoColor in [COLORED_LOGO,BRIGHTER_LOGO,DARKER_LOGO],
                     relativeLogoSize:Numeric,
                     relativeLogoPosition:NumericList(2))->begin
  print('Creating ',outputFileName,' @',outputResolution.join("x"),
      "\n    from ",inputFileName,
      "\n    Logo ",['colored','transparent brighter','transparent darker'][logoColor],
      "\n   sized ",round(relativeLogoSize*100),'%',
      "\n      at ",relativeLogoPosition);

  executeWorkflow([expandLogoToPictureAspect(outputResolution,relativeLogoSize,relativeLogoPosition),
                   'stash:blurMask',
                   'invert',
                   'stash:bgMask',
                   'blur:0.2',
                   'screenStash:blurMask',
                   logoColor==DARKER_LOGO
                   ? void
                   : 'invert',
                   'stash:frame',
                   'load:'&inputFileName,
                   'fill:'&(outputResolution.join('x')),
                   'stash:pic',
                   logoColor==COLORED_LOGO
                   ? ['load:'&logoFile,
                      expandLogoToPictureAspect(outputResolution,relativeLogoSize,relativeLogoPosition)]
                   : ['blur:0.1',
                      logoColor==BRIGHTER_LOGO ? ['*RGB:0.7','+RGB:.3']
                                               :  '*RGB:0.5',
                      '*stash:blurMask'],
                   'stash:blurred',
                   'unstash:pic',
                   '*stash:bgMask',
                   '+stash:blurred',
                   logoColor==DARKER_LOGO
                   ? '*stash:frame'
                   : 'screenStash:frame',
                   'project'],
                   logoMask,outputFileName,sizeLimit(outputResolution),local printer:=directPrinter);
  printer("");
  print("Done");
end;

//*Brands an image
//*Options:
//*  -screen       size according to screen resolution
//*  -<w>x<h>      custom target resolution
//*   If no size option is given, original image size is taken
//*Logo appearance:
//*  -transparent  transparent logo, darker than background
//*  -bright       transparent logo, brighter than background
//*  -colors       colored logo (default)
//*Logo position:
//*  -posX=#       relative x-position in range -0.999 - 0.999; 0 (default) for centered
//*  -posY=#       relative y-position in range -0.999 - 0.999; 0 (default) for centered
//*  -logosize=#   relative logo size in range 0.0 - 0.99999; default: 0.3
main(inputFileName,outputFileName,...)->begin
  assert(fileExists(inputFileName),inputFileName,' does not exist');
  local outputSize:=[-1,-1];
  local logoColor:=COLORED_LOGO;
  local logoSize :=0.3;
  local logoPos  :=[0,0];

  (...).each(arg,
    arg=='-screen'      ? outputSize:=getScreenSize :
    arg=='-transparent' ? logoColor:=DARKER_LOGO :
    arg=='-bright'      ? logoColor:=BRIGHTER_LOGO :
    arg=='-colors'      ? logoColor:=COLORED_LOGO :
    arg.matches('^-posX=-?0\.\d+$') ? logoPos[0]:=arg.split('=').trailing.toReal :
    arg.matches('^-posY=-?0\.\d+$') ? logoPos[1]:=arg.split('=').trailing.toReal :
    arg.matches('^-logosize=?0\.\d+$') ? logoSize:=arg.split('=').trailing.toReal :
    arg.matches('^-\d+x\d+$') ? outputSize:=arg.split(['x','-']).softCast.tail :
    fail('invalid switch: ',arg));

  (outputSize<=0).agg(OR) ? outputSize:=imageSize(inputFileName) : void;

  processImage(inputFileName,outputFileName,outputSize,logoColor,logoSize,logoPos);
end;
