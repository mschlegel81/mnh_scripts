K_MAX:=10;

//map([1..(  6)]/(  6)*2*pi,(a)->  [sin(a),cos(a)])|
//map([1..(2*6)]/(2*6)*2*pi,(a)->2*[sin(a),cos(a)])|
//map([1..(3*6)]/(3*6)*2*pi,(a)->3*[sin(a),cos(a)])|
//map([1..(4*6)]/(4*6)*2*pi,(a)->4*[sin(a),cos(a)])|
//map([1..(5*6)]/(5*6)*2*pi,(a)->5*[sin(a),cos(a)])|
//map([1..(6*6)]/(6*6)*2*pi,(a)->6*[sin(a),cos(a)])|
//map([1..(7*6)]/(7*6)*2*pi,(a)->7*[sin(a),cos(a)]);


//plot   (P,'0.5 .');

USE planarGeometryUtil;

plotWithShift(factor)->
begin
  local P:=[[0,0]];
  local plottable:=[];
  local radius:=1;
  [1..10].each(k,begin
    local Q:=map(([1..(k*factor)])/(k*factor)*2*pi,
                 (a)->radius*[sin(a),cos(a)]);
    local candidates:=Q.each(q,P.each(p,euklideanNorm(p-q)=>p).sort.head(2).map((m)->m|[q]),|).sort;
    candidates:=candidates.pEach(c,candidates.head(index).each(oc,linesIntersect(c[1],c[2],oc[1],oc[2]),OR) ? void : c.tail)
               |[Q,Q.tail(1)|Q.head(1)].transpose;
//    local L:=candidates.each(c,euklideanNorm(c[1]-c[0]));
//    log(L.max/L.min);

    plottable|=candidates;
    P:=Q;
    radius:=radius*((k+1)/k)^(6/factor);
    void;
  end);
  plottable.each(p,p[0],p[1],[Nan,Nan]).plot;
end;


[3..12].each(s,plotWithShift(s),addAnimationFrame);

