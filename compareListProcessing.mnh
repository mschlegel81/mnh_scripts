SUB_SIZES:=round(2^([1..18*3]/3)).unique;

atomTask(x:Numeric)->x.sin.cos.sqr.sin.cos.sqr.sin.cos.sqr.sin.cos.sqr.sin.cos.sqr;
//floor(10^(1-ceil(ln(x)/ln(10)))*x);

task1(L:NumericList)->L. map(::atomTask);
task2(L:NumericList)->L.pMap(::atomTask);
task3(L:NumericList)->L.futureMap(::atomTask).toList;
task4(L:NumericList)->L.each(x,atomTask(x));
task5(L:NumericList)->L.pEach(x,atomTask(x));

main->begin
  local TIMINGS:=
  SUB_SIZES.each(k,
    print('Testing tasks with list size of ',k),
    [k,
     time(::task1,[random(k)])['time'],
     time(::task2,[random(k)])['time'],
     time(::task3,[random(k)])['time'],
     time(::task4,[random(k)])['time'],
     time(::task5,[random(k)])['time']]);

  setOptions(["x0"=>1E-100,"y0"=>1E-100,"preserveAspect"=>false,"logscaleX"=>true,"logscaleY"=>true].toMap);
  plot   (TIMINGS.getInner(0),TIMINGS.getInner(1),'black . l');
  addPlot(TIMINGS.getInner(0),TIMINGS.getInner(2),'black + l');
  addPlot(TIMINGS.getInner(0),TIMINGS.getInner(3),'red . l');
  addPlot(TIMINGS.getInner(0),TIMINGS.getInner(4),'blue . l');
  addPlot(TIMINGS.getInner(0),TIMINGS.getInner(5),'blue + l');
end;
