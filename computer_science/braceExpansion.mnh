translate('{')->['['      ,0];
translate('}')->['].toSet',1];
translate(',')->[','      ,2];
translate(s  )->[escape(s),3];

kindMap:=[[[3,3],'&'],
          [[3,0],'&'],
          [[1,3],'&'],
          [[1,0],'&'],
          [[2,2],"''"],
          [[2,1],"''"],
          [[0,2],"''"]].toMap;

begin
  local lastF   :=false;
  local lastPart:='';
  local lastKind:=-1;
  //Step 1: split into word-parts and control characters
  'It{{em,alic}iz,erat}e{d,}'.chars.each(char,
    char in ['{','}',',']
    ? lastF
      ? begin lastF:=false; local r:=[lastPart,char]; lastPart:=''; r; end
      : char
    : begin
        lastPart&=char;
        lastF:=true;
        void;
      end,|)
  //Step 2: Translate elements into MNH
  .map(::translate)
  //Step 3: Join results to one expression, inserting additional tokens where applicable
  .each(c,kindMap[[lastKind,c[1]]],
          c[0],
          begin lastKind:=c[1]; void; end,&)
  //Step 4: Interpret constructed expression
  .interpret
  //Step 5: flatten to a simple list
  .flatten;
end;
