#!/usr/in/mnh -out ?.log
canComposeWord(word:String,dict:Map)->length(word)=0 ? true : begin
  local prefixes:=dict[length(word),word.hasPrefix(dict[length(word)])];
  (prefixes.size>0) AND prefixes.each(prefix,
    canComposeWord(copy(word,length(prefix),length(word)-length(prefix)),dict),OR);
end;

INPUT_FILE   :=changeFileExt(myPath,'.input');
REJECTED_FILE:=changeFileExt(myPath,'.rejected');
ACCEPTED_FILE:=changeFileExt(myPath,'.accepted');

filterWords->begin
  local allWords:=INPUT_FILE.fileLines;
  local accepted:=ACCEPTED_FILE.fileLines;
  local alreadyAcceptedLength:=accepted.trailing(10).length.|(0).max;
  group(allWords,length(allWords))
  .map({[$L[0].length,$L]})
  .sort
  .getInner(1)
  .each(chunk,
   chunk.head.length<=alreadyAcceptedLength
   ? print('Skipping ',size(chunk),' words of length ',chunk.head.length)
   : begin
       print('Processing ',size(chunk),' words of length ',chunk.head.length);
       local dictionary:=[1..chunk.head.length].each(maxWordLength,[maxWordLength,accepted[length(accepted)<=maxWordLength]]).toMap;
       local rejectMask:=chunk.pMap({$w.canComposeWord(dictionary)});
       local rejected  :=chunk[rejectMask];
       print('Accepting  ',rejectMask.size-rejectMask.trueCount);
       accepted|=chunk[!rejectMask];
       rejected|=chunk[ rejectMask];
       REJECTED_FILE.appendFileLines(chunk[ rejectMask]);
       ACCEPTED_FILE.appendFileLines(chunk[!rejectMask]);
       void;
     end);
end;

USE inputs;

@SuppressUnusedWarning
initialize->begin
  local allWords:='C:\dev\data\german.lower.utf8'.fileLines;
  INPUT_FILE.writeFileLines(allWords[sortPerm(allWords.length)]);
  deleteFile(ACCEPTED_FILE);
  deleteFile(REJECTED_FILE);
end;

main->filterWords;

@SuppressUnusedWarning
printCategories->begin
  local allWords:=INPUT_FILE.fileLines;
  group(allWords,length(allWords))
  .map({[$L[0].length,$L.size]})
  .sort.map({format("%s\twords of\t%s\tchars",$x[1],$x[0])})
  .join("\n")
  .print;
end;
