#!C:\bin\mnh.exe -quiet -convertPrintToLog -logDateFmt hh:mm:ss -logLocationLength 15 -log stdOut(1)
USE mazeMaker;

SCALE_THRESHOLD:=0.002;

datastore res;
datastore M;
datastore scale;
datastore COARSER_BOXES;
datastore outputIndex:=-1;

 tempFileName(k)->myPath.changeFileExt(format('_temp_%4.4d.png',k));
finalFileName(k)->myPath.changeFileExt(format('_%4.4d.png',k));

postProcessFile(fileIndex:Int)->begin
  !fileExists(local fOut:=finalFileName(fileIndex)) AND
  (fileExists(local fIn :=tempFileName (fileIndex)) OR
   fileExists(      fIn:=fIn.changeFileExt('.png')) OR
   fileExists(      fIn:=fIn.changeFileExt('.bmp')))
  ? begin
      note('Postprocess ',fIn,' -> ',fOut);
      executeWorkflow(['resize:1920x1080'],fIn,fOut,(s)->void)
      AND
      deleteFile(fIn);
    end
  : void;
end;

main('postprocess')->outputIndex<0 ? void : begin
  assertUniqueInstance;
  local quitRequested:=false;
  localAsync({begin
    ask('Press Enter to quit');
    quitRequested:=true;
  end});
  rangeGenerator(0,outputIndex)
  .pMap((k)->quitRequested ? void : postProcessFile(k))
  .toList;
end;

backgroundPngProcessing->
  future({begin
    note('Restarted background PNG processing');
    [0..outputIndex].map(::postProcessFile);
    true;
  end});

main->begin
  assertUniqueInstance;
  local quitRequested:=false;
  localAsync({begin
    ask('Press Enter to quit');
    quitRequested:=true;
  end});

  local pngProcessing:=backgroundPngProcessing;

  res.isVoid
  ? begin
      res:=[5,5];
      M:=makeMaze(res[0],res[1],[]);
      scale:=SCALE_THRESHOLD;
      COARSER_BOXES:=[[0,0],[1,1]];
      outputIndex:=0;
    end
  : void;

  local center:=res.reverseList/2;
  local BOXES:=indexOf(M).divMod(res[0]).pEach(b,b-center,b-center+1);

  while(!quitRequested AND scale<=SCALE_THRESHOLD
  ,begin
    scale>SCALE_THRESHOLD ? begin
      local cropBound:=floor(center.reverseList-1-[9/16,1]/scale);
      log('Refining maze at index ',outputIndex);

      cropBound-=ord((cropBound and 1)=1);
      log('cropBound= ',cropBound);
      (cropBound>0).agg(or)
      ? begin
          cropBound:=cropBound*ord(cropBound>0);
          local startOfCropping:=scriptTime;
          warn('Cropping @',res,' by ',cropBound);
          local halfCrop:=res-cropBound;
          local fullCrop:=res-cropBound*2;

          M:=M.cropMaze(res[0],halfCrop[0],halfCrop[1])
              .reverseList
              .cropMaze(halfCrop[0],fullCrop[0],fullCrop[1])
              .reverseList;
          log('Time for cropping        : ',scriptTime-startOfCropping);
          res:=fullCrop;
          center:=res.reverseList/2;
          //Will be carried on in COARSER_BOXES
          BOXES:=indexOf(M).divMod(res[0]).each(b,b-center,b-center+1);
        end
      : void;

      local t0:=scriptTime;
      M:=M.scaleMaze(res[0],4); res*=4; scale/=4;
      log('Time for scaling         : ',scriptTime-t0); t0:=scriptTime;
      M:=M.halfGrowMaze(res[0]);
      log('Time for halfGrowMaze    : ',scriptTime-t0); t0:=scriptTime;
      M:=M.shiftMazeUpRight(res[0]); res+=1;
      log('Time for shiftMazeUpRight: ',scriptTime-t0); t0:=scriptTime;
      center:=res.reverseList/2;
      pngProcessing.peekFuture
      ? pngProcessing:=backgroundPngProcessing
      : void;
      M:=makeMaze(res[0],res[1],M);
      log('Time for maze creation   : ',scriptTime-t0);
      pngProcessing.peekFuture AND !quitRequested
      ? pngProcessing:=backgroundPngProcessing
      : void;

      COARSER_BOXES:=BOXES;
      BOXES:=indexOf(M).divMod(res[0]).each(b,b-center,b-center+1);
      t0:=scriptTime;
      callMemoryCleaner;
      log('Time for memory cleanup  : ',scriptTime-t0); t0:=scriptTime;
    end : void;

    ['autoscaleFactor'=>1,
     'autoscaleX'=>false,
     'autoscaleY'=>false,
     'axisStyleX'=>0,
     'axisStyleY'=>0,
     'fontsize'=>10,
     'logscaleX'=>false,
     'logscaleY'=>false,
     'preserveAspect'=>true,
     'x0'=>-1,
     'x1'=> 1,
     'y0'=>-9/16,
     'y1'=> 9/16].toMap.setOptions;

    local fineAlpha  :=max(0,min(1,1-ln(SCALE_THRESHOLD/scale)/ln(4)));
    local coarseAlpha:=max(0,min(1,2*ln(SCALE_THRESHOLD/scale)/ln(4)));
    plot();
    fineAlpha  >0 ? addPlot(BOXES           *scale ,'box 0 fs RGB0,0,0,'&fineAlpha  ) : void;
    coarseAlpha>0 ? addPlot(COARSER_BOXES*(4*scale),'box 0 fs RGB0,0,0,'&coarseAlpha) : void;

    local filename:=tempFileName(outputIndex);
    log('Writing ',filename);
    renderToFile(filename,1920*4,1080*4,!quitRequested);
    outputIndex+=1;
    scale*=4^(1/80);
  end);

  COARSER_BOXES.pMap(::hash);
  local t0:=scriptTime;
  writeDataStores;
  pngProcessing();
  log('Time for memory dump     : ',scriptTime-t0);
end;
