#!C:\bin\mnh.exe -quiet -convertPrintToLog -logDateFmt hh:mm:ss -logLocationLength 10 +log stdOut(1)
private randomOf(collection:Collection)->collection.toList[intRandom(collection.size)];
private CROSS_D1:=[[-1,0],[1,0],[0,-1],[0,1]].toSet;
private CROSS_D2:=[[-2,0],[2,0],[0,-2],[0,2]].toSet;

makeMaze(width,height)->makeMaze(width,height,[],[]);
makeMaze(width,height,mask:BooleanList)->makeMaze(width,height,mask,[]);
makeMaze(width,height,mask:BooleanList,initialSet:BooleanList)->begin
  local lastOutput:=scriptTime;

  local toBeVisited:=cross([0..ceil(height/2)-1]*2,
                           [0..ceil(width /2)-1]*2);
  toBeVisited:=
    mask.size=0
    ? toBeVisited.toSet
    : toBeVisited.intersect(indexOf(mask).divMod(width));

  local allowedMidPoints:=cross([0..ceil(height/2)-1]*2+1,[0..ceil(width/2)-1]*2  ).union(
                          cross([0..ceil(height/2)-1]*2  ,[0..ceil(width/2)-1]*2+1));
  allowedMidPoints:=
    mask.size=0
    ? allowedMidPoints.toSet
    : allowedMidPoints.intersect(indexOf(mask).divMod(width));

  local runs:=[];

  initialSet.size==0
  ? void
  : runs||=indexOf(initialSet).divMod(width);


  begin
    local p:=
    local next:=
    local currentRun:=void;
    local walk:={
      while(next.size>0,begin
        next:=randomOf(next);
        local midPoint:=(p+next).shiftRight(1);
        midPoint in allowedMidPoints
        ? begin
            currentRun|=[midPoint,p:=next];
            toBeVisited>>p;
            next:=intersect([p].toSet+CROSS_D2,toBeVisited);
          end
        : next:=[];
      end)};

    while(toBeVisited.size>0,begin
      scriptTime>lastOutput+10
      ? begin
          note('toBeVisited: ',toBeVisited.size,' runs: ',runs.size);
          lastOutput:=scriptTime;
        end
      : void;

      local runSeed:=
      p:=randomOf(toBeVisited);
      currentRun:=[p];
      toBeVisited>>p;

      next:=intersect([p].toSet+CROSS_D2,toBeVisited);
      walk();

      currentRun:=currentRun.reverseList;
      p:=runSeed;
      next:=intersect([p].toSet+CROSS_D2,toBeVisited);
      walk();
      runs||=currentRun;
    end);
  end;
  toBeVisited:=void;
  allowedMidPoints:=allowedMidPoints.minus(runs.agg(|));

  local runBox:=runs.map((r)->r.transpose.map((X)->[X.min,X.max]).agg(|)).transpose;
  local runSurrounds:=runs.pMap((run)->(run.toSet+CROSS_D1).intersect(allowedMidPoints));
  local runAdjacency:=map([0..runs.size-1],(i)->[i].toSet);

  local mergeChunksTotal:=(1+width div 32)*(1+height div 32);

  local mazePoints:=
  cross([0..width  div 32]*32,
        [0..height div 32]*32).each(section,begin
    scriptTime>lastOutput+10
    ? begin
        note('Stitching at chunk ',index,'/',mergeChunksTotal);
        lastOutput:=scriptTime;
      end
    : void;

    local K:=indexOf(runBox[0]<=section[0]+32 and
                     runBox[1]>=section[0]    and
                     runBox[2]<=section[1]+32 and
                     runBox[3]>=section[1]);
    K.size>0 ? begin
      K.tail.pEach(k0,begin
        local run0s:=runSurrounds[k0];
        K.head(index+1).each(k1,
          begin
            local stitchPointCandidates:=intersect(run0s,runSurrounds[k1]);
            stitchPointCandidates.size=0
            ? void
            : [k1,k0,randomOf(stitchPointCandidates)];
          end);
      end,|).each(merge,begin
        local k0:=merge[0];
        local k1:=merge[1];
        local pt:=merge[2];
        intersect(runAdjacency[k0],runAdjacency[k1]).size=0
        ? begin
            local shared:=union(runAdjacency[k0],runAdjacency[k1]);
            runAdjacency[k0]:=shared;
            runAdjacency[k1]:=shared;
            pt;
          end
        : void;
      end);
    end : void;
  end,|);
  note('Stitching lead to ',mazePoints.size,' additional points merging ',runs.size,' runs');
  mazePoints:=union@(runs||mazePoints);
  note('Total maze points: ',mazePoints.size);
  cross([0..height-1],[0..width-1]).pMap((p)->p in mazePoints);
end;

shrinkMaze(maze:List,width>1)->begin
  local nonzeroEntries:=indexOf(maze).pMap((i)->i.divMod(width)).toSet;
  local N:=cross([-1..1],[-1..1]).toSet;
  [0..maze.size-1].divMod(width).pMap((q)->isSubsetOf([q].toSet+N,nonzeroEntries));
end;

growMaze(maze:List,width>1)->begin
  local zeroEntries:=indexOf(!maze).pMap((i)->i.divMod(width)).toSet;
  zeroEntries:=zeroEntries.union(begin
    local height:=maze.size div width;
     map([-1..  width],{[-1    ,$i   ]})|
     map([-1.. height],{[$j    ,width]})|
     map([width..  -1],{[height,$i   ]})|
     map([height.. -1],{[$j    ,-1   ]});
  end);
  local N:=cross([-1..1],[-1..1]).toSet;
  [0..maze.size-1].divMod(width).pMap((q)->!isSubsetOf([q].toSet+N,zeroEntries));
end;

halfGrowMaze(maze:BooleanList,width>1)->begin
  //local zeroEntries:=indexOf(!maze).divMod(width).union(begin
  //  local height:=maze.size div width;
  //   map([-1..  width],{[-1    ,$i   ]})|
  //   map([-1.. height],{[$j    ,width]})|
  //   map([width..  -1],{[height,$i   ]})|
  //   map([height.. -1],{[$j    ,-1   ]});
  //end);
  //zeroEntries:=zeroEntries.intersect(zeroEntries.map((e)->e-[1,0]));
  //zeroEntries:=zeroEntries.intersect(zeroEntries.map((e)->e-[0,1]));
  //[0..maze.size-1].divMod(width).map((q)->q not in zeroEntries);

  local nonZeroEntries:=indexOf(maze).divMod(width).toSet-[[0,0],[1,0],[0,1],[1,1]].toSet;
  [0..maze.size-1].divMod(width).map((q)->q in nonZeroEntries);
  //[0..maze.size-1].divMod(width).pMap((q)->
  //  q       not in zeroEntries OR
  //  q+[0,1] not in zeroEntries OR
  //  q+[1,0] not in zeroEntries OR
  //  q+1     not in zeroEntries);
end;

scaleMaze(maze:BooleanList,width>1,scalingFactor>1)->begin
  local height:=maze.size div width;
  local C:=
  cross([0..height*scalingFactor-1] div scalingFactor,
        [0..width *scalingFactor-1] div scalingFactor);
  maze[(C.transpose*[width,1]).agg(+)];
end;

shiftMazeUpRight(maze:BooleanList,width>1)->begin
  local height:=maze.size div width;
  local C:=
  cross([0,0..height-1],
        [0,0..width -1]);
  maze[(C.transpose*[width,1]).agg(+)];
end;

cropMaze(maze:BooleanList,currentWidth,newWidth<=currentWidth,newHeight)->begin
  local C:=cross([0..newHeight-1],
                 [0.. newWidth-1]);
  maze[(C.transpose*[currentWidth,1]).agg(+)];
end;

plotMaze(maze:BooleanList,width)->begin
  maze.map((m)->m?0:0.9).plotRasterImage(width);
  setOptions(["x0"=>-1,"x1"=>1,"y0"=>-1,"y1"=>1,"fontsize"=>8.264462809917354,"preserveAspect"=>true,"autoscaleX"=>true,"autoscaleY"=>true,"logscaleX"=>false,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>7,"axisStyleY"=>7].toMap);
  addAnimationFrame;
end;

private makeFractalMaze_(width,height)->
  width<=20 OR height<=20
  ? [note('Building initial maze @',width,'x',height),
     makeMaze(width-ord((width and 1)=0),height-ord((height and 1)=0)),
             [width-ord((width and 1)=0),height-ord((height and 1)=0)]]
  : begin
      local r:=([width,height]-1) div 4;
      r-=ord((r and 1)=0);
      local
      M:=  makeFractalMaze_(r[0],r[1]);
      r:=M[1];
      local T:=scriptTime;
      M:=M[0].scaleMaze(r[0],4); r*=4;
      note('Scaled maze to ',r.join('x'),' in ',scriptTime-T,'sec'); T:=scriptTime;

      M:=M.halfGrowMaze(r[0]);
      note('Half grow maze in ',scriptTime-T,'sec'); T:=scriptTime;

      M:=M.shiftMazeUpRight(r[0]); r+=1;
      note('Shift maze to ',r.join('x'),' in ',scriptTime-T,'sec'); T:=scriptTime;

      M:=makeMaze(r[0],r[1],M);
      note('Make maze @',r.join('x'),' in ',scriptTime-T,'sec');
      [M,r];
    end;

makeFractalMaze(width,height)->begin
  local m:=makeFractalMaze_(width,height);
  log('MAZE READY : RECENTERING...');
  local currentResolution:=m[1];
  local centerDiff:=[height-currentResolution[1],
                     width -currentResolution[0]] div 2;
  cross([0..height-1]-centerDiff[0],
        [0..width-1 ]-centerDiff[1]).pMap((K)->
    0<=K[0]<currentResolution[1] AND
    0<=K[1]<currentResolution[0] ?
    m[0,K[0]*currentResolution[0]+K[1]] : false);
end;

makePeriodicFractalMaze(depth=0)->begin
  local M:=makeMaze(5,5,[],[]);
  [M,5];
end;

makePeriodicFractalMaze(depth>0)->begin
  local smallerMaze:=makePeriodicFractalMaze(depth-1);
  local smallerSize:=smallerMaze[1];
  smallerMaze:=smallerMaze[0];

  local largerSize:=smallerSize;
  local mask:=smallerMaze.scaleMaze(largerSize,4); largerSize*=4;
  mask:=mask.halfGrowMaze(largerSize);
  mask:=mask.shiftMazeUpRight(largerSize); largerSize+=1;

  local D:=-(largerSize-smallerSize) div 2;

  local initialSet:=cross([0..largerSize-1],
                          [0..largerSize-1])
    .pMap((I)->0<=I[0]+D<smallerSize AND 0<=I[1]+D<smallerSize
               ? smallerMaze[(I[0]+D)*smallerSize+I[1]+D]
               : false);
  [makeMaze(largerSize,largerSize,mask and !initialSet,initialSet),largerSize];
end;




//
//2: LONG RANGE:
//begin
//  local res:=[5,5];
//  local M:=makeMaze(res[0],res[1],[]);
//  M.plotMaze(res[0]);
//
//  M:=M.scaleMaze(res[0],3); res*=3;
//  M:=M.growMaze(res[0]).shiftMazeUpRight(res[0]); res+=1;
//  M:=M.reverseList.shiftMazeUpRight(res[0]).reverseList; res+=1;
//  M.plotMaze(res[0]);
//  M:=makeMaze(res[0],res[1],M);
//  M.plotMaze(res[0]);
//
//  M:=M.scaleMaze(res[0],3); res*=3;
//  M:=M.growMaze(res[0]).shiftMazeUpRight(res[0]); res+=1;
//  M:=M.reverseList.shiftMazeUpRight(res[0]).reverseList; res+=1;
//  M.plotMaze(res[0]);
//  M:=makeMaze(res[0],res[1],M);
//
//  M:=M.reverseList.shiftMazeUpRight(res[0]).reverseList; res+=1;
//  M.plotMaze(res[0]);
//  log(res);
//  M.ord;
//end;

//longRangeMaze->begin
//  local res:=[5,5];
//  local M:=makeMaze(res[0],res[1],[]);
//  M:=M.scaleMaze(res[0],3); res*=3;
//  M:=M.growMaze(res[0]).shiftMazeUpRight(res[0]); res+=1;
//  M:=M.reverseList.shiftMazeUpRight(res[0]).reverseList; res+=1;
//  M:=makeMaze(res[0],res[1],M);
//  M:=M.scaleMaze(res[0],3); res*=3;
//  M:=M.growMaze(res[0]).shiftMazeUpRight(res[0]); res+=1;
//  M:=M.reverseList.shiftMazeUpRight(res[0]).reverseList; res+=1;
//  M:=makeMaze(res[0],res[1],M);
////  M:=M.reverseList.shiftMazeUpRight(res[0]).reverseList; res+=1;
//  M;
//end;


//hueOf(h<1.0)->[1,h,0];
//hueOf(h<2.0)->[1-(h-1),1,0];
//hueOf(h<3.0)->[0,1,h-2];
//hueOf(h<4.0)->[0,1-(h-3),1];
//hueOf(h<5.0)->[h-4,0,1];
//hueOf(h  )->[1,0,1-(h-5)];
//HUE(h)->hueOf((h-floor(h))*6);
//
//colorMaze(maze:BooleanList,width:Int)->begin
//  local mazePoints:=maze.indexOf.divMod(width);
//  local c:=[(maze.size div width)/2,width/2]*0;
//  local seedPoint:=mazePoints.pEach(p,euklideanNorm(p-c)=>p,min)[1];
//
//  local v:=[seedPoint=>0].toMap;
//  mazePoints:=mazePoints.minus(v.getInner(0));
//
//  while(mazePoints.size>0,begin
//    mazePoints:=mazePoints.each(p,begin
//      local X:=v.getAll(CROSS_D1.each(d,d+p)).min;
//      X.isInt
//      ? begin
//          v[p]:=X+1;
//          void;
//        end
//      : p;
//    end);
//  end);
//  begin
//    local D:=v.getInner(1).sort;
//    note('DIST: ',D[D.size div 2],' / ',D.trailing);
//  end;//
//  v:=v.pEach(e,e[0]=>HUE(e[1]/200)).toMap;
//
//
//  [0..maze.size-1].divMod(width).pEach(c,v[c] orElse 0).plotRasterImage(width);
//
//end;
//
//begin
//  makeMaze(53,53).colorMaze(53);  addAnimationFrame;
//  makeMaze(53,53).colorMaze(53);  addAnimationFrame;
//  makeMaze(53,53).colorMaze(53);  addAnimationFrame;
//  makeMaze(53,53).colorMaze(53);  addAnimationFrame;
//  makeMaze(53,53).colorMaze(53);  addAnimationFrame;
//  longRangeMaze.colorMaze(53);    addAnimationFrame;
//  longRangeMaze.colorMaze(53);    addAnimationFrame;
//  longRangeMaze.colorMaze(53);    addAnimationFrame;
//  longRangeMaze.colorMaze(53);    addAnimationFrame;
//  longRangeMaze.colorMaze(53);    addAnimationFrame;
//end;

////1: FRACTAL MAZE zoomin!!

//
//begin
//  local res:=100;
//  local M:=makeMaze2(res,res,[]);
//  M.plotMaze(res);
//  M:=M.scaleMaze(res,4); res*=4;
//  M.plotMaze(res);
//  M:=M.halfGrowMaze(res);
//  M.plotMaze(res);
//  M:=M.shiftMazeUpRight(res); res+=1;
//  M.plotMaze(res);
//  M:=makeMaze2(res,res,M);
//  M.plotMaze(res);
//
//end;
//
//
//
//halt;
//

