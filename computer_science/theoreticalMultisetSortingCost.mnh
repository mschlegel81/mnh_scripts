memoized factorial(I:IntList)->I.map(::factorial);
factorial(i>1)->[1..i].agg(*);
factorial(i)->1;


bc(n,k)->factorial(n)/(factorial(k)*factorial(n-k));

multisetPerm(count:Int,distinctValues:Int)->begin
  local common   :=count div distinctValues;
  local overshoot:=count mod distinctValues;
  factorial(count)/(factorial(common)^distinctValues*(common+1)^overshoot);
end;

theoreticalCost(numberOfPermutations:Int)->ceil(ln(numberOfPermutations)/ln(2));

setOptions(["x0"=>-1,"x1"=>1,"y0"=>1E-100,"y1"=>1,"fontsize"=>6,"preserveAspect"=>false,"autoscaleX"=>true,"autoscaleY"=>true,"logscaleX"=>true,"logscaleY"=>true,"autoscaleFactor"=>1,"axisStyleX"=>7,"axisStyleY"=>7].toMap);
USE fitting;

plot();
[2..10].each(k,begin
  local N:=2^[0..12];
  local dat:=N.map((c)->[c,multisetPerm(c, k).theoreticalCost]);
  local fit:=linearFit(dat);
  log(k,': ',fit);
  addPlot(dat,'black .');
  addPlot(N,N.map(fit),'black l 0.5');
  postDisplay;
end);



//addPlot([[0,0],[100,100]],'black');
//[0..100].map((n)->n=>n*ln(n)*ln(2)).addPlot('black');







//
//permutations([0,0,0,0,0,0,0,0]).size;
//permutations([1,0,0,0,0,0,0,0]).size;
//permutations([1,1,0,0,0,0,0,0]).size;
//permutations([1,1,1,0,0,0,0,0]).size;
//permutations([1,1,1,1,0,0,0,0]).size;
//permutations([1,1,1,1,1,0,0,0]).size;
//permutations([1,1,1,1,1,1,0,0]).size;
//permutations([1,1,1,1,1,1,1,0]).size;
//permutations([1,1,1,1,1,1,1,1]).size;
//
//
