private dist(x:NumericList(2),y:NumericList(2))->sqr(x-y).agg(+).sqrt;
private dist(a,b,c,d)->dist(a,b)+dist(b,c)+dist(c,d);

private len(pointList:List)->[0..pointList.size-2].each(i,dist@(pointList[[i,i+1]]),+)+dist(pointList.trailing,pointList.head);

//*Sierpinski-Curve sorting
private scSort(L)->begin
  local x:=L.getInner(0); local xr:=[min(x),max(x)];
  local y:=L.getInner(1); local yr:=[min(y),max(y)];
  local h:=max(xr.get(1)-xr.get(0),yr.get(1)-yr.get(0))/2;
  xr:=(xr.get(1)+xr.get(0))*0.5;
  yr:=(yr.get(1)+yr.get(0))*0.5;
  local x0:=xr-h;
  local x1:=xr+h;
  local y0:=yr-h;
  local y1:=yr+h;
  local mask:=sqr(x-x0)+sqr(y-y1)<
              sqr(x-x1)+sqr(y-y0);
  local result:=scSort_(x0,y0,x0,y1,x1,y1,x.get( mask),y.get( mask))|
                scSort_(x1,y1,x1,y0,x0,y0,x.get(!mask),y.get(!mask));
  result;
end;

private scSort_(ax:Numeric,ay:Numeric,bx:Numeric,by:Numeric,cx:Numeric,cy:Numeric,x:NumericList,y:NumericList)->
  size(x)>1
  ? (sqr(ax-cx)+sqr(ay-cy)>1E-12
    ? begin
        local mask:=sqr(x-ax)+sqr(y-ay) <
                    sqr(x-cx)+sqr(y-cy);
        scSort_(ax,ay,(ax+cx)/2,(ay+cy)/2,bx,by,x.get( mask),y.get( mask)) |
        scSort_(bx,by,(ax+cx)/2,(ay+cy)/2,cx,cy,x.get(!mask),y.get(!mask));
      end
    : begin
        print('Aboring at ',ax,'  ',ay,' | ',
                            bx,'  ',by,' | ',
                            cx,'  ',cy,' with ',size(x),' points');
        [0..size(x)-1].each(i,[x.get(i),y.get(i)]);
      end)
  : size(x)=1 ? [x|y] : [];


private hillClimb(pointList:List)->begin
  local result:=pointList;
  local changing:=true;
  while(changing,begin
    changing:=false;
    [0..result.size-1].each(i0,begin
      local I:=(i0+[0..3]) mod result.size;
      dist(result[I[0]],result[I[2]],result[I[1]],result[I[3]])<
      dist(result[I[0]],result[I[1]],result[I[2]],result[I[3]])
      ? begin
          changing:=true;
          local tmp   :=result[I[1]];
          result[I[1]]:=result[I[2]];
          result[I[2]]:=tmp;
          void;
        end
      : void;
    end);
  end);
  result;
end;

randomInCircleGenerator->{begin void; save; random(2)*2-1; end}.toIteratableExpression.filter({$x.sqr.agg(+)<1});

tspSample(count>=3)->begin
  local naive:=randomInCircleGenerator.head(count);
  local climb:=naive.hillClimb;
  local sc   :=naive.scSort.hillClimb;
  [naive.len,
   climb.len,
   sc   .len];
end;

//autoHistogram(samples:NumericList)->begin
//  local sMin:=samples.min;
//  local sMax:=samples.max;
//  local sCount:=min(20,round(samples.size/20).max(1));
//  local f1:=sCount/(sMax-sMin);
//  local f2:=(sMax-sMin)/sCount;
//  local H:=
//  floor((samples-sMin)*f1)
//  .elementFrequency;
//  H:=H.mergeMaps([H.getInner(0).min..H.getInner(0).max+1].minus(H.getInner(0)).map({[$x,0]}).toMap,::+);
//  H.pMap({[$s[0]*f2+sMin,$s[1]/(samples.size*(sMax-sMin))*sCount]})
//   .sort(0);
//end;

mutable lastPlot:=time;
mutable allSamples:=[];
synchronized addSample(s)->begin
  allSamples||=s;
  time-lastPlot>5
  ? begin
      plotSamples;
      lastPlot:=time;
    end
  : void;
end;

mean(X)                ->X.agg(+)/X.size;
variance(X:NumericList)->mean(X^2)-mean(X)^2;
stdDeviation(X:NumericList)->sqrt(X.variance);

gaussDensity(m:Numeric,s:Numeric)->exp(sqr({$x}-m)*(-1/2/sqr(s)))*(1/sqrt(2*pi)/s);
gaussDensity->gaussDensity(0,1);

addGaussPlot(samples:NumericList,style:String)->begin
  local m:=mean(samples);
  local s:=stdDeviation(samples);
  gaussDensity(m,s).addPlot(m-3*s,m+3*s,1000,style);
end;

plotSamples->begin
  plot;
  local t0:=time;
  allSamples.{printDirect("\rCreating plot of ",$L.size,' samples') orElse $L}
            .transpose
            .map({//$L.autoHistogram.addPlot('bar 0') orElse
                  $L.addGaussPlot('line')});
  display;
  print(' ',round(time-t0,3),'s');
end;

[0..100000].pMap({tspSample(100).addSample});
