USE downhillSimplex;

centerInitialState(radii:NumericList)->begin
  local sum:=0;
  local angles:=radii.each(r,sum+=r);
  local circumference:=radii.agg(+)/pi;
  (angles*2*pi/angles.trailing).each(phi,circumference*[cos(phi),sin(phi)]);
end;

centerErrorFunction(radii:NumericList)->begin
  [0..radii.size-1].each(i,
    'sqr(euklideanNorm($v[[%s,%s]]-$v[[%s,%s]])-%s)'
      .format(2*i,
              2*i+1,
              2*((i+1) mod radii.size),
              2*((i+1) mod radii.size)+1,
              radii[i]+radii[(i+1) mod radii.size])
      .toExpression,
  +);
end;

optimizedGearCenters(radii:NumericList)->begin
  local flat:=downhillSimplex(centerErrorFunction(radii),centerInitialState(radii).flatten,0.01,1E-7)[1];
  [0..radii.size-1].map({flat[2*$i+[0,1]]});
end;

TOOTH_OFFSET:=0.15;

nodgesErrorFunction(radii:NumericList,centers:List)->{begin
  local P:=
  $vector.each(angle,begin
      local radius:=radii[index];
      local teeth:=round(radius*6);
      local center:=centers[index];
      local a:=2*pi/teeth;
      ([0..teeth]-0.25-((index and 1)*0.5))
        .each(i,[cos(angle+a*i),
                 sin(angle+a*i)]).*(radius+TOOTH_OFFSET*0.5).map({$x+center});
  end);
  P[[1..P.size-1,0]].each(p,cross(p,P[index]).each(pair,pair.agg(-).euklideanNorm,min).sqr,+);
end};

gear(radius,angle,center:NumericList(2))->begin
  local teeth:=round(radius*6);
  local a:=2*pi/teeth;
  [0..teeth].each(i,[cos(angle+a*i-0.05*a    )*(radius+TOOTH_OFFSET),
                     sin(angle+a*i-0.05*a    )*(radius+TOOTH_OFFSET)],
                    [cos(angle+a*i           )*(radius-TOOTH_OFFSET),
                     sin(angle+a*i           )*(radius-TOOTH_OFFSET)],
                    [cos(angle+a*i+a/2       )*(radius-TOOTH_OFFSET),
                     sin(angle+a*i+a/2       )*(radius-TOOTH_OFFSET)],
                    [cos(angle+a*i+a/2+0.05*a)*(radius+TOOTH_OFFSET),
                     sin(angle+a*i+a/2+0.05*a)*(radius+TOOTH_OFFSET)])
             .leading(3).map({$x+center});
end;


main(numberOfGears)->begin
  local intCount:=numberOfGears.toInt;
  assert(intCount>2);
  local radii:=intRandom(7,intCount)+1;
  local gearCenters:=optimizedGearCenters(radii);
  local rot:=downhillSimplex(nodgesErrorFunction(radii,gearCenters),radii*0,0.01,1E-7)[1];
  local speed:=2*pi/6/50/radii*(-1^[0..radii.size-1]);
  begin
    local xy:=gearCenters.each(c,c-radii[index]-TOOTH_OFFSET,
                                 c+radii[index]+TOOTH_OFFSET);
    setOptions(
    ['autoscaleFactor'=>1.0,
     'autoscaleX'=>false,
     'autoscaleY'=>false,
     'axisStyleX'=>0,
     'axisStyleY'=>0,
     'fontsize'=>10.0,
     'logscaleX'=>false,
     'logscaleY'=>false,
     'preserveAspect'=>true,
     'x0'=>xy.getInner(0).min,
     'x1'=>xy.getInner(0).max,
     'y0'=>xy.getInner(1).min,
     'y1'=>xy.getInner(1).max].toMap);
  end;

  [0..49].each(frame,begin
    plot();
    gearCenters.each(gearCenter,gear(radii[index],speed[index]*frame+rot[index],gearCenter).addPlot('black f polygon'));
    addAnimationFrame;
    void;
  end);

end;


