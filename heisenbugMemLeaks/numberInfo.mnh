simpleForm(i:Int)->begin
  local bases:=[2,3,5..7,10..15,17..24,26..31,33..35,37..48];
  local exponents:=round(ln(i)/ln(bases));
  local offsets:=i-bases^exponents;
  local k:=argMin(abs(offsets)+bases+exponents);
  format("%s^%s{$2<0 ? $2 : $2>0 ? '+'&$2 : ''}",bases[k],exponents[k],offsets[k]);
end;

properDividers(i:Int)->begin
  local factors:=factorize(i).elementFrequency;
  local factorCount:=factors.map({$x[1]+1}).agg(*)-1;
  factorCount>24 ? return format('{factorCount} proper dividers in total') : void;
  local dividers:=[1].toSet;
  factors.each(entry,begin
    dividers*=toSet(entry[0]^[0..entry[1]]);
    void;
  end);
  dividers.sort.filter({$x<>i}).join(",");
end;

infoOnNumber(i:Int)->begin
  print('Number: ',i);
  print ('      = ',simpleForm(i));
  print ('      = ',i.digits(2).join,'b');
  printf('      = %xx',i);
  print ('Factorization   : ',i.isPrime ? i&' is prime' : i.factorize.join("*"));
  print ('Proper dividers : ',properDividers(i));
  print ('Adjacent primes : ',rangeGenerator(i-1,0).filter(::isPrime).head(1)[0],' ',
                              rangeGenerator(i+1  ).filter(::isPrime).head(1)[0]);
  print ('Adjacent squares: ',i.sqrt.floor.sqr,' ',
                              i.sqrt.ceil.sqr);
end;

asSumOfSquares(i=0)->[];
asSumOfSquares(i>0)->begin
  sqr([1..floor(sqrt(i))]).pEach(k,begin
    local r:=(i-k).asSumOfSquares;
    [r.size,r];
  end).sort.head;
end;

asSumOfSquares(2444);
