USE collide_types,collide_initialState,collide_store;

private HAS_WRITE_ACCESS:=begin
  local MY_IPC_ID:=myPath+'1532';
  isIpcServerRunning(MY_IPC_ID)
  ? false
  : begin
      startIpcServer(MY_IPC_ID,::note);
      true;
    end;
end;

MINIMUM_TIME_STEP_SIZE:=TIME_STEP_SIZE/100;
BALL_SEPARATION_FACTOR:=1.00000000001;
EDGE_HIT       :=-1;
POINT_HIT      :=-3;
GEOMETRY_HITS:=[EDGE_HIT,POINT_HIT];

//*Returns hit info: [hitTime,ballId,POINT_HIT,point]
ballHitsPoint(point:Vector,ballId:Int,p:Vector,v:Vector)->begin
  local dx:=p-point;
  // |p+v*t - point|=1
  // (p-point + v*t)^2=1
  // (p-point)^2 + 2*(p-point)*(v*t) + (v*t)^2 = 1
  (local xv:=(dx*v).agg(+))>=0.0 //ball is moving away from point
  ? return void
  : void;
  (local xx:=(dx*dx).agg(+))<=1.0 //point is in ball?
  ? return [0.0,ballId,POINT_HIT,point]
  : void;
  [(local a:=-xv/(local vv:=v.sqr.agg(+)))-sqrt(sqr(a)-(xx-1.)/vv),ballId,POINT_HIT,point];
end;

//*Returns hit Info: [hitTime,ballId,EDGE_HIT,edge]
ballHitsEdge(edge:EdgeSystem,ballId:Int,p:Vector,v:Vector)->begin
  local tp:=edge[1]*(p-edge[2]);
  -1<tp[1]<1 //is ball already intersecting or below ?
    ? 0<=tp[0]<=1 //is ball above edge
      ? [0.0,ballId,EDGE_HIT,edge]
      : void
    : (local vp:=edge[1]*v)[1]>=0 //is the ball moving away from the edge?
      ? void
      : begin
          local tHit:=(1-tp[1])/vp[1];
          tHit>0 AND 0<=tp[0]+vp[0]*tHit<=1 //will the ball be above the edge on hit time?
          ? [tHit,ballId,EDGE_HIT,edge]
          : void;
        end;
end;
ballHitsGeometry(geometryInfo:Geometry,ballId:Int,p:Vector,v:Vector)->
  (geometryInfo['edges'].each(edgeInfo,ballHitsEdge (edgeInfo,ballId,p,v))) |
  (geometryInfo['nodes'].each(node    ,ballHitsPoint(node    ,ballId,p,v)));

ballHitsGeometry(geometryInfo:Geometry,ballId:Int,p:Vector,v:Vector,ballBox:BoundingBox)->
  (geometryInfo['edges'].each(edgeInfo,edgeInfo[4].boundingBoxesIntersect(ballBox) ? ballHitsEdge (edgeInfo,ballId,p,v) : void)) |
  (geometryInfo['nodes'].each(node    ,node       .pointIsInBox          (ballBox) ? ballHitsPoint(node    ,ballId,p,v) : void));

resolveGeometryHit(kind=POINT_HIT,hitInfo,position,velocity)->begin
  local dx:=position-hitInfo[3];
  local movementAwayFromPoint:=((dx*velocity).agg(+));
  movementAwayFromPoint>=0
  ? [position,velocity]
  : begin
      dx/=dx.euklideanNorm;
      [(dx*BALL_SEPARATION_FACTOR+hitInfo[3]),
      velocity-dx*1.5*movementAwayFromPoint];
    end;
end;

resolveGeometryHit(kind=EDGE_HIT,hitInfo,position,velocity)->begin
  local edgeSys:=hitInfo[3];
  local tp:=edgeSys[1]*(position-edgeSys[2]);
  local vp:=edgeSys[1]*velocity;
  vp[1]>0
  ? [position,velocity]
  : begin
      vp[1]:=0.5*abs(vp[1]);
      tp[1]:=BALL_SEPARATION_FACTOR;
      [edgeSys[0]*tp+edgeSys[2],
       edgeSys[0]*vp];
    end;
end;

//*When do balls with position delta dx and speed delta dv collide?
private ballsCollide(dx:Vector,
                     dv:Vector,
                     ballId1:Int,ballId2:Int)->begin
  (local xv:=(dx*dv).agg(+))>=0.0 //Are balls moving away from each other?
  ? void
  : (local xx:=(dx*dx).agg(+))<=4.0 //All balls already intersecting?
    ? [0.0,ballId1,ballId2]
    : [(local a:=-xv/(local vv:=dv.sqr.agg(+)))-sqrt(sqr(a)-(xx-4.)/vv),ballId1,ballId2];
end;

movement(velocities)->velocities.each(v,v.sqr.agg(+),max).sqrt;

prettyStatus(collisionCount,sliceCount,movement)->begin
  local lineCounter:=0;
save;
  collisionCount=-1
  ? return lineCounter:=sliceCount;
  : void;
  lineCounter mod 20=0
  ? print('          step | collisions | time slices | max velocity')
  : void;
  printf('%9s %4s | %10s | %11s | %s',formatTime('hh:nn:ss ',systime),lineCounter+=1,collisionCount,sliceCount,movement);
end;


//*Evolve system of balls for a time step of dt
private evolve(geometry,positions,velocities)->begin
  local dtRest:=TIME_STEP_SIZE; //Remaining time to integrate
  local P:=positions;
  local A:=velocities.map(()->[0.0,DOWNWARD_ACCEL]);
  local V:=velocities;

  local collisionCount:=0;
  local sliceCount:=0;

  while(dtRest>0,begin
    local ballBox:=P.pEach(p,boundingBoxOfBall(p,V[index],dtRest));
    sliceCount+=1;
    //Construct a list of collisions, sorted by time
    local collisions:=[0..P.size-1].pEach(j,
      j=0
      ? void
      : [0..j-1].each(i,boundingBoxesIntersect(ballBox[i],ballBox[j])
                        ? ballsCollide(P[i]-P[j],V[i]-V[j],i,j)
                        : void),
      ballHitsGeometry(geometry,j,P[j],V[j],ballBox[j]),|);
    collisions:=collisions[collisions.getInner(0)<=dtRest].sort;
    //Find collision time (or none)
    local collisionTime:=min(collisions.head[0] orElse dtRest,dtRest).max(MINIMUM_TIME_STEP_SIZE);
    //Filter collisions to be considered in this time slice
    collisions:=collisions.filter({$x[0]<=collisionTime});

    dtRest-=collisionTime;
    collisionCount+=collisions.size;
    local T:=P.map(()->0);

    //Resolve collisions
    collisions.each(collision,begin
      local collisionTime:=collision[0];
      local i:=collision[1];
      local j:=collision[2];
      j in GEOMETRY_HITS
      ? begin
          local dti:=collisionTime-T[i];
          T[i]:=collisionTime;
          local R:=resolveGeometryHit(collision[2],collision,P[i]+dti*V[i],V[i]);
          V[i]+=A[i]*dti;
          P[i]:=R[0];
          V[i]:=R[1];
        end
      : begin
          local dti:=collisionTime-T[i];
          local dtj:=collisionTime-T[j];
          T[i]:=collisionTime;
          T[j]:=collisionTime;
          P[i]+=V[i]*dti; V[i]+=A[i]*dti;
          P[j]+=V[j]*dtj; V[j]+=A[j]*dtj;

          //Resolve ball hit:
          local dx:=P[i]-P[j];
          dx/=dx.euklideanNorm;
          //Negate differential velocity
          local dv:=V[i]-V[j]; dv:=dx*(local q:=(dx*dv).agg(+));
          q<0 ? begin
            V[i]-=dv;
            V[j]+=dv;
            //move balls, so that they don't intersect anymore
            local cx:=0.5*(P[i]+P[j]);
            P[i]:=cx+(dx*=BALL_SEPARATION_FACTOR);
            P[j]:=cx-dx;
          end : void;
        end;
      void;
    end);
    P+=(collisionTime-T)*V;
    V+=(collisionTime-T)*A;

  end);
  prettyStatus(collisionCount,sliceCount,V.euklideanNorm.max);
  [geometry,P,V];
end;

synchronized calculateSystemHeadless(  geometryName in (GEOMETRIES.getInner(0)),
  ballPosName in (INITIAL_BALL_POSITIONS.getInner(0)),
  numberOfBalls>=1)->begin
  local name:=getInitialSystemName(geometryName,ballPosName,numberOfBalls);
  local sys:=void;
  canReplay(name)
  ? canResumeCalculation(name)
    ? begin
        print('Resuming calculation of ',name);
        sys:=resumeCalculation(name);
        prettyStatus(-1,current.size-2,-1);
      end
    : return false
  : begin
      print('Calculating ',name);
      sys:=getInitialSystem(geometryName,ballPosName,numberOfBalls);
      storeInitial(sys[0],sys[1]);
      prettyStatus(-1,-1,-1);
    end;
  local timeout:=time+60;
  while(stillMoving AND time<timeout,
    begin
      sys:=evolve@sys;
      storeStep(sys[1]);
    end);
  storeReplay(sys[2],name);
  stillMoving
  ? print('Calulation aborted after ',round(time+60-timeout,2),' seconds')
  : print('Done calculating');
  true;
end;

synchronized calculateOrReplaySystem(
  geometryName in (GEOMETRIES.getInner(0)),
  ballPosName in (INITIAL_BALL_POSITIONS.getInner(0)),
  numberOfBalls>=1,
  cancelRequested:Expression(0))->
begin
  local name:=getInitialSystemName(geometryName,ballPosName,numberOfBalls);
  local sys:=void;
  doReplay(name)
  ? canResumeCalculation(name)
    ? begin
        print('Resuming calculation of ',name);
        sys:=resumeCalculation(name);
        prettyStatus(-1,current.size-2,-1);
      end
    : return true
  : begin
      print('Calculating ',name);
      sys:=getInitialSystem(geometryName,ballPosName,numberOfBalls);
      resetPlot;
      clearAnimation;
      storeInitial(sys[0],sys[1]);
      prettyStatus(-1,-1,-1);
      drawSystem@sys;
      postDisplay;
    end;
  while(stillMoving AND !cancelRequested(),
    begin
      sys:=evolve@sys;
      drawSystem@sys;
      storeStep(sys[1]);
    end);
  !cancelRequested() OR ask("Calculation cancelled\nDo you want to store the replay?",['Yes','No'])=='Yes'
  ? storeReplay(sys[2],name)
  : void;
  print('Done calculating');
  true;
end;


USE customFormUtil;

//*Interactive mode
main->begin
  local geometry:='simple';
  local layout:='stacked';
  local ballCount:=6;
  local ballCountTxt:=ballCount.toString;
  local runningTask:=async({true});
  local cancellingCalculation:=false;
  showDialog('Collide',[
    newComboBox({storedCollisions})
      .withCaption('Stored system')
      .withAction({begin
                     local parts:=$x.split(',').trim;
                     geometry :=parts[0];
                     layout   :=parts[1];
                     ballCount:=parts[2].softCast;
                     ballCountTxt:=ballCount.toString;
                   end}),
    newComboBox(GEOMETRIES.getInner(0).sort)
      .withCaption('Geometry')
      .bind(::geometry),
    newComboBox(INITIAL_BALL_POSITIONS.getInner(0).sort)
      .withCaption('Ball layout')
      .bind(::layout),
    newEdit
      .withCaption('Number of balls')
      .bind(::ballCountTxt)
      .withActionOnChange({ballCount:=$txt.softCast}),
    newSplitPanel([
    newButton
      .withCaption({collisions[getInitialSystemName(geometry,layout,ballCount)].isVoid
                    ? 'Calculate'
                    : getInitialSystemName(geometry,layout,ballCount).canResumeCalculation
                      ? 'Resume calculation'
                      : 'Replay'})
      .withEnabledRule({!runningTask().isVoid AND ballCount.isInt AND ballCount>=1 AND (HAS_WRITE_ACCESS OR !collisions[getInitialSystemName(geometry,layout,ballCount)].isVoid)})
      .withAction({begin
          cancellingCalculation:=false;
          runningTask:=localAsync(::calculateOrReplaySystem,[geometry,layout,ballCount,{cancellingCalculation}]);
        end})],[
    newButton
      .withCaption('Delete replay')
      .withEnabledRule({!collisions[getInitialSystemName(geometry,layout,ballCount)].isVoid AND HAS_WRITE_ACCESS})
      .withAction({collisions[getInitialSystemName(geometry,layout,ballCount)]:=void})
      ]),
    newOutputConsole,
    newButton.withCaption('Cancel calculation')
             .withAction({cancellingCalculation:=true})
             .withEnabledRule({!cancellingCalculation AND runningTask().isVoid})
  ]);
end;

//*Compute and store all defaults
//*Time limit is 1 minute per scenario, 30 minutes globally
main('defaults')->begin
  assert(HAS_WRITE_ACCESS);
  local scriptTimeout:=time+1800; //=30 minutes
  local lastSave:=time;
  while(time<scriptTimeout,begin
    local anyMoving:=
      GEOMETRIES.getInner(0).each(geometry,
      INITIAL_BALL_POSITIONS.getInner(0).each(initial,
        time<scriptTimeout
        ? calculateSystemHeadless(geometry,initial,20)
        : void,
        time-lastSave>600 //=10 minutes
        ? begin
            async(::writeAllDataStores);
            lastSave:=time;
          end
        : void,or),or);
    anyMoving
    ? void
    : scriptTimeout:=time;
  end);
end;

