plain script;
CON_SIZE:=((
isGuiStarted ? [80,40] :
begin
  local console_size:=exec('cmd',['/C','mode','con'])[0].filter((L)->L.matches(': *\d+$'))[[1,0]].split(':').getInner(1).trim.softCast;
  console_size.isIntList(2)
  ? begin
      local width:=console_size[0];
      local height:=min(width,console_size[1]);
      [width,height];
    end
  : [80,40];
end-[0,1]).reverseList*[2,1]);

F12:=begin
  local F1:=[];
  local F2:=[];
  [0..CON_SIZE[1]-1].each(i,[0..CON_SIZE.agg(*)-1][[CON_SIZE[0]*i..CON_SIZE[0]*(i+1)-1]])
             .transpose
             .reverseList
             .each(l,begin
                (index and 1)=0
                ? F1||=l
                : F2||=l;
              end);
  F1.each(f,[f,F2[index] orElse F2[0]]);
end;

M:=[' ','▀','▄','█'];
@MaxAge=1
worldToText(world:IntList)->join("\f"|F12.each(f,M[world[f[0]]+world[f[1]]*2].join.trimRight),"\n");

//*Shifts - this returns a list of intLists, indicating adjacent cells
shifts:=begin
  [-1..1].cross([-1..1]).each(sh,0=sh[0]=sh[1] ? void :
  (([0..CON_SIZE[1]-1]+sh[0]+CON_SIZE[1]) mod CON_SIZE[1]*CON_SIZE[0]).cross
  (([0..CON_SIZE[0]-1]+sh[1]+CON_SIZE[0]) mod CON_SIZE[0]                          ).map({$x[0]+$x[1]}));
end;

//*The Transision table
private TRANSITION:=[0,0,0,1,0,0,0,0,0,
                     0,0,1,1,0,0,0,0,0];

//*Computes the following generation based on current generation w
@MaxAge=1
private memoized step(w:IntList)->TRANSITION[shifts.each(sh,w[sh],+)+9*w];
mutable quitRequested:=false;

async({begin
  local answer:='';
  while(!(answer in ['q','Q']),begin
    answer:=ask('',['q','m'],false);
    answer in ['m','M']
    ? callMemoryCleaner : void;
  end);
  quitRequested:=true;
end});

begin
  local stepMillis:=0;
  local writeMillis:=0;
  local frameCounter:=0;

  local W:=ord(random(CON_SIZE.agg(*))>[0.. CON_SIZE.agg(*)-1]/CON_SIZE.agg(*));
  print(W.worldToText);
  while(!quitRequested,begin
    local sleepTarget:=0.05+scriptTime;

    local t0:=scriptTime; W:=W.step;            stepMillis :=(stepMillis *0.9)+0.1*(scriptTime-t0);
    local statusLine:=f'ms/step: %{stepMillis*1000}7.3f+%{writeMillis*1000}7.3f    Mem: %{mnhInfo["used_mem"]/1024²}3.2fMiB    Pop: %{W.agg(+)*100.0/CON_SIZE[0]/CON_SIZE[1]}3.2f%%';
          t0:=scriptTime; print(W.worldToText); writeMillis:=(writeMillis*0.9)+0.1*(scriptTime-t0);
    printDirect(statusLine);
    (frameCounter+=1) mod 100=0
    ? callMemoryCleaner
    : void;
    sleepUntil(sleepTarget);
  end);
end;
