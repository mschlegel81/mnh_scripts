hyperbola(x)->sqrt(1+x^2)-1;
circle(x)->1-sqrt(1-x^2);
conic(w=0.0)-> ::sqr;
conic(w<0.0)->(1/circle   (w))*{   circle(w*$t)};
conic(w>0.0)->(1/hyperbola(w))*{hyperbola(w*$t)};


ducktype ConicParamter(x:Numeric)->-1<=x<Inf;
ducktype ValidWidth(x:Numeric)->0<x<=1;
ducktype ValidReal(x:Numeric)->!x.isNan AND !x.isInfinite;

REFLECTOR_POINTS:=30;
SAMPLE_RAYS:=20;
REFLECT_EPSILON:=1E-6;

makeReflector(parameter:ConicParamter,
              depth:ValidReal,
              width:ValidWidth)->begin
  Y:=[-1000..1000]/1000*width;
  X:=Y.map(conic(parameter)*depth);
  points:=[X-X.agg(+)/X.size,
                 Y-Y.agg(+)/Y.size].transpose;
  curveLength:=0;
  mask:=0|(euklideanNorm(points.tail-points.leading)).each(d,curveLength+=d);
  mask/=mask.trailing;
  mask:=([0..REFLECTOR_POINTS]/REFLECTOR_POINTS).each(l,argMin(abs(mask-l)));

  [points[mask],
   mask.each(k,(points[k+1] orElse points[k])-
               (points[k-1] orElse points[k]))
       .each(d,d.reverseList*[-1,1]/d.euklideanNorm)];
end;

@SuppressUnusedParameterWarning
ducktype Vec2(v:NumericList(2))->true;

cramerSolve(a:Vec2,b:Vec2,c:Vec2)->[(c*b.reverseList).agg(-),
                                    (a*c.reverseList).agg(-)]/
                                   ((a*b.reverseList).agg(-));

rayHitsLine(rayStart:Vec2,rayDirection:Vec2,
            lineStart:Vec2,lineEnd:Vec2)->begin
  //rayStart +rayDirection*t= lineStart+lineLength *u
  //rayDirection*t- lineLength *u= lineStart-rayStart
  sol:=cramerSolve(rayDirection,lineStart-lineEnd,lineStart-rayStart);
  0<=sol[1]<=1 AND sol[0]>REFLECT_EPSILON
  ? sol
  : void;
end;

private X0:=-2;
private X1:= 3;
private Y0:=-2.5;
private Y1:= 2.5;

rayHitsBoundingBox(rayStart:Vec2,rayDirection:Vec2)->
  [(X0-rayStart[0])/rayDirection[0],
   (X1-rayStart[0])/rayDirection[0],
   (Y0-rayStart[1])/rayDirection[1],
   (Y1-rayStart[1])/rayDirection[1]]
  .filter({!$x.isNan AND !$x.isInfinite AND $x>REFLECT_EPSILON}).min;

rayBundle(angle)->begin
  direction:=[cos(angle),sin(angle)];
  shift    :=direction.reverseList*[-0.5,0.5];
  bundle   :=([0.. SAMPLE_RAYS-1]/(SAMPLE_RAYS-1)*2-1).each(i,begin
    start:=shift*i;
    [start-rayHitsBoundingBox(start,-direction) *direction,direction];
  end);
  bundle;
end;

traceRay(mirror:List,ray:List(2))->begin
  mirrorPoints :=mirror[0];
  firstHit:=
  [0..mirrorPoints.size-2].each(i,begin
    tHit:=rayHitsLine(ray[0],ray[1],mirrorPoints[i],mirrorPoints[i+1]);
    tHit.isVoid
    ? void
    : [tHit[0],tHit[1],i];
  end).sort[0];
  firstHit.isVoid
  ? [ray[0],ray[0]+rayHitsBoundingBox(ray[0],ray[1])*ray[1]]
  : begin
      mirrorNormals:=mirror[1];
      hitNormal:=mirrorNormals[firstHit[2]+1]*(  firstHit[1])+
                       mirrorNormals[firstHit[2]  ]*(1-firstHit[1]);
      hitNormal/=hitNormal.euklideanNorm;
      hitPoint :=ray[0]+firstHit[0]*ray[1];
      outDir   :=ray[1]-hitNormal*((ray[1]*hitNormal).agg(+)*2);
      outDir/=outDir.euklideanNorm;
      [ray[0]]|traceRay(mirror,[hitPoint,outDir]);
    end;
end;

prettyRays(rays:List)->begin
  MAX_SEG:=20;
  partLength:=rays.each(ray,ray.euklideanNorm.agg(+)).sort[round(0.8*rays.size)]/MAX_SEG;
  segmentsByPart:=[].toMap;
  styles:=[0..MAX_SEG].each(k,'RGB1,0,0,'&((MAX_SEG+1-k)/MAX_SEG));
  rays.each(ray,begin
    restLength:=partLength;
    partIndex:=0;
    [0..ray.size-2].each(k,begin
      p0:=ray[k  ];
      p1:=ray[k+1];
      while euklideanNorm(p1-p0)>restLength do begin
        pSplit:=p0+(p1-p0)/euklideanNorm(p1-p0)*restLength;
        segmentsByPart[min(MAX_SEG,partIndex+=1)]|=[p0,p0:=pSplit,[Nan,Nan]];
        restLength:=partLength;
      end;
      segmentsByPart[min(MAX_SEG,partIndex)]|=[p0,p1,[Nan,Nan]];
      restLength-=euklideanNorm(p1-p0);
    end);
  end);
  segmentsByPart.each(s,addPlot(s[1],styles[s[0]]));
end;

USE customFormUtil;
main->begin
  clearAnimation;
  resetOptions;
  setOptions(['x0'=>X0,'x1'=>X1,
              'y0'=>Y0,'y1'=>Y1,
              'axisStyleX'=>3,
              'axisStyleY'=>3,
              'autoscaleX'=>false,
              'autoscaleY'=>false]);

  formTxt :=formParameter :=-1;
  depthTxt:=depthParameter:= 1;
  widthTxt:=widthParameter:= 1;
  mirror:=makeReflector(-1,1,1);
  rayDirection  :=0;

  refreshRays:={begin
    mirror[0].plot('black');
    rayBundle(rayDirection)
    .pEach(x,traceRay(mirror,x)).prettyRays;
    postDisplay;
  end};

  updateMirror:={begin
    mirror:=makeReflector(formParameter,depthParameter,widthParameter);
    refreshRays();
  end};

  showDialog('Mirror',[
    newEdit.withCaption('form parameter')
           .bind(::formTxt)
           .withAction({begin
             formParameter:=try({formTxt.toReal},formParameter).max(-1).min(100);
             formTxt:=formParameter;
             updateMirror();
           end}),
    newEdit.withCaption('depth')
           .bind(::depthTxt)
           .withAction({begin
             depthParameter:=try({depthTxt.toReal},depthParameter).max(0).min(100);
             depthTxt:=depthParameter;
             updateMirror();
           end}),
    newEdit.withCaption('width')
           .bind(::widthTxt)
           .withAction({begin
             widthParameter:=try({widthTxt.toReal},widthParameter).max(0).min(1);
             widthTxt:=widthParameter;
             updateMirror();
           end}),
    newPlotDock,
    newPlotLink.withMouseMoved({begin
      rayDirection:=pi/2-arctan2(-$y,-$x);
      refreshRays();
    end})]);
end;

