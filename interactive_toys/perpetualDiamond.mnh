#!C:\bin\mnh.exe -GUI
USE GUI,customFormUtil;
EDGE_STYLE :=    '2 GREY%{(0.5+0.5*0.7*sin($0+$1))}s';
BACK_STYLE :='box fs GREY%{0.5+0.5*0.7*sin($0)}s';
INNER_STYLE:='polygon fs GREY%{0.5+0.5*0.7*sin($0)}s';

draw_A(t,p0,p1,p2,p3)->begin
  setOptions(["axisStyleX"=>0,"axisStyleY"=>0,"autoscaleFactor"=>1.2].toMap);
  plot([[-2.5,-2.5],[2.5,2.5]],'box fs GREY0.5');
  [[-1,0],[0,1],[1,0],[0,-1]].addPlot(INNER_STYLE.format(t));
  [[-1,0],[0,1]]             .addPlot(EDGE_STYLE.format(t,-p0));
  [[1,0],[0,1]]              .addPlot(EDGE_STYLE.format(t,-p1));
  [[1,0],[0,-1]]             .addPlot(EDGE_STYLE.format(t,-p2));
  [[-1,0],[0,-1]]            .addPlot(EDGE_STYLE.format(t,-p3));
end;

draw_B(t,p0,p1,p2,p3)->begin
  setOptions(["axisStyleX"=>0,"axisStyleY"=>0,"autoscaleFactor"=>1.2].toMap);
  plot([[-2.5,-2.5],[2.5,2.5]],BACK_STYLE.format(t));
  [[-1,0],[0,1],[1,0],[0,-1]].addPlot('polygon fs 0 GREY0.5');
  [[-1,0],[0,1]]             .addPlot(EDGE_STYLE.format(t,p0));
  [[1,0],[0,1]]              .addPlot(EDGE_STYLE.format(t,p1));
  [[1,0],[0,-1]]             .addPlot(EDGE_STYLE.format(t,p2));
  [[-1,0],[0,-1]]            .addPlot(EDGE_STYLE.format(t,p3));
end;

//PHASES:=['up'    =>[ pi/2, pi/2,-pi/2,-pi/2],
//         'down'  =>[-pi/2,-pi/2, pi/2, pi/2],
//         'grow'  =>[ pi/2, pi/2, pi/2, pi/2],
//         'shrink'=>[-pi/2,-pi/2,-pi/2,-pi/2],
//         'right' =>[-pi/2, pi/2, pi/2,-pi/2],
//         'left'  =>[ pi/2,-pi/2,-pi/2, pi/2],
//         'shear' =>[-pi/2, pi/2,-pi/2, pi/2]];
//
//animate(motion in (PHASES.getInner(0)),draw:Expression(5))->
//  begin
//    local p:=PHASES[motion];
//    ([0..19]/20*2*pi).each(t,draw(t,p[0],p[1],p[2],p[3]); addAnimationFrame);
//  end;

main->begin
  local drawByA:=true;
  local phaseT    :=[0,0,pi,pi];
  local phaseDT   :=[0,0,0,0];
  local t:=0;
  local dt:=pi/10;
  local restartRendering:={begin note('Resetting...'); clearAnimation(true); t:=0; end};
  restartRendering();
  localAsync({
    while(true,begin
      (drawByA ? ::draw_A : ::draw_B)@((t+=dt)|(pi/2*cos(phaseT+=phaseDT)));
      display;
    end);
  });
  showDialog('Perpetual Diamond',[newGrid(3,
  [newCheckbox.withCaption('Fixed outside').bind(nameOf drawByA).withAction((any)->restartRendering()),
   newButton.withCaption('up'    ).withAction({begin phaseT:=[0,0,pi,pi];   phaseDT:=0;                   restartRendering(); end}),
   newButton.withCaption('grow'  ).withAction({begin phaseT:=[0,0,0,0];     phaseDT:=0;                   restartRendering(); end}),
   newButton.withCaption('left'  ).withAction({begin phaseT:=[0,pi,pi,0];   phaseDT:=0;                   restartRendering(); end}),
   newButton.withCaption('shrink').withAction({begin phaseT:=[pi,pi,pi,pi]; phaseDT:=0;                   restartRendering(); end}),
   newButton.withCaption('right' ).withAction({begin phaseT:=[pi,0,0,pi];   phaseDT:=0;                   restartRendering(); end}),
   newButton.withCaption('shear' ).withAction({begin phaseT:=[0,pi,0,pi];   phaseDT:=0.03;                restartRendering(); end}),
   newButton.withCaption('down'  ).withAction({begin phaseT:=[pi,pi,0,0];   phaseDT:=0;                   restartRendering(); end}),
   newButton.withCaption('random').withAction({begin phaseT:=random(4)*pi;  phaseDT:=0.015*(1+random(4)); restartRendering(); end})]
  ),newPlotDock]
  );
end;
