#!C:\bin\mnh.exe -GUI -quiet
memoized allCoordinateStrings(len>=1,base in [2..5])->begin
  charMap:=[cross([base-1..0],[0..base-1]),
            ['A'..'Z'].head(base²)].transpose.toMap;
  halfChars:=digits([0..base^len-1],base)
    .map((d)->begin
      r:=d;
      while r.size<len do r:=0|r;
      r;
     end);

  cross(halfChars,halfChars).pMap((m)->charMap.getAll(m.transpose).join);
end;

showHelp(base in [2..5],depth)->begin
  resetOptions;
  setOptions(["axisStyleX"=>0,"axisStyleY"=>0].toMap);
  plot();
  allCoordinateStrings(depth,base)
  .each(char,
    begin
      i:=base-1-index div (base)^depth;
      j:=       index mod (base)^depth;
      addPlot([[j,i]-0.5,[j,i]+0.5],'box black');
      drawText(j,i,char,20,'C');
    end);
  display;
end;

memoized scaleMap(len>1,base)->begin
  all:=cross([base^len-1..0],[0..base^len-1]);
  all:=(all.getInner(1) mod base) + base*(all.getInner(0) mod base);
  [0..base²-1].map((k)->indexOf(all=k));
end;

boxCountingDimension(L:BooleanList,base)->begin
  depth:=round(ln(L.size)/ln(base²));
  (depth<=1) OR (L.size<>base^(2*depth))
  ? return [Nan,Nan]
  : void;
  scale:=scaleMap(depth,base);
  B:=!L;
  cA:=[trueCount(L),trueCount(scale.each(s,L[s],or))];
  cB:=[trueCount(B),trueCount(scale.each(s,B[s],or))];
  //note('cA  =',cA,
  //   "\ncB  =",cB,
  //   "\nbase=",base,' depth=',depth,'; (',base^(2*depth),'/',L.size,')');
  [ln(cA).agg(-),
   ln(cB).agg(-)]/ln(base);
end;
USE customFormUtil;

ALPHABET_OPTIONS:=['A..D','A..I','A..P','A..Y'];

main->begin
  hideConsole;
  displayRegex:=
  workRegex:='^[ABC]+$';
  stop:=false;
  restart:=true;
  lastRenderedResolution:=-1;
  dimString:=format("Resolution: %s\nDim:%s \nDim(i):%s",0,0,0);
  base:=2;
  alphabetSelect:=ALPHABET_OPTIONS[base-2];
  localAsync(()->while true do begin
    Q:=0;
    stop:=!restart; restart:=false;
    sleep(ord(stop));
    while !stop AND 2048>=base^(Q+=1)<=plotImageSize.min*1.5 do begin
      R:=base^Q;
      p:=(allCoordinateStrings(Q,base).matches(workRegex));
      resetOptions;
      setOptions(["axisStyleX"=>0,
                  "axisStyleY"=>0].toMap);
      plot();
      plotRasterImage(ord(!p),R);
      lastRenderedResolution:=R;
      dim:=boxCountingDimension(p,base);
      dimString:=format("Resolution: %s\nDim:%s \nDim(i):%s",R,dim[0],dim[1]);
      display;
    end;
  end);

  showDialog('Regex Imaging',[
    newSplitPanel([
      newComboBox(ALPHABET_OPTIONS)
        .withCaption('alphabet')
        .bind(::alphabetSelect)
        .withActionOnChange((s)->begin
           i:=indexOf(ALPHABET_OPTIONS=s);
           i==[]
           ? alphabetSelect:=ALPHABET_OPTIONS[base-2]
           : begin
               base:=i.head+2;
               restart:=true;
             end;
         end),
      newEdit
        .withCaption('regex')
        .bind(::displayRegex)
        .withActionOnChange((reg)->
        validateRegex(reg) ? begin
          workRegex:=reg;
          stop:=true;
          restart:=true;
        end : void),
      newLabel.withCaption(()->dimString),
      newButton.withCaption('show help for alphabet').withAction(()->begin
        stop:=true;
        restart:=false;
        showHelp(base,1);
      end),
      newButton.withCaption('export').withEnabledRule(()->lastRenderedResolution>100).withAction(()->begin
        stop:=true;
        targetFilename:=ask('Filename for export (png or bmp)');
        targetFilename.isVoid
        ? void
        : renderToFile(targetFilename,lastRenderedResolution,lastRenderedResolution);
        stop:=false;
      end)],[newPlotDock])]);
end;
