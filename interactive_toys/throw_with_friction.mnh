//gravAccel:=[0,-9.81];
//baseFriction(v:NumericList(2))->v*(-euklideanNorm(v));

USE rungeKutta,customFormUtil;

getThrowCurve(initialAngle:Numeric,initialSpeed>0,frictionFactor:Numeric)->
begin
  state:=[[0,0],initialSpeed*[cos(initialAngle),sin(initialAngle)]];
  step:=integrator(CASH_KARP,
  frictionFactor=0
    ? (s)->[s[1],[0,-9.81]                                        ]
    : (q)->[q[1],[0,-9.81]-frictionFactor*euklideanNorm(q[1])*q[1]]
  ,0.01,1E-3);
  positionHistory:=[state[0]];
  while (positionHistory.size<2 OR state[0,1]>0) AND (positionHistory.size<1000) do begin
    state:=step(state);
    positionHistory|=[state[0]];
  end;
  last:=positionHistory.trailing; positionHistory:=positionHistory.leading;
  prev:=positionHistory.trailing;
  // prev[1]+(last[1]-prev[1])*tau = 0
  // tau = -prev[1]/(last[1]-prev[1])
  // x = prev[0]+(last[0]-prev[0])*tau
  //   = prev[0]-(last[0]-prev[0])*prev[1]/(last[1]-prev[1])
  positionHistory|=[[prev[0]-(last[0]-prev[0])*prev[1]/(last[1]-prev[1]),0]];
  print('v0=',initialSpeed,'; α=',round(initialAngle/pi*180,2),'°; fr=',frictionFactor,'; range=',positionHistory.trailing[0]);
  positionHistory;
end;

main->begin
  initialSpeed  :=initialSpeedTxt  :=10;
  angle         :=angleTxt         :=45;
  frictionFactor:=frictionFactorTxt:=0;
  addAutomatically:=false;

  allRows:=[];

  addRow:=()->begin
    allRows:=trailing(allRows|[getThrowCurve(angle/180*pi,initialSpeed,frictionFactor)],30);
    plot(allRows.trailing);
    allRows.reverseList.tail.each(r,addPlot(r,'RGB0,0,0,0.5 l '&((31-index)*1/31)));
    display;
  end;

  validate:=()->begin
    allOkay:=true;

    temp:=softCast(initialSpeedTxt);
    temp.isNumeric AND temp>0
    ? initialSpeed:=temp
    : begin
        initialSpeedTxt:=initialSpeed;
        allOkay:=false;
      end;

    temp:=softCast(angleTxt);
    temp.isNumeric AND 0<=temp<=90
    ? angle:=temp
    : begin
        angleTxt:=angle;
        allOkay:=false;
      end;

    temp:=softCast(frictionFactorTxt);
    temp.isNumeric AND temp>=0
    ? frictionFactor:=temp
    : begin
        frictionFactorTxt:=frictionFactor;
        allOkay:=false;
      end;
    addAutomatically AND allOkay ? addRow() : void;
    allOkay;
  end;

  showDialog('Throw...',[
    newSplitPanel([
      newEdit.withCaption('Initial speed')
             .bind(::initialSpeedTxt)
             .withActionOnChange(validate),
      newEdit.withCaption('Angle in degrees')
             .bind(::angleTxt)
             .withActionOnChange(validate),
      newEdit.withCaption('Friction factor')
             .bind(::frictionFactorTxt)
             .withActionOnChange(validate)],
      [newCheckbox.withCaption('add automatically').bind(::addAutomatically),
       newButton.withCaption('add').withAction(addRow),
       newButton.withCaption('clear').withAction(()->begin
         allRows:=[];
         plot();
         display;
       end)]),
    newOutputConsole,
    newPlotDock
   ]);
end;

