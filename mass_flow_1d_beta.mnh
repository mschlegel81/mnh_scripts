IMAX:=400;
gridSize:=200/IMAX;
c0:=//0.2-0.2*cos([0..200]/201*2*pi);
   // 0.1+ord([0..IMAX]=IMAX div 2);
    ord([0..IMAX]<0);

    //0.1+cos(10*pi/IMAX*[0..IMAX])*0.1;
    //0.2*exp(-500*sqr([0..IMAX]/IMAX-0.4));
p0:=c0*0;
fBaseProfile(x)->
cos(7*pi/IMAX*(x-0.5))*0.1
                 +0.5
                 -0.3*((x-0.5)/IMAX);
baseProfile:=fBaseProfile([0..IMAX]+0.5);
baseProfileSlope:=map([0..IMAX+1],(x)->fBaseProfile(x+0.6)-fBaseProfile(x+0.4))*5;


postPlotSystem(c,p)->begin
  local pending:=[];
  local done:=false;
  local backgroundPlot:=future({begin
    while(!done,begin
      sleep(5);
      while(pending.size>0,begin
        local current:=pending.head; pending:=pending.tail;
        local h:=current[0]+baseProfile;
        setOptions(["x0"=>0,"x1"=>c0.size,"y0"=>0,"y1"=>1,"fontsize"=>10,"preserveAspect"=>false,"autoscaleX"=>false,"autoscaleY"=>false,"logscaleX"=>false,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>6,"axisStyleY"=>6].toMap);
        plot;
        map(2*current[1]/(current[0]+1E-10),(q)->max(-1,min(1,q)))
         .map((q)->q<0 ? [-q,0,1+q]
                       : [0,q,1-q])
        .each(v,
          addPlot([[index,baseProfile[index]],
                   [index+1,h[index]]],'box 0 fs RGB'&join(v,',')));
        addPlot(baseProfile,'stepRight f 0.5 black');
        addAnimationFrame;
        postDisplay;
      end);
    end);
    true;
  end});

save;
  c==true
  ? begin done:=true; log('Flushing ',pending.size,' more frames...'); backgroundPlot(); end
  : begin
      pending|=[[c,p]];
    end;
end;

sim5->begin
  local dt:=0.5;
  local c:=c0;
  local p:=p0;
  local CFL_LIM:=0.2;
  postPlotSystem(c,p);
  [0..5000].each(ts,begin
    local tRest:=dt;
    local subSteps:=0;
    while(tRest>0,begin
      subSteps+=1;
      local v0:=p/c;
      local fwd:=c.leading>1E-6<c.tail;
      local bwd:=fwd and v0.tail<v0.leading;
            fwd:=fwd and v0.tail>v0.leading;
      local vM:=(p.leading+p.tail)/(c.leading+c.tail);
      local dp :=(v0.leading-vM)*c.leading;
      dp:=[(v0.leading-vM)*c.leading,fwd,
           (vM-v0.tail   )*c.tail   ,bwd].transpose.map((x)->(x[1] ? x[0] : 0)+(x[3] ? x[2] : 0));
      p        +=(-dp|0)+(0|dp );

      local a:=((0|(c.leading-c.tail)|0)-baseProfileSlope)*(20/gridSize);
      v0:=p/c;
      (v0.isInfinite or v0.isNan).agg(or) ? v0:=map(v0,(v)->v.isNan or v.isInfinite ? 0 : v) : void;
      a-=((v0|0)+(0|v0)).{$x*abs($x)}*(0.001*gridSize);
      local dtSub:=tRest;
      local vLeft :=(v0+a.leading*dtSub)*dtSub; vLeft *=-1*ord(vLeft<0);
      local vRight:=(v0+a.tail   *dtSub)*dtSub; vRight*=   ord(vRight>0);
      while((vLeft+vRight).max>CFL_LIM,begin
        dtSub*=min(0.9,CFL_LIM/(vLeft+vRight).max);
        vLeft :=(v0+a.leading*dtSub)*dtSub; vLeft *=-1*ord(vLeft<0);
        vRight:=(v0+a.tail   *dtSub)*dtSub; vRight*=   ord(vRight>0);
      end);
      dtSub>=tRest   ? begin dtSub:=tRest; tRest:=0; end :
                       begin dtSub:=tRest/ceil(tRest/dtSub); tRest-=dtSub;  end;
      vLeft[0]:=0;
      vRight[IMAX]:=0;

      //1st order upwind transport
      p+=((a.tail+a.leading)*0.25)*c*dtSub;
      c+=(0|(c*vRight).leading)+(((c*vLeft).tail)|0)-c*(vLeft+vRight);
      p+=(0|(p*vRight).leading)+(((p*vLeft).tail)|0)-p*(vLeft+vRight);
      p+=((a.tail+a.leading)*0.25)*c*dtSub;


      ts<800  ? begin c[0]+=dtSub*0.1/gridSize; p[0]+=dtSub*0.1/gridSizeÂ²; end : void;
      c[IMAX]>1E-3 ? begin
        local outflow:=min(0.02*dtSub/gridSize,c[IMAX]);
        local relOutflow:=outflow/c[IMAX];
        c[IMAX]-=outflow;
        p[IMAX]*=1-relOutflow;
      end : void;
    end);
    postPlotSystem(c,p);
    print(ts,' (',subSteps,') ',ts/scriptTime,'fps (calc)');
    ts mod 1000=0 ? callMemoryCleaner : void;
  end);
  postPlotSystem(true,true);
end;

sim5;

