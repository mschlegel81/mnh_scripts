triFactorize(n:Int)->
  factorize(n)
  .subSets
  .each(s,begin
     local i:=s.agg(*) orElse 1;
     s.subSets.each(q,begin
       local k:=q.agg(*) orElse 1;
       [k,i div k,n div i].sort;
     end);
   end,|).unique;

f(n)->begin
  local nDigits:=n.digits.sort;
  triFactorize(n).filter((f)->f.digits.flatten.sort==nDigits);
end;

checkThreePartVampire(n)->begin
//  n mod 1000=0 ? note('Checking: ',n) : void;
  local d:=f(n);
  d==[]
  ? void
  : print(n,' = ',d.map((s)->s.join("*")).join(" = "));
end;

rangeGenerator(1).pEach(i,checkThreePartVampire(i));

//pMap(::checkThreePartVampire).agg(|);





