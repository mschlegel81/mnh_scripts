//USE complex;

//dfdx(i,c,x)->begin
//  local y :=x;
//  local f :=[0..i-1].each(i,y:=y.sqr+c);
//  ([local df:=x*2]|[1..i-1].each(j,df:=df*2*f[j-1])).map(::euklideanNorm);
//end;
//
//dfM(c,x)->
//[x*2,
// x*(c*4+x*x*4),
// x*(c*c*(8+c*8)+x*x*(c*(8+c*24)+x*x*(c*24+x*x*8))),
// x*(c*c*c*(16+c*(32+c*(48+c*(48+c*16))))+x*x*(c*c*(16+c*(64+c*(144+c*(240+c*112))))+x*x*(c*c*(48+c*(144+c*(480+c*336)))+x*x*(c*(16+c*(48+c*(480+c*560)))+x*x*(c*c*(240+c*560)+x*x*(c*(48+c*336)+x*x*(c*112+x*x*16))))))),
// x*(c*c*c*c*(32+c*(96+c*(224+c*(480+c*(832+c*(1280+c*(1632+c*(1600+c*(1216+c*(672+c*(224+c*32)))))))))))+x*x*(c*c*c*(32+c*(160+c*(480+c*(1440+c*(3136+c*(6144+c*(10080+c*(12160+c*(11136+c*(7392+c*(2912+c*480)))))))))))+x*x*(c*c*c*(96+c*(384+c*(1824+c*(4992+c*(12288+c*(26880+c*(40800+c*(45600+c*(36960+c*(17472+c*3360))))))))))+x*x*(c*c*(32+c*(128+c*(1248+c*(4480+c*(13184+c*(40320+c*(79520+c*(109920+c*(110880+c*(64064+c*14560))))))))))+x*x*(c*c*c*(480+c*(2560+c*(8160+c*(36960+c*(99680+c*(172800+c*(221760+c*(160160+c*43680))))))))+x*x*(c*c*(96+c*(960+c*(2976+c*(20832+c*(84000+c*(185472+c*(310464+c*(288288+c*96096))))))))+x*x*(c*c*(224+c*(672+c*(6720+c*(48160+c*(138432+c*(310464+c*(384384+c*160160)))))))+x*x*(c*(32+c*(96+c*(960+c*(18400+c*(72000+c*(221760+c*(384384+c*205920)))))))+x*x*(c*c*c*(4320+c*(25920+c*(110880+c*(288288+c*205920))))+x*x*(c*c*(480+c*(6400+c*(36960+c*(160160+c*160160))))+x*x*(c*c*(1056+c*(7392+c*(64064+c*96096)))+x*x*(c*(96+c*(672+c*(17472+c*43680)))+x*x*(c*c*(2912+c*14560)+x*x*(c*(224+c*3360)+x*x*(c*480+x*x*32))))))))))))))),
// x*(c*c*c*c*c*(64+c*(256+c*(768+c*(2112+c*(5376+c*(12736+c*(28032+c*(57856+c*(112192+c*(204096+c*(345792+c*(542080+c*(784896+c*(1047552+c*(1284032+c*(1437504+c*(1457280+c*(1323648+c*(1064448+c*(747136+c*(449792+c*(227136+c*(93184+c*(29568+c*(6720+c*(960+c*64))))))))))))))))))))))))))+x*x*(c*c*c*c*(64+c*(384+c*(1408+c*(4800+c*(14592+c*(41408+c*(107520+c*(257920+c*(576960+c*(1208640+c*(2350656+c*(4196992+c*(6865920+c*(10283520+c*(14068160+c*(17507520+c*(19660416+c*(19708800+c*(17428224+c*(13402240+c*(8807680+c*(4839744+c*(2154880+c*(740096+c*(181440+c*(27840+c*1984))))))))))))))))))))))))))+x*x*(c*c*c*c*(192+c*(960+c*(4800+c*(17664+c*(60672+c*(189120+c*(528960+c*(1359168+c*(3269376+c*(7319616+c*(14953344+c*(27759360+c*(46841088+c*(71753472+c*(99584064+c*(124318464+c*(138053760+c*(134741376+c*(113938176+c*(82021632+c*(49201152+c*(23849280+c*(8893248+c*(2358720+c*(389760+c*29760)))))))))))))))))))))))))+x*x*(c*c*c*(64+c*(320+c*(2880+c*(12800+c*(51712+c*(199488+c*(660160+c*(1946560+c*(5348352+c*(13812672+c*(32473728+c*(68793600+c*(131434240+c*(226306304+c*(351453888+c*(489562368+c*(604600960+c*(653896320+c*(610444032+c*(483180544+c*(317501184+c*(168109760+c*(68286400+c*(19656000+c*(3507840+c*287680)))))))))))))))))))))))))+x*x*(c*c*c*c*(960+c*(6080+c*(27200+c*(137280+c*(557440+c*(1900160+c*(5920320+c*(17620800+c*(47980800+c*(116793600+c*(254302720+c*(494475520+c*(862364160+c*(1345597440+c*(1855798720+c*(2233566720+c*(2311921920+c*(2020307520+c*(1459698240+c*(847246400+c*(376230400+c*(117936000+c*(22800960+c*2013760)))))))))))))))))))))))+x*x*(c*c*c*(192+c*(2112+c*(9024+c*(62400+c*(333696+c*(1341312+c*(4718400+c*(16071360+c*(50980608+c*(143727360+c*(359686656+c*(794674944+c*(1562416128+c*(2742036480+c*(4241951424+c*(5707126656+c*(6580447104+c*(6377181888+c*(5086745664+c*(3249005760+c*(1583312640+c*(542505600+c*(114004800+c*10874304)))))))))))))))))))))))+x*x*(c*c*c*(448+c*(1792+c*(17472+c*(143360+c*(703360+c*(2822400+c*(10841152+c*(40160512+c*(132222720+c*(384423424+c*(973262080+c*(2166877440+c*(4295434752+c*(7489144320+c*(11317166784+c*(14609474880+c*(15779332800+c*(13956598656+c*(9850160320+c*(5289764480+c*(1989187200+c*(456019200+c*47121984))))))))))))))))))))))+x*x*(c*c*(64+c*(256+c*(2496+c*(43520+c*(274048+c*(1301760+c*(5553088+c*(23864064+c*(92401920+c*(316146688+c*(928373504+c*(2353598208+c*(5293237248+c*(10454446080+c*(17833704768+c*(25915902144+c*(31368499008+c*(30914851968+c*(24216512320+c*(14395821440+c*(5967561600+c*(1498348800+c*168292800))))))))))))))))))))))+x*x*(c*c*c*c*(8640+c*(77760+c*(463680+c*(2223936+c*(10810368+c*(49363200+c*(201516480+c*(698467968+c*(2031734016+c*(5207956416+c*(11717709120+c*(22683545280+c*(37324793088+c*(50942174976+c*(56242682496+c*(49132923840+c*(32490057600+c*(14918904000+c*(4120459200+c*504878400)))))))))))))))))))+x*x*(c*c*c*(960+c*(15680+c*(121920+c*(721600+c*(3772160+c*(20156160+c*(99323840+c*(416613120+c*(1406520960+c*(4128970560+c*(10650136640+c*(23527183680+c*(44104712960+c*(68349487360+c*(85046881920+c*(83288004800+c*(61591129600+c*(31495464000+c*(9614404800+c*1290244800)))))))))))))))))))+x*x*(c*c*c*(2112+c*(21120+c*(193600+c*(1034880+c*(6268416+c*(37393664+c*(196523712+c*(784390464+c*(2650739520+c*(7895448704+c*(20023523520+c*(43034199296+c*(76320941312+c*(107767435776+c*(118982864000+c*(98965746880+c*(56691835200+c*(19228809600+c*2838538560))))))))))))))))))+x*x*(c*c*(192+c*(1920+c*(40896+c*(233856+c*(1478400+c*(10504704+c*(72448320+c*(352497600+c*(1379691456+c*(4786304640+c*(14029823808+c*(34781510400+c*(71220414720+c*(115036207104+c*(144077431680+c*(135640464960+c*(87614654400+c*(33213398400+c*5419028160))))))))))))))))))+x*x*(c*c*c*(5824+c*(46592+c*(262080+c*(2125760+c*(20343232+c*(127056384+c*(580953984+c*(2371170880+c*(8100700608+c*(23293810176+c*(55618140032+c*(103738008192+c*(148404081280+c*(159220705280+c*(116819539200+c*(49820097600+c*9031713600))))))))))))))))+x*x*(c*c*(448+c*(8064+c*(33600+c*(297920+c*(4140864+c*(36304128+c*(196764288+c*(956119360+c*(3850862400+c*(12899158272+c*(36301313664+c*(79087392384+c*(130232152960+c*(160418854400+c*(134791776000+c*(65149358400+c*13200196800))))))))))))))))+x*x*(c*c*(960+c*(2880+c*(28800+c*(552000+c*(8035200+c*(53066880+c*(311166720+c*(1503374400+c*(5880716160+c*(19721708160+c*(50903973120+c*(97349616000+c*(138785606400+c*(134791776000+c*(74456409600+c*16971681600)))))))))))))))+x*x*(c*(64+c*(192+c*(1920+c*(36800+c*(1319040+c*(11214720+c*(80540928+c*(479945664+c*(2193949824+c*(8853280128+c*(27562639104+c*(61871089280+c*(102974260480+c*(116819539200+c*(74456409600+c*19234572480)))))))))))))))+x*x*(c*c*c*c*(146880+c*(1811520+c*(16173120+c*(124407360+c*(665301120+c*(3247157760+c*(12477681216+c*(33315201920+c*(65332408960+c*(87614654400+c*(65149358400+c*19234572480)))))))))))+x*x*(c*c*c*(8640+c*(216000+c*(2410560+c*(25857216+c*(163050624+c*(957293568+c*(4677761088+c*(15117822720+c*(35274919680+c*(56691835200+c*(49820097600+c*16971681600)))))))))))+x*x*(c*c*c*(18240+c*(243200+c*(4213440+c*(32209408+c*(221720576+c*(1431446016+c*(5739173440+c*(16097681600+c*(31495464000+c*(33213398400+c*13200196800))))))))))+x*x*(c*c*(960+c*(12800+c*(517440+c*(5125120+c*(39128320+c*(349789440+c*(1805003200+c*(6151745600+c*(14918904000+c*(19228809600+c*9031713600))))))))))+x*x*(c*c*c*(44352+c*(650496+c*(5070912+c*(65921856+c*(464143680+c*(1944983040+c*(5967561600+c*(9614404800+c*5419028160))))))))+x*x*(c*c*(2112+c*(63360+c*(468160+c*(9033024+c*(95775680+c*(500980480+c*(1989187200+c*(4120459200+c*2838538560))))))))+x*x*(c*c*(4416+c*(30912+c*(803712+c*(15404480+c*(103143040+c*(542505600+c*(1498348800+c*1290244800)))))))+x*x*(c*(192+c*(1344+c*(34944+c*(1834560+c*(16598400+c*(117936000+c*(456019200+c*504878400)))))))+x*x*(c*c*c*(145600+c*(2038400+c*(19656000+c*(114004800+c*168292800))))+x*x*(c*c*(5824+c*(186368+c*(2358720+c*(22800960+c*47121984))))+x*x*(c*c*(12096+c*(181440+c*(3507840+c*10874304)))+x*x*(c*(448+c*(6720+c*(389760+c*2013760)))+x*x*(c*c*(27840+c*287680)+x*x*(c*(960+c*29760)+x*x*(c*1984+x*x*64)))))))))))))))))))))))))))))))]
//.map(::euklideanNorm);

mutable divergents:=[].toSet;


mbIt(re,im,depth)->begin
  local c:=[re,im];
  local x:=[0,0];
  [1..depth].each(i,x:=[x.sqr.agg(-),x.agg(*)*2]+c);
end;

USE fitting;

periodOf(iterates:List)->iterates.trailing.flatten.each(x,x.isNan OR x.isInfinite,OR) ? -1 : begin
  local conv:=
  [1..12].each(k,begin
    local deltas:=(iterates.tail(k)-iterates.leading(k))
                  .tail(iterates.size div 2)
                  .map(::euklideanNorm);
    (deltas=0).agg(OR)
    ? [-Inf,k]
    : begin
        local fp:=fitParameters(deltas.ln/k);
        [fp[1],k];
      end;
  end).filter({!$x[0].isNan}).sort;
  conv.size=0 ? 0 : gcd@(conv.map({$c[0]==conv[0,0] ? $c[1] : void}));
end;

convPlot(depth)->begin
  local points:=200;
  local h:=1/points;
  local RE:=([0..points-1]+0.5)/points*2-1.5;
  local IM:=([0..points-1]+0.5)/points*2-1;
  print('Depth=',depth,'; |divergents|=',divergents.size);
  plot();
  RE.cross(IM)
    .pMap({$x in divergents ? void : [mbIt($x[0],$x[1],depth).periodOf,$x]})
    .each(x,x[0]=-1 ? begin divergents|=[x[1]]; void; end : 0<x[0] ? x : void)
    .group(0)
    .each(g,[g[0],g[1].getInner(1)])
    .sort(0)
    .each(samples,addPlot(samples[1].each(p,p-h,p+h),'box f 0 TI0'));
end;

clearAnimation;
[32,64,128,256,512,1024,2048].each(i,convPlot(i),addAnimationFrame,display);

//convSpeedPlot(32);
//
//mbIt(-0.4222,-0.046,100).periodOf;




