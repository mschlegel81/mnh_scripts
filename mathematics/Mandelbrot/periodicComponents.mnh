mbIt(re,im,depth)->begin
  local c:=[re,im];
  local x:=[0,0];
  [1..depth].each(i,x:=[x.sqr.agg(-),x.agg(*)*2]+c);
end;

//mbIt(-0.079,0.6366,100).plot;
//mbIt(-0.469,0.51,100).addPlot;

Delta(L:List,k)->L.tail(k)-L.leading(k);



private average(L:NumericList)->L.agg(+)/L.size;

private slope(Yin:NumericList)->begin
  local mask:=(!Yin.isNan and Yin>-30);
  local Y:=Yin[mask];
  local X:=[0..Yin.size-1][mask];
  local mx:=X.average;
  local my:=Y.average;
  average((X-mx)*(Y-my))/average(sqr(X-mx));
end;

begin
//  local I:=mbIt(-0.079,0.6366,200);
  local I:=mbIt(-0.116,0.656,100);
//  local I:=mbIt(-0.469,0.51,100);
//  local I:=mbIt(-0.791,0.066,100);
//  local I:=mbIt(-0.22,0.12,100);
  local D:=[1..8].each(k,
                   I.Delta(k)
                    .tail(12-k)
                    .map(::euklideanNorm)
                    .ln);
  plot;
  D.map({addPlot($row,'.')});
  D.map(::slope);
end;


//mbIt(-0.116,0.656 ,100).plot;
//mbIt(-0.079,0.6366,100).addPlot;
//


isInInnerBulb(x:NumericList(2))->begin
  local z:=[1,0]-4*x;
  z:=[0.25*(z.toBuiltin.sqr.agg(+)).ln,0.5*arctan2(z[1],z[0])];
  z:=[1,0]-exp(z[0])*[cos(z[1]),sin(z[1])];
  z.euklideanNorm<=1;
end;

examineConvergence(c:NumericList(2))->c.isInInnerBulb ? 1 : begin
  print(c[0]);
  local x:=[0,0];
  local stepsTotal:=0;
  local D:=void;
  while(stepsTotal<1000,begin
    stepsTotal+=32;
    local iterates:=[1..32].each(step,x:=[x.sqr.agg(-),x.agg(*)*2]+c);
    x.isNan.agg(OR) or x.isInfinite.agg(OR) ? return -1 : void;
    D:=[1..12].each(k,[k,(iterates.tail(k)-iterates.leading(k)).tail(12-k).map(::euklideanNorm).ln.map({$x.isNan ? -100 : max(-100,$x)})/k])
              .map({[$x[0],$x[1].min,$x[1].max]})
              .sort(2);
    D.head[2]<D.tail.getInner(1).min
    ? return D.head[0]
    : void;
  end);
  gcd@map(D,{$x[1]<=D[0,2] ? $x[0] : void});
end;

STYLES:='box fs 0 TI 0 '&['',
    'RGB0.9,0.9,0.9',
    'RGB1,0.66,0.66',  //2
    'RGB0.65,1,0.66',  //3
    'RGB1,0.33,0.66',   //2*2
    'RGB0,0,1',                //5
    'RGB0.7,0.7,0',   //2*3
    '',
    '',
    '',
    '',
    '',
    ''];

convPlot()->begin
  local points:=500;
  local h:=1/points;
  local RE:=([0..points-1]+0.5)/points*2-1.5;
  local IM:=([0..points-1]+0.5)/points*2-1;
  plot();
  RE.cross(IM)
    .pMap({[examineConvergence($x),$x]})
    .filter({0<$x[0]})
    .group(0)
    .each(g,[g[0],g[1].getInner(1)])
    .sort(0)
    .each(samples,addPlot(samples[1].each(p,p-h,p+h),STYLES[samples[0]]));
end;

convPlot;

//factorize([2..12]);

// 2 -> 1/3,0,0
// 3 -> 0,1/2,0
// 5 ->

//examineConvergence(-0.22,0.12);


