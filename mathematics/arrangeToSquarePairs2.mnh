S:=[1..sqrt(2*100).ceil].sqr.toSet;

findPath(current:Int,visited:IntCollection,successorMap:Map,depth>0) -> successorMap[current].each(n,n in visited ? void : findPath(n,visited|n,successorMap,depth-1),orElse);
findPath(current:Int,visited:IntCollection,successorMap:Map,depth=0) -> visited;

findCyclicPath(current:Int,visited:IntCollection,successorMap:Map,depth>0) -> successorMap[current].each(n,n in visited ? void : findCyclicPath(n,visited|n,successorMap,depth-1),orElse);
findCyclicPath(current:Int,visited:IntCollection,successorMap:Map,depth=0) -> visited.head in successorMap[current] ? visited : void;

isCyclicPath(path:IntList)->path.size>1 AND path.head+path.trailing in S;

findSquareSort(kMax)->
begin
  local R:=[1..kMax];
  local squarePairs:=R.cross(R).filter((ij)->ij.agg(<>) AND ij.agg(+) in S);
  local validSuccessors:=squarePairs.getInner(1).group(squarePairs.getInner(0));
  validSuccessors.size<kMax
  ? void
  : R.each(k0,findPath(k0,[k0],validSuccessors,kMax-1),orElse);
//  : R.each(k0,findPath(k0,[],validSuccessors,kMax),orElse);
end;

//rangeGenerator(1,100).pMap(::findSquareSort).agg((l)->begin
//
//  local cyclic:=l.isCyclicPath;
//  print(l.size,': ',l,cyclic ? '*' : void);
//
//
//end);

allPaths(current:Int,visited,successorMap:Map,depth>0) -> successorMap[current].pEach(n,n in visited ? void : allPaths(n,visited|n,successorMap,depth-1),|);
allPaths(current:Int,visited,successorMap:Map,depth=0) -> [visited.canonicalForm];

canonicalForm(L:IntList)->
  L.head+L.trailing in S
  ? begin
      local i0:=L.argMin;
      [true,
       min(            L.tail(i0  )|L.head(i0  ),
           reverseList(L.tail(i0+1)|L.head(i0+1)))];
     end
  : [false,min(L,L.reverseList)];

allPaths_(visited,successorMap:Map,allowFlip=true,depth>0) -> begin
  local R:=successorMap[visited.trailing].pEach(n,n in visited ? void : allPaths_(visited|n,successorMap,true,depth-1),|);
  (R.size=0)
  ? successorMap[visited.head].pEach(n,n in visited ? void : allPaths_(reverseList(visited)|n,successorMap,false,depth-1),|)
  : R;
end;
allPaths_(visited,successorMap:Map,allowFlip=false,depth>0) -> successorMap[visited.trailing].pEach(n,n in visited ? void : allPaths_(visited|n,successorMap,true,depth-1),|);
allPaths_(visited,successorMap:Map,allowFlip,depth=0) -> [visited.canonicalForm];

findAllCanonicalPaths(kMax>=1)->
begin
  local R:=[1..kMax];
  local squarePairs:=R.cross(R).filter((ij)->ij.agg(<>) AND ij.agg(+) in S);
  local validSuccessors:=squarePairs.getInner(1).group(squarePairs.getInner(0));
  validSuccessors.size<R.size ? return [].toMap : void;
  local uniqueCanonicalForms:=R.pEach(k0,allPaths(k0,[k0],validSuccessors,kMax-1),|).unique;
  uniqueCanonicalForms.getInner(1).group(uniqueCanonicalForms.getInner(0));
end;


[1..50].each(i,
  begin
    local f:=findAllCanonicalPaths(i);
    printf('%3d: %4d %4d',i,
           size(f[false] orElse []),
           size(f[true] orElse []));
  end);


