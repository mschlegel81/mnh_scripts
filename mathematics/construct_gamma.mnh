//Γ(1/3) = 2.6789385347077476337
//Γ(1/4) ≈ 3.6256099082219083119
//Γ(1/5) ≈ 4.5908437119988030532
//Γ(1/6) ≈ 5.5663160017802352043
//Γ(1/7) ≈ 6.5480629402478244377
//Γ(1/8) ≈ 7.5339415987976119047



// 0 = -f(i)       + i * f(i-1)       + 0
// 0 = -df/di(i)   + i * df /di (i-1) + 1*f      (i-1)
// 0 = -d²f/di²(i) + i * d²f/di²(i-1) + 2*df /di (i-1)
// 0 = -d³f/di³(i) + i * d³f/di³(i-1) + 3*d²f/di²(i-1)

USE multivariate_polynomials, rationals;

genericPolynomial(degree>=0)->[0..degree].map((i)->f'x^{i}*p%{i}2.2d').join('+').parsePoly;

//mutable f:=genericPolynomial(10);


memoized
D(f:Polynomial,0  )->f;
D(f:Polynomial,i>0)->f.D(i-1).derivative('x');

satisfy(parentPoly:Polynomial, toBeZero:Polynomial)->begin
  solution:=toBeZero.findRoot.filter((s)->s.isList and s[0].isPolynomial and s[1].isPolynomial);
  if solution.size=0 then fail(toBeZero.horner);
  note("Looking for\troot of\t",toBeZero.horner,"\n\t",solution[0,0].toString,"=\t",solution[0,1].toString);
  parentPoly.let(solution[0,0].toString,solution[0,1]);
end;

memoized F(degree>=2)->
begin
  f:=genericPolynomial(degree);

  if degree>2 then for k in [degree-2 .. 1] do
    //f:=f.satisfy(k*f.D(k-1).let('x',0)+f.D(k).let('x',0)-f.D(k).let('x',1));
    f:=f.satisfy(k*f.D(k-1).let('x',1)+2*f.D(k).let('x',1)-f.D(k).let('x',2));
  f:=f.satisfy(     f.let('x',0)-1);
  f:=f.satisfy(     f.let('x',1)-1);
  f:=f.satisfy(f.let('x',3/2)-1.329340388179137);
  f;
end;

printf('%s',
for n in [2..20] do parallel begin
  f:=F(n).toRealCoeff;
  denominators:=f.map((factor,variables)->factor.isRational ? factor[1] : void);
  if denominators.size>0 then begin
    commonDivider:=denominators.max;
    f"f%{n}2.2d(x)->({horner(f*commonDivider).replace(' ','')})/{commonDivider};";
  end else f"f%{n}2.2d(x)->{f.horner};";
end);

halt;


//curry G(f,x)->if x>2 then x*G(f,x-1) else if x<1 then G(f,x+1)/(x+1) else f(x);
//
F_list:=[2..50].each(k,format('::f%2.2d',k).interpret);
//
//F_list.each(f,[index+1,f(-0.5)   -sqrt(pi/4)]).abs.plot;
//F_list.each(f,[index+1,f(1.5)/1.5-sqrt(pi/4)]).abs.addPlot;

["x0"=>-1,
 "x1"=>1,
 "y0"=>-1,
 "y1"=>1,
 "fontsize"=>10,
 "preserveAspect"=>false,
 "autoscaleX"=>true,
 "autoscaleY"=>true,
 "logscaleX"=>false,
 "logscaleY"=>false,
 "autoscaleFactor"=>1,
 "axisStyleX"=>7,
 "axisStyleY"=>7].toMap.setOptions;
F_list.each(f,plot(f,0,1,100,'black 0.5'),addAnimationFrame);
//
//


//
//
////[::f01,::f02,::f03,::f04,::f05,::f06,::f07,::f08,::f09,::f10,::f11,::f12,::f13,::f14,::f15,::f16,::f17,::f18,::f19,::f20].each(f,f(0.0));
//
