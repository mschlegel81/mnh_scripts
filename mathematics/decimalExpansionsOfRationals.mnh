decimalForm(rat:IntList(2))->begin
  enum:=rat[1];
  r:=divMod(rat[0],rat[1]);
  integerPart:=r[0]; r:=r[1]*10;
  decimals:=[];
  earlierRemainders:=[];
  while r not in earlierRemainders do begin
    earlierRemainders|=r;
    q:=divMod(r,enum);
    r:=q[1]*10;
    decimals|=q[0];
  end;
  h:=indexOf(earlierRemainders=r)[0];
  decimals:=h.isVoid
          ? [decimals,[]]
          : [decimals.head(h),decimals.tail(h)];
  decimals[1]==[0] ? decimals[1]:=[] : void;

  ['rational'       =>rat,
   'integerPart'    =>integerPart,
   'nonperiodicPart'=>decimals[0],
   'periodicPart'   =>decimals[1],
   'stringForm'     =>integerPart&(decimals.flatten.size>0
                                   ? '.' & decimals[0].join &
                                     (decimals[1].size>0 ? '('&decimals[1].join&')' : void)
                                   : void)].toMap;
end;

//rangeGenerator(2).filter((n)->n mod 2 != 0 != n mod 5)
//                 .pMap((i)->decimalForm([1,i]))
//                 .map((m)->[m['rational',1],
//                            m['periodicPart'].size,
//                            m['rational',1]-m['periodicPart'].size])
//                 .head(1000)
//                 .{group($L.getInner(0),$L.getInner(2))}
//                 .sort;

pMap(10^[1..30]-1, (n)->f'{n}={n.factorize.join("*")}');
