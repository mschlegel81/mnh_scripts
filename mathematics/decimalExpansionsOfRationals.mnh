decimalForm(rat:IntList(2))->begin
  local enum:=rat[1];
  local r:=divMod(rat[0],rat[1]);
  local integerPart:=r[0]; r:=r[1]*10;
  local decimals:=[];
  local earlierRemainders:=[];
  while(!(r in earlierRemainders),begin
    earlierRemainders|=r;
    local q:=divMod(r,enum);
    r:=q[1]*10;
    decimals|=q[0];
  end);
  local h:=indexOf(earlierRemainders=r)[0];
  decimals:=h.isVoid
          ? [decimals,[]]
          : [decimals.head(h),decimals.tail(h)];
  decimals[1]==[0] ? decimals[1]:=[] : void;

  ['integerPart'    =>integerPart,
   'nonperiodicPart'=>decimals[0],
   'periodicPart'   =>decimals[1],
   'stringForm'     =>integerPart&(decimals.flatten.size>0
                                   ? '.' & decimals[0].join &
                                     (decimals[1].size>0 ? '('&decimals[1].join&')' : void)
                                   : void)].toMap;
end;

setOptions(["preserveAspect"=>false].toMap);
X:=[2..1000].pMap({$n => decimalForm([1,$n])})
            .map({[$x[0],$x[1,'nonperiodicPart'].size,$x[1,'periodicPart'].size]});
plot   (X.getInner(0),X.getInner(1),'.');
addPlot(X.getInner(0),X.getInner(2),'.');


//rangeGenerator(2).futureMap({begin
//                         local d:=decimalForm([1,$n]);
//                         d['periodicPart'].size+1=$n
//                         ? print($n) orElse d['periodicPart'].composeDigits
//                         : void;
//                       end}).head(10);

