datastore countHistory:=void;
CHUNK_SIZE:=1000;       //...factorize 1000 integers at a time
META_CHUNK_SIZE:=1000;  //...output every 1000 chunks (if nothing interesting happens in between)

pad(A:List,B:List,defaultValue)->begin
  local A_:=A; while(A_.size<B.size,A_|=defaultValue);
  local B_:=B; while(B_.size<A.size,B_|=defaultValue);
  [A_,B_];
end;

listPlus   (A:IntList    ,B:IntList    )->A.size==B.size ? A+B     : OPERATOR_PLUS@pad(A,B,0);
listsDiffer(A:BooleanList,B:BooleanList)->(A.size==B.size ? A xor B : OPERATOR_XOR@pad(A,B,false)).agg(or);

countChunk(N:IntList)->begin
  local cnt:=N.factorize.map(::size).elementFrequency.toList;
  cnt.getInner(1).groupToList(cnt.getInner(0),0,::+);
end;

steps(before:IntList,increments:List)->begin
  local output:=[];
  local tally:=before;
  increments.each(i,begin
    local nextSum:=listPlus(tally,i);
    listsDiffer(tally.tail>tally.leading,nextSum.tail>nextSum.leading)
    ? begin
        local T:=tally;
        [tally.agg(+)+2..tally.agg(+)+2+i.agg(+)].factorize.map(::size).each(k,begin
          T[k]+=1;
          (T.tail=T.leading).agg(or) ? output|=[T] : void;
        end);
      end
    : void;
    tally:=nextSum;
    void;
  end);
  output|[tally];
end;

printAligned(x)->begin
  local columnWidths:=[];
save;
  x.isString ? begin
    local parts:=x.split("\t");
    local pl:=parts.map(::length);
    columnWidths:=[columnWidths,pl].transpose(0).map(::max);
    [parts,columnWidths].transpose.map((q)->repeat(' ',q[1]-q[0].length)&q[0]).join(" ").print;
  end : columnWidths:=[];
end;

main->begin
  countHistory.isVoid
  ? countHistory:=steps([0],[countChunk([2..CHUNK_SIZE-1])])
  : void;
  print('Previously on factor counter:');
  countHistory.map((k)->format("n=\v%s\t:\t%s",k.agg(+)+1,k.tail.join("\t"))).agg(::printAligned);
  local nextSave:=scriptTime+60;
  print('----------------------------------------------------------------');

  local tally:=countHistory.trailing;
  local startAt:=(tally.agg(+)+2)/CHUNK_SIZE;
  assert(startAt.isInt);

  rangeGenerator(startAt)
  .pMap((k)->countChunk([0..CHUNK_SIZE-1]+(k*CHUNK_SIZE)))
  .chunkMap(META_CHUNK_SIZE)
  .agg((metaChunk)->
  begin
    local additionalSteps:=steps(tally,metaChunk);
    additionalSteps.map((k)->format("n=\v%s\t:\t%s",k.agg(+)+1,k.tail.join("\t"))).agg(::printAligned);
    countHistory|=additionalSteps;
    tally:=countHistory.trailing;
    scriptTime>nextSave
    ? begin
        print(formatTime('hh:mm:ss',systime),' Updating data stores...');
        writeDataStores;
        nextSave:=scriptTime+60;
//        callMemoryCleaner;
        print(formatTime('hh:mm:ss',systime),' Data stores updated...');
      end
    : void;
  end);
end;

begin
  local totals:=countHistory.map((h)->h.agg(+));

  setOptions(["x0"=>1E-100,"x1"=>1,"y0"=>1E-100,"y1"=>1,"fontsize"=>10,"preserveAspect"=>false,"autoscaleX"=>true,"autoscaleY"=>true,"logscaleX"=>true,"logscaleY"=>true,"autoscaleFactor"=>1,"axisStyleX"=>7,"axisStyleY"=>7].toMap);
  local rows:=countHistory.transpose(0);

  plot   (totals,rows[1]/totals);
  addPlot(totals,rows[2]/totals);
  addPlot(totals,rows[3]/totals);
  addPlot(totals,rows[4]/totals);
  addPlot(totals,rows[5]/totals);
  addAnimationFrame;


  resetOptions;
  local densities:=[countHistory.leading,countHistory.tail].transpose.each(P,listPlus(P[1],-P[0])/(P[1].agg(+)-P[0].agg(+))).transpose(0);
  local midPoints:=(totals.tail+totals.leading)*0.5;
  plot   (midPoints.tail(20),densities[1].tail(20));
  addPlot(midPoints.tail(20),densities[2].tail(20));
  addPlot(midPoints.tail(20),densities[3].tail(20));
  addPlot(midPoints.tail(20),densities[4].tail(20));
  addPlot(midPoints.tail(20),densities[5].tail(20));
  setOptions(["x0"=>0,"x1"=>1,"y0"=>0,"y1"=>0.25,"fontsize"=>10,"preserveAspect"=>false,"autoscaleX"=>true,"autoscaleY"=>false,"logscaleX"=>false,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>7,"axisStyleY"=>7].toMap);
  addAnimationFrame;

  setOptions(["x0"=>1E-100,"x1"=>1,"y0"=>-1,"y1"=>1,"fontsize"=>10,"preserveAspect"=>false,"autoscaleX"=>true,"autoscaleY"=>true,"logscaleX"=>true,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>7,"axisStyleY"=>7].toMap);
  plot(totals,countHistory.map((H)->H.each(i,i*index,+)/H.agg(+)));
  addAnimationFrame;
end;


