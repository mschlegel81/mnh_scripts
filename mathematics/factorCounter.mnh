CHUNK_SIZE:=100000;

datastore interestings:=[[2,1]];
datastore factorizationsPerSecond:=1000;
mutable killRequested:=false;
MY_IPC_ID:='B5BA32177D2BCDDC';
KILL_MESSAGE:='KILL';

logIfRelevant(state:IntList)->
  state.unique.size==state.size
  ? void
  : begin
      [2..state.size-1].each(i,[1..i-1].each(j,
        state[i]==state[j]
        ? format("P[%s]\t=\tP[%s]\t=\t%s\t@\v%s",j,i,state[i],state[0])
        : void,|),|).join("\n").log;
    end;

LOW:=[1..10].cross([1..10]).filter((i,j)->i<j);

minDelta(state:IntList)->state.getAll(LOW).map((n)->n.size==2 ? n.agg(-).abs : void).min;

scanInRange(n0,n1)->
  (n1<n0+CHUNK_SIZE
   ? factorize([n0..n1]).map(::size).elementFrequency
   : begin
       k:=ceil((n1-n0)/CHUNK_SIZE);
       k:=ceil(n0+(n1-n0+1)*[0..k]/k);
       zip(k.leading,k.tail-1)
         .pMap((i0,i1)->factorize([i0..i1]).map(::size).elementFrequency)
         .agg((x,y)->mergeMaps(x,y,::+));
     end)
   .toList
   .{groupToList($L.getInner(1),$L.getInner(0),0,::+)};

main('kill')->sendIpcRequest(MY_IPC_ID,KILL_MESSAGE);

main->begin
  startIpcServer(MY_IPC_ID,
    (ipcMessage)->ipcMessage==KILL_MESSAGE
                  ? begin log('Received kill signal'); killRequested:=true; end
                  : begin warn(ipcMessage); false; end);

  counts:=interestings.trailing;
  interestings.map(::logIfRelevant);
  print('--------------------------------------- - - -  -  -  - ');
  lastSave:=scriptTime;
  lastCount:=counts[0];
  while not killRequested do begin
    md:=minDelta(counts);
    md==0 ? logIfRelevant(counts) : void;
    stepsLeftInTime:=ceil((lastSave+90 - scriptTime)*factorizationsPerSecond).max(1);
    stepSize:=max(1,md orElse 1).min(stepsLeftInTime);
    log(counts,md==0 ? ' ***********': format(' min delta=%s',md orElse '?')&(md==stepSize ? void : f' step size={stepSize}'));
    increment:=scanInRange(counts[0]+1,n:=counts[0]+stepSize);
    while counts   .size<increment.size do counts   |=0;
    while increment.size<counts   .size do increment|=0;
    counts+=increment;
    counts[0]:=n;
    interestings|=[counts];
    scriptTime>lastSave+60 or killRequested
    ? begin
        factorizationsPerSecond:=(lastCount-lastCount:=counts[0])/(lastSave-lastSave:=scriptTime);
        writeDataStores;
        log(f'Data stores updated %{factorizationsPerSecond}0.0f/s');
      end
    : void;
  end;
end;


begin
  ["x0"=>10,
   "x1"=>interestings.trailing[0],
   "y0"=>0.005,
   "y1"=>0.5,
   "fontsize"=>10,
   "preserveAspect"=>false,
   "autoscaleX"=>false,
   "autoscaleY"=>false,
   "logscaleX"=>true,
   "logscaleY"=>true,
   "axisStyleX"=>7,
   "axisStyleY"=>7].toMap.setOptions;


  D:=interestings.transpose(0).head(11);
  [1..10].each(k,D[k]/=D[0]);

  COLORS:=[1=>'black',
                 2=>'red',
                 3=>'blue',
                 4=>'green',
                 5=>'RGB1,0,1',
                 6=>'RGB1,0.5,0',
                 7=>'RGB0.5,0.5,0.5',
                 8=>'RGB0,1,0',
                 9=>'RGB0.2,0.2,0.2',
                 10=>'RGB0,0.5,0'].toMap;



  plot;
  COLORS.pMap((k,style)->addPlot(D[0],D[k],'0.5 '&style));

  cross([10..1],[10..1])
    .filter((i,j)->i>j)
    .pMap((i,j)->[i,j,indexOf(D[i]=D[j]>0)])
    .pFilter((i,j,indexes)->indexes.size>0)
    .pMap((i,j,indexes)->begin
       P:=transpose([D[0,indexes],D[i,indexes]]);
       addPlot(P,COLORS[j]&' . 1');
       addPlot(P,COLORS[i]&' . 0.5');
       [cross(interestings[indexes].getInner(0),[i],[j]),interestings[indexes].getInner(i)].transpose.map(::flatten);
     end)
    .agg(|)
    .sort
    .map((x,i,j,y)->f"P[{i}]\t=\tP[{j}]\t=\t{y}\t@\t{x}")
    .join("\n")
    .print;            //Log @factorCounter.mnh:16,33 P[2] = P[5] = 535514860 @3468361808
end;
