pi_1000:='3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185';

DECIMAL_PLACES:=799;
//DECIMAL_PLACES:=300;
DP10:=10^DECIMAL_PLACES;
@SuppressUnusedParameterWarning
type FixedPointDecimal(L:IntList(1))->true;

toString(x:FixedPointDecimal)->begin
  s:=x[0].abs.toString;
  negative:=x[0]<0;
  s:=repeatString('0',DECIMAL_PLACES+1-s.byteLength)&s;
  i:=s.byteLength-DECIMAL_PLACES;
  format('%s%s.%s',negative ? '-' : '' ,s.copy(0,i),s.copy(i));
end;

convertToFixedPointDecimal(i:Int)->[i*DP10].toFixedPointDecimal;
convertToFixedPointDecimal(x:Real)->[round(x*DP10)].toFixedPointDecimal;

@SuppressUnusedWarning
inverseOf(i:Int)->[DP10 div i].toFixedPointDecimal;

OPERATOR_PLUS   (x:FixedPointDecimal,y:FixedPointDecimal)->[x[0]+y[0]].toFixedPointDecimal;
OPERATOR_PLUS   (x:Int              ,y:FixedPointDecimal)->[x*DP10+y[0]].toFixedPointDecimal;
OPERATOR_MINUS  (x:FixedPointDecimal,y:FixedPointDecimal)->[x[0]-y[0]].toFixedPointDecimal;
OPERATOR_MULT   (x:Int              ,y:FixedPointDecimal)->[x   *y[0]         ].toFixedPointDecimal;
OPERATOR_MULT   (x:FixedPointDecimal,y:Int              )->[x[0]*y            ].toFixedPointDecimal;
OPERATOR_MULT   (x:FixedPointDecimal,y:FixedPointDecimal)->[x[0]*y[0] div DP10].toFixedPointDecimal;
OPERATOR_DIVREAL(x:FixedPointDecimal,y:FixedPointDecimal)->[x[0]*DP10 div y[0]].toFixedPointDecimal;
OPERATOR_DIVREAL(x:Int,y:FixedPointDecimal)->[x*DP10*DP10 div y[0]].toFixedPointDecimal;
sqrt(x:FixedPointDecimal)->[isqrt(x[0]*DP10)[0]].toFixedPointDecimal;

memoized factorial(i<=1):=1; factorial(i>1)->i*factorial(i-1);

hideCorrectDigits(s:String)->begin
  A:=pi_1000.copy(0,s.length).chars;
  B:=s.chars;
  [B,A!=B or B='.'].transpose.each(p,p[1] ? p[0] : '_', &);
end;
hideCorrectDigits(d:FixedPointDecimal)->hideCorrectDigits(d.toString);

FOUR:=convertToFixedPointDecimal(4);

piCorrectionTerm(i>0)->begin
  1/(i+(1/(4*i+i/FOUR)));
end;


begin
  s:=[0].toFixedPointDecimal;
  prevString:='';
  currString:='x';
  k:=0;
  while prevString!=currString do begin
    prevString:=currString;
    currString:=toString(s+=[DP10 div factorial(k)].toFixedPointDecimal);
    k+=1;
    print('[',k,'] ',currString);
  end;
end;
