
fold(x:List    ,y)->fold(  [[0..x.size-1],x].transpose.toMap,y);
fold(x:Map,y:List)->fold(x,[[0..y.size-1],y].transpose.toMap);
fold(x:Map,y:Map)->
  x.pEach(px,y.pEach(py,[px[0]+py[0],px[1]*py[1]]),|)
   .group(0)
   .pMap({[$x[0,0],$x.getInner(1).agg(+)]})
   .toMap;

mult(x:Map,y:Numeric)->x.pMap({[$x[0],$x[1]*y]}).toMap;
add(x:Map,y:Map)->
  x.getInner(0).union(y.getInner(0))
  .each(k,[k,(x[k] orElse 0)+(y[k] orElse 0)]).toMap;

gaussKernel(sigma>0.0)->begin
  local x:=[round(-3*sigma)..round(3*sigma)];
  local y:=exp(-sqr(x/sigma));
  y/=y.agg(+);
  [x,y].transpose.toMap;
end;

peakKernel:=[[0,1]].toMap;

gaussKernel(10).sort.plot;
gaussKernel(10).fold(gaussKernel(5).mult(-1).add(peakKernel)).sort.addPlot;
