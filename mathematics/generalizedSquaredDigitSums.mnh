private step(x:Int,base>=2)->x.digits(base).sqr.agg(+);
private step(x:IntCollection,base>=2)->x.digits(base).sqr.pMap({$L.agg(+)}).unique;

private findLoop(x0:Int,base>=2)->begin
  x:=x0;
  result:=[x];
  while !((x:=x.step(base)) in result) do result|=x;
  result;
end;

findFixedPoints(base:Int)->begin
  x0:=[1..max(base^2,2*(base-1)^2)];
  x1:=x0.step(base);
  while !(x0==x1) do begin
    x0:=x1; x1:=x0.step(base);
  end;
  x0.each(k,x1:=x1.map({$x.step(base)}))
    .transpose
    .map(::unique)
    .unique
    .map({$x.size==1 ? $x[0] : $x[0].findLoop(base)});
end;

main->[2..16].each(i,print(i,': ',findFixedPoints(i)));

infoForBase(base>=2)->begin
  fp:=findFixedPoints(base);
  finals:=fp.flatten.toSet;
  halfSamples:=10000;
  part:=
  ([1..halfSamples]|intRandom(2^64,halfSamples)).pEach(sample,begin
    x:=sample;
    while !(x in finals) do x:=step(x,base);
    fp.each(y,x==y OR x in y ? index : void,head);
  end).elementFrequency.map({[$x[0],$x[1]*100/(2*halfSamples)]}).toMap;
  print('For base ',base,' there are ',fp.size,' fixed points');
  "%s\tcontaining\t%6.2f\v%% of all samples".printf@(
  fp.each(fp,[fp.isInt ? fp : 'Cycle '&fp.join('-'),part[index]]).transpose);
end;

infoForBase(7);
