@SuppressUnusedParameterWarning
ducktype Vector(x:NumericList(2))->true;
ducktype VectorList(L:List)->L.each(v,v.isVector,AND);
ducktype AdjacencyList(L:Set)->L.each(v,v.isIntList(3) AND (v>=0).agg(and),AND);
ducktype Triangle(x:List(3))->x.each(e,e.isVector,AND);
normed(v:Vector)->v/v.euklideanNorm;

radii(t:Triangle)->radii@t;
radii(p0:Vector,p1:Vector,p2:Vector)->begin
  local d:=[euklideanNorm(p0-p1),
            euklideanNorm(p1-p2),
            euklideanNorm(p2-p0)];
  [[ 0.5, 0.5,-0.5],
   [-0.5, 0.5, 0.5],
   [ 0.5,-0.5, 0.5]].each(x,d[index]*x,+);
end;

radiusMap(points:VectorList, adjacency:AdjacencyList)->begin
  local radius:=[].toMap;
  adjacency.each(a,begin
    local C:=points[a];
    local R:=C.radii;
    radius[a[0]]|=R[0];
    radius[a[1]]|=R[1];
    radius[a[2]]|=R[2];
    void;
  end);
  radius.pMap({[$e[0],$e[1].agg(+)/$e[1].size]}).toMap;
end;

plotTriangles(points:VectorList, adjacency:AdjacencyList, color:String, skip:Int)->begin
  skip=0 ? plot([]) : void;
  local radius:=radiusMap(points,adjacency);
  points.each(p,index<skip ? void : p-radius[index],index<skip ? void : p+radius[index]).addPlot('ellipse f '&color);
end;

circleIntersection(c0:NumericList(2),r0,
                   c1:NumericList(2),r1)->begin
  local d:=euklideanNorm(c1-c0);
  d>r0+r1 ? return void : void;
  local a:=(r0^2-r1^2+d^2)/(2*d);
  local h:=sqrt(r0^2-a^2);
  local X:=c0+a*(c1-c0)/d;
  local Y:=[c1[1]-c0[1],c0[0]-c1[0]]*h/d;
  [X+Y,X-Y];
end;

singleCircleIntersection(c0:NumericList(2),r0,
                         c1:NumericList(2),r1)->begin
  local i:=circleIntersection(c0,r0,c1,r1);
  i.isVoid ? [Nan,Nan] : i.head;
end;

USE root;
findInnerCircle(t:Triangle)->begin
  local T:=t;
  begin
    local a:=T[1]-T[0];
    local b:=T[2]-T[0];
    a[0]*b[1]-a[1]*b[0]>0
    ? T:=T.reverseList
    : void;
  end;
  local R:=T.radii;
  local r:=
  regulaFalsi({
  euklideanNorm
  (singleCircleIntersection(T[0],R[0]+$r,T[1],R[1]+$r)-T[2])-$r-R[2]},R.min*1E-3,R.min,1E-16,1E-16);
  print(r);
  singleCircleIntersection(T[0],R[0]+r,T[1],R[1]+r);
end;

nextCircleGeneration(pointsNtrips:List(2))->nextCircleGeneration(pointsNtrips[0],pointsNtrips[1]);
nextCircleGeneration(points,triplets)->begin
  local newPoints:=points;
  local newTriplets:=[].toSet;
  triplets.pEach(t,[findInnerCircle(points[t]),t])
          .each(r,begin
             newTriplets|=[[r[1,0],r[1,1],newPoints.size]];
             newTriplets|=[[r[1,1],r[1,2],newPoints.size]];
             newTriplets|=[[r[1,0],r[1,2],newPoints.size]];
             newPoints|=[r[0]];
           end);
  [newPoints,newTriplets];
end;

@SuppressUnusedWarning
DEFAULT_TRIANGLE:=([0..2]/3*2*pi).each(i,100*[sin(i),cos(i)]);

packCircles(q:Numeric)->begin
  local pNt:=[([0..2]/3*2*pi).each(i,(index=0 ? q : 1)*100*[sin(i),cos(i)]),
              [[0,1,2]].toSet];

//local points:=[[-1,-1],[1,1],[1,-1]]*40;
  ['autoscaleFactor'=>1.0,
   'autoscaleX'=>false,
   'autoscaleY'=>false,
   'axisStyleX'=>0,
   'axisStyleY'=>0,
   'fontsize'=>10.0,
   'logscaleX'=>false,
   'logscaleY'=>false,
   'preserveAspect'=>true,
   //'x0'=>-2,'x1'=> 38,'y0'=>-33,'y1'=> -7
   'x0'=>-36,'x1'=> 36,'y0'=>-40,'y1'=> 20
   ].toMap.setOptions;
                                 plotTriangles(pNt[0],pNt[1],'black' ,0  ); local old:=size(pNt[0]);
  pNt:=pNt.nextCircleGeneration; plotTriangles(pNt[0],pNt[1],'red'   ,old);       old:=size(pNt[0]);
  pNt:=pNt.nextCircleGeneration; plotTriangles(pNt[0],pNt[1],'orange',old);       old:=size(pNt[0]);
  pNt:=pNt.nextCircleGeneration; plotTriangles(pNt[0],pNt[1],'yellow',old);       old:=size(pNt[0]);
  pNt:=pNt.nextCircleGeneration; plotTriangles(pNt[0],pNt[1],'green' ,old);       old:=size(pNt[0]);
  pNt:=pNt.nextCircleGeneration; plotTriangles(pNt[0],pNt[1],'cyan'  ,old);       old:=size(pNt[0]);
  pNt:=pNt.nextCircleGeneration; plotTriangles(pNt[0],pNt[1],'blue'  ,old);       old:=size(pNt[0]);
  pNt:=pNt.nextCircleGeneration; plotTriangles(pNt[0],pNt[1],'purple',old);
end;

main->begin
  clearAnimation;
  [1..200].each(i,packCircles(i/100),addAnimationFrame);

end;

a(n)->(5+3^n)/2;

sizeStatistics(initialTriangle:Triangle)->begin
  local pNt:=[initialTriangle,[[0,1,2]].toSet];

  pNt:=pNt.nextCircleGeneration; print(pNt[0].size);
  pNt:=pNt.nextCircleGeneration; print(pNt[0].size);
  pNt:=pNt.nextCircleGeneration; print(pNt[0].size);
  pNt:=pNt.nextCircleGeneration; print(pNt[0].size);
  pNt:=pNt.nextCircleGeneration; print(pNt[0].size);
  pNt:=pNt.nextCircleGeneration; print(pNt[0].size);
  radiusMap(pNt[0],pNt[1]);
//  local addCircles:={triplets.each(t,begin
//    local p:=findInnerCircle(points[t]);
//    triplets>>t;
//    triplets|=[[t[0],t[1],points.size]];
//    triplets|=[[t[1],t[2],points.size]];
//    triplets|=[[t[0],t[2],points.size]];
//    points|=[p];
//  end)};        plotTriangles(points,triplets,'black' ,0  ); local old:=size(points);
//  addCircles(); plotTriangles(points,triplets,'red'   ,old); old:=size(points);
//  addCircles(); plotTriangles(points,triplets,'orange',old); old:=size(points);
//  addCircles(); plotTriangles(points,triplets,'yellow',old); old:=size(points);
//  addCircles(); plotTriangles(points,triplets,'green' ,old); old:=size(points);
//  addCircles(); plotTriangles(points,triplets,'cyan'  ,old); old:=size(points);
//  addCircles(); plotTriangles(points,triplets,'blue'  ,old); old:=size(points);
//  addCircles(); plotTriangles(points,triplets,'purple',old);


end;



