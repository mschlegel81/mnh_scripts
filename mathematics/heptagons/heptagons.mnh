USE curvePartitioning,curveTiming,fourierCurves,visualization;
DEG_120:=2/3*7000;

//Constants for plotRotating
AXIS_X:=0; AXIS_Y:=1; AXIS_Z:=3;
//AXIS_X:=3; AXIS_Y:=0; AXIS_Z:=2;

DOT_STYLES:=['. 0.5 RGB0.5,0,1,0.5',
             '. 0.5 RGB0,0,0,0.5',
             '. 0.5 RGB1,0,0,0.5',
             '. 0.5 RGB0,0.7,0,0.5',
             '. 0.5 RGB0,0,1,0.5'];
CURVE_STYLES:=['RGB0.5,0,1',
               'RGB0,0,0',
               'RGB1,0,0',
               'RGB0,0.7,0',
               'RGB0,0,1'];

//*Plots a partitioned curve
plotRotating(L1:List,L2:List)->begin
  local maxNorm:=max(L1.map((part)->part.map(::euklideanNorm).max).max,
                     L2.map((part)->part.map(::euklideanNorm).max).max);
  setOptions(["axisStyleX"=>0,"axisStyleY"=>0,
              "autoscaleX"=>false,"autoscaleY"=>false,
              "x0"=>-maxNorm,"x1"=>maxNorm,
              "y0"=>-maxNorm,"y1"=>maxNorm].toMap);
  clearAnimation;
  rangeGenerator(0,99).*(2*pi/100)
  .pMap((tau)->begin
    L1.each(part,begin
      local X:=      part.getInner(AXIS_X);
      local Y:=      part.getInner(AXIS_Y)*cos(tau)+part.getInner(AXIS_Z)*sin(tau);
      local Z:=3/(3-(part.getInner(AXIS_Z)*cos(tau)-part.getInner(AXIS_Y)*sin(tau))/maxNorm);
      [[Y*Z,X*Z].transpose,DOT_STYLES[index mod DOT_STYLES.size]];
    end).|(
    L2.each(part,begin
      local X:=      part.getInner(AXIS_X);
      local Y:=      part.getInner(AXIS_Y)*cos(tau)+part.getInner(AXIS_Z)*sin(tau);
      local Z:=3/(3-(part.getInner(AXIS_Z)*cos(tau)-part.getInner(AXIS_Y)*sin(tau))/maxNorm);
      [[Y*Z,X*Z].transpose,CURVE_STYLES[index mod CURVE_STYLES.size]];
    end));
   end)
  .each(pst,begin
     plot();
     pst.map((row)->addPlot@row);
     addAnimationFrame;
   end);
  display;
end;

datastore curveCoefficients:=[].toMap;

writeDatastoresLazily->begin
  local earliestWrite:=scriptTime;
  local lastUpdate:={0};
save;
  scriptTime>=earliestWrite AND !isVoid(lastUpdate())
  ? begin
      earliestWrite:=scriptTime+max(300,lastUpdate());
      lastUpdate:=async({begin
        local startOfUpdate:=scriptTime;
        writeAllDataStores;
        note('Data stores updated at ',systime.formatTime,' in ',round(scriptTime-startOfUpdate,1),' seconds');
        scriptTime-startOfUpdate;
      end});
    end
  : void;
end;

getCurveCoefficients(i:Int)->curveCoefficients[i] orElse begin
  assertUniqueInstance;
  local samples:=getPartitionedSamples(i);
  local coeff:=samples[1].each(sample,print("\nCalculating curve coefficients ",i,'/',index),
                                      resample(i,calcCurveCoeff(sample,i,index,samples[0]).optimizeApproximation(i),false));
  curveCoefficients[i]:=coeff.sort((x,y)->x['phaseShift']<=y['phaseShift']);
  writeDatastoresLazily;
  coeff;
end;

//*Calculates all partitioned samples
main->begin
//  local sortOrScramble:={$L.size==0 ? $L : $L.toList[$L.size.random.sortPerm]};
  local sortOrScramble:={$L.sort.reverseList};
//  local sortOrScramble:={$L.sort((x,y)->abs(x-DEG_120)<=abs(y-DEG_120))};
//  local sortOrScramble:={$L.sort((x,y)->abs(x-DEG_120)>=abs(y-DEG_120))};

  print("#=============================#\n"&
        "# Updating curve coefficients #\n"&
        "#=============================#\n");
  partitionedCurves.getInner(0).minus(curveCoefficients.getInner(0))
    .sortOrScramble
    .map(::print);
  partitionedCurves.getInner(0).minus(curveCoefficients.getInner(0))
    .sortOrScramble
    .map(::getCurveCoefficients);
  print("#=============================#\n"&
        "# Setting planar curves       #\n"&
        "#=============================#\n");
  local mapToPlanar:={$X.map((data:Map)->begin
    local c:=data;
    c[KEY_CURVE]:=0;
    c[KEY_ERROR]:=0;
    c[KEY_KOEFF]:=[0];
    c[KEY_OPTIMIZED]:=true;
    c[KEY_REFCV]:=[false,[[0,[0.0,0.0,0.0,0.0]],[0.5,[0.0,0.0,0.0,0.0]]]].packReferenceCurve;
    c;
  end)};

  curveCoefficients[2001].isVoid ? void : begin
    //planar configuration at 2*pi/7
    curveCoefficients[2000].isVoid OR curveCoefficients[2000].size=0 OR (getCurveCoefficients(2000).getInner(KEY_PHASE)=0).agg(or)
    ? curveCoefficients[2000]:=getCurveCoefficients(2001).mapToPlanar
    : void;
  end;

  curveCoefficients[5999].isVoid ? void : begin
    //planar configuration at 6*pi/7
    curveCoefficients[6000].isVoid OR curveCoefficients[6000].size=0 OR (getCurveCoefficients(6000).getInner(KEY_PHASE)=0).agg(or)
    ? curveCoefficients[6000]:=getCurveCoefficients(5999).mapToPlanar
    : void;
  end;

  curveCoefficients[4000].isVoid OR curveCoefficients[4005].isVoid ? void : begin
    //planar configuration at 4*pi/7
    ((local a:=getCurveCoefficients(4000)).getInner(KEY_PHASE)=0).agg(or)
    ? begin
        local b:=getCurveCoefficients(4005);
        local validA:=a[a.getInner(KEY_PHASE)<>0];
        local commonCoeffDist:=(x,y)->euklideanNorm(x.head(min(x.size,y.size))-y.head(min(x.size,y.size)));
        validA|=b.each(bc,[validA.each(ac,ac[KEY_PHASE]==bc[KEY_PHASE]
                                          ? commonCoeffDist(ac[KEY_KOEFF],bc[KEY_KOEFF])
                                          : Inf,min),bc])
                 .sort
                 .trailing(2)
                 .getInner(1)
                 .mapToPlanar;
        curveCoefficients[4000]:=validA;
      end
    : void;
  end;
end;

//*Show a rotating plot for an angle alpha=2*pi/7000 * i
main('show',k)->begin
  assertGuiStarted;
  local curveIdx:=k.toInt;
  local coefficients:=curveCoefficients[curveIdx];
  coefficients.isVoid
  ? return getPartitionedSamples(curveIdx)[1].plotRotating([])
  : begin
      local reconstructed:=coefficients.map(::sampleCurve);
      coefficients.map((c)->c[KEY_REFCV].unpackReferenceCurve[1].map(::trailing))
                  .plotRotating(reconstructed);
    end;
end;

//*Drops a particular curve or all if k='*'
main('drop',...)->
  (...).each(k,
    begin
      curveCoefficients[k.toInt].isVoid
      ? begin
          print('Curve coefficients ',k,' are not present');
          partitionedCurves[k.toInt].isVoid
          ? print('Partitioned curve ',k,' is not present')
          : begin
              ask('Do you really want to drop partitioned curve '&k,['Yes','No'])=='Yes'
              ? partitionedCurves[k.toInt]:=void
              : void;
            end;
        end
      : begin
          curveCoefficients[k.toInt]:=void;
          print('Curve coefficients ',k,' have been dropped');
        end;
    end);

//*Lists the currently available samples
main('list')->begin
  partitionedCurves
    .getInner(0)
    .sort
    .map((c)->format('%s%s',c,isVoid(curveCoefficients[c]) ? ' ' : 'c'))
    .chunkMap(10,(l)->l.join('  '))
    .map(::print)
    .agg(|);
end;

//*Shows a walk through all available values of i (alpha=2*pi/7000 * i)
main('walk',dim1 in ['0'..'3'],dim2 in ['0'..'3'])->begin
  assertGuiStarted;
  clearAnimation;
  local d1:=dim1.toInt;
  local d2:=dim2.toInt;
  partitionedCurves.getInner(0)
  .sort
  .toIteratableExpression
  .pMap((curveIdx)->curveIdx=>(
    curveCoefficients[curveIdx].isVoid
    ? begin
        print('Preparing samples for index ',curveIdx);
        local part:=getPartitionedSamples(curveIdx);
        local scale:=pi*0.5^(8+part[0]);
        part[1].each(sub,[sub.map({$x[[d1,d2]]*scale}).unique,DOT_STYLES[index]]);
      end
    : begin
        print('Preparing samples and reconstruction for index ',curveIdx);
        curveCoefficients[curveIdx].each(coeff,
        begin
          local phase:=coeff[KEY_PHASE];
          [coeff[KEY_REFCV].unpackReferenceCurve[1].map({$x[1,[d1,d2]]}),DOT_STYLES[phase]];
        end,
        begin
          local phase:=coeff[KEY_PHASE];
          local func:=coeff.getCurveFunction2D(d1,d2);
          local t:=max(500,8*(2*coeff[KEY_KOEFF].size+1));
          t:=[0..t]*(2*pi/t);
          [func(t).transpose,CURVE_STYLES[phase]] ;
        end);
      end))
  .each(plottableData,begin
    local curveIdxForDisplay:=plottableData[0];
    local rowsAndStyles:=plottableData[1];
    plot();
    drawTextAbsolute(0,1,curveIdxForDisplay.toString,20,'TL',[0,0,0],[1,1,1]);
    rowsAndStyles.map((r)->addPlot@r);
    addAnimationFrame;
    index=0 ? display : postDisplay;
  end);
end;

//*Shows an animation of approximated curves
main('walk1D')->begin
  assertGuiStarted;
  clearAnimation;
  setOptions(["preserveAspect"=>false].toMap);
  curveCoefficients.sort.toIteratableExpression
  .pMap((cc)->begin
    local idx:=cc[0];
    local labelText:=format('%s (%s)',idx,cc[1].map((coeff)->coeff[KEY_PHASE]).join("/"));
    local rowData:=cc[1].map((coeff)->begin
      local f:=getCurveFunction(coeff,0)*(180/256);
      local t:=max(1000,coeff.recommendedSampleCount); t:=[0..t]/t*2*pi;
      [[t,f(t)].transpose,CURVE_STYLES[coeff[KEY_PHASE] mod CURVE_STYLES.size]];
    end);
    [rowData,labelText];
   end).agg((frameData)->begin
     plot();
     frameData[0].map((c)->addPlot@c);
     drawTextAbsolute(0,1,frameData[1],16,'TL',[0,0,0],[1,1,1]);
     addAnimationFrame;
     postDisplay;
   end);
end;

barVisualization(X:NumericList,columnWidth:Int)->begin
  local validEntries:=!(X.isNan or X.isInfinite or X<0);
  trueCount(validEntries)<=1 ? return void : void;
  local intDig  :=1+floor(ln(X[validEntries].max)/ln(10));
  local decimals:=1-floor(ln(X[validEntries and (X>1E-6)].min)/ln(10));
  while(format('%{$0}'&(intDig+decimals+1)&'.'&decimals&"f",X[validEntries]).unique.size<X[validEntries].unique.size/4,decimals+=1);

  local fmt:='%{$0}'&(intDig+decimals+1)&'.'&decimals&"f\v";
  local numberLength:=format(fmt,X[validEntries]).join("\n").formatTabs.map(::length).max;
  local barLength:=columnWidth-numberLength-1;
  fmt:=fmt&'%{repeat("-",round($0*'&(barLength/X.max)&'))}s|';
  X.each(x,validEntries[index] ? format(fmt,x).replace(' ','0') : "\v"&(x.isNumeric ? x : void)).join("\n").formatTabs;
end;

//*Shows an info table on existing curves
main('infoTable')->begin
  local partIdx:=partitionedCurves.getInner(0);
  local coefIdx:=curveCoefficients.getInner(0);

  local tabData:=
  [['curve','','sc','#','phase','error','opt','cc']].|(
  union(partIdx,coefIdx).sort.each(k,
    k in coefIdx
       ? begin
           local part :=getPartitionedSamples(k);
           local coeff:=curveCoefficients[k];
           coeff.each(subCoeff,
             [k,index,part[0],part[1,subCoeff[KEY_CURVE]].orElse([]).size,subCoeff[KEY_PHASE],subCoeff[KEY_ERROR],(subCoeff[KEY_OPTIMIZED] orElse false)?'X':'',subCoeff[KEY_KOEFF].size,isGuiStarted ? subCoeff[KEY_KOEFF] : void].flatten);
         end
       : k in partIdx
       ? begin
           local part:=getPartitionedSamples(k);
           part[1].each(subCurve,[k,index,part[0], subCurve.size]);
         end
       : [k]
  ,|));
  tabData:=tabData.transpose(Nan);
  tabData:=tabData.each(col,
    index=5 ? col.head | col.tail.barVisualization(100)
            : col.map((x)->x.isNumeric AND x.isNan ? '' : x));
  tabData:=tabData.transpose('');

  isGuiStarted
  ? begin
      [8..tabData[0].size-1].map((k)->tabData[0,k]:='c_'&(k-8)&'('&((k-8)*2+1)&')');
      showTable(tabData,1,'Info table');
      main('coeffPlot');
    end
  : tabData.map((row)->row.join("\t")).join("\n").print;
end;

resampleFromPartitioned(curveIndex:Int,coeff:Map)->begin
  local partitionedSamples:=getPartitionedSamples(curveIndex);
  local scale:=partitionedSamples[0];
  assert(!scale.isVoid);

  partitionedSamples:=partitionedSamples[1,coeff[KEY_CURVE]].pMap((x)->x*0.5^scale/256*pi);
  assert(!partitionedSamples.isVoid);

  reconstructSamples(partitionedSamples,curveIndex,coeff);
end;

private canOptimizeSingleCurve(curveIdx,subCurveIdx)->begin
  assertUniqueInstance;
  local coeff  :=curveCoefficients[curveIdx,subCurveIdx];
  coeff[KEY_ERROR]=0 ? return false : void;
  local optimized:=
  (coeff[KEY_OPTIMIZED] orElse false)
  ? resample(curveIdx,coeff,false).optimizeApproximation(curveIdx)
  :                         coeff .optimizeApproximation(curveIdx);
  coeff==optimized OR optimized[KEY_ERROR]>coeff[KEY_ERROR]
  ? begin
      warn('Optimization for ',curveIdx,'/',subCurveIdx,' failed');
      curveCoefficients[curveIdx,subCurveIdx]:=resampleFromPartitioned(curveIdx,coeff);
      writeDatastoresLazily;
      false;
    end
  : begin
      curveCoefficients[curveIdx,subCurveIdx]:=optimized;
      writeDatastoresLazily;
      true;
    end;
end;

//*Optimizes the currently worst curve for the given time
main('optimize',timeoutInSeconds)->begin
  local pendingFirstRuns:=
    curveCoefficients.each(entry,begin
      local curveIdx:=entry[0];
      entry[1].each(e,(e[KEY_OPTIMIZED] orElse false) ? void : [e[KEY_ERROR],curveIdx,index]);
    end,|).sort.reverseList;
  print(pendingFirstRuns.size,' first optimizations are pending');
  pendingFirstRuns.size=0
  ? void
  : pendingFirstRuns.size<10
    ? printf('  %s/%s',pendingFirstRuns.getInner(1),pendingFirstRuns.getInner(2))
    : begin
        printf('  %s/%s',pendingFirstRuns.head(5).getInner(1),pendingFirstRuns.head(5).getInner(2));
        print('  ...');
        printf('  %s/%s',pendingFirstRuns.trailing(5).getInner(1),pendingFirstRuns.trailing(5).getInner(2));
      end;

  timeoutInSeconds.isString AND timeoutInSeconds.copy(0,1) in ['c','C']
  ? begin
      local curveIdx:=timeoutInSeconds.copy(1).toInt;
      [0..getCurveCoefficients(curveIdx).size-1].each(subCurveIdx,begin
        print("\nOptimizing curve ",curveIdx,'/',subCurveIdx);
        canOptimizeSingleCurve(curveIdx,subCurveIdx);
      end);
    end
  : begin
      local timeout:=scriptTime+timeoutInSeconds.toInt;
      local nonoptimizableCurves:=[].toSet;
      while(scriptTime<timeout and curveCoefficients.size>0,begin
        local worstEntry:=curveCoefficients
          .each(entry,entry[1].each(subCoeff,[[!(subCoeff[KEY_OPTIMIZED] orElse false), subCoeff[KEY_ERROR] orElse -Inf],[entry[0],index]]),|)
          .filter((c)->c[1] not in nonoptimizableCurves)
          .max[1];
        print("\nOptimizing curve ",worstEntry[0],'/',worstEntry[1],'; timeout in ',round(timeout-scriptTime),'s');
        canOptimizeSingleCurve(worstEntry[0],worstEntry[1])
        ? void
        : nonoptimizableCurves||=worstEntry;
      end);
    end;
end;

private discriminator(c:CurveCoefficients)->c[KEY_PHASE]+(c[KEY_PHASE]=3 ? ord(((c[KEY_KOEFF,1] orElse 0)/(c[KEY_KOEFF,0] orElse 1))>0.2) : 0);

private coefficientsByComponent(extractor:Expression)->begin
  local dataSets:=
  curveCoefficients.pEach(entry,begin
    local k:=entry[0];
    entry[1].each(c,[discriminator(c),k,c]);
  end,|);
  dataSets.map(::tail).group(dataSets.map(::head))
  .each(component,[component[0],component[1].sort.map((c)->[c[0],extractor(c[1])])]).toMap;
end;

//*Shows a plot of the first 3 coefficients
main('coeffPlot')->begin
  local dataSets:=coefficientsByComponent((c:CurveCoefficients)->c[KEY_KOEFF]);
  setOptions(["preserveAspect"=>false].toMap);
  dataSets.each(set,begin
    local style:=CURVE_STYLES[set[0]];
    local D:=set[1].union([[DEG_120,[Nan,Nan,Nan,Nan]]]).sort;
    D.map((x)->[x[0],x[1,0] orElse 0]).addPlot(style&' 2');
    D.map((x)->[x[0],x[1,1] orElse 0]).addPlot(style&' 1');
    D.map((x)->[x[0],x[1,2] orElse 0]).addPlot(style&' 0.7');
  end);
end;

//*Merges datastores of different origins
main('merge','stores')->begin
  local mergeCurves:=(ds:Map)->begin
    ds==partitionedCurves
    ? print('Skipping self (partitionedCurves)')
    : begin
        print('Merging ',ds.size, ' partitioned curves');
        ds.getInner(0).minus(partitionedCurves.getInner(0)).each(newCurveIndex,begin
          print('  adding curve #',newCurveIndex);
          partitionedCurves[newCurveIndex]:=ds[newCurveIndex];
        end);
      end;
  end;
  local mergeCoeff:=(ds:Map)->begin
    ds==curveCoefficients
    ? print('Skipping self (curveCoefficients)')
    : begin
        print('Merging ',ds.size, ' curve coefficients');
        local newEntries:=ds.getInner(0).minus    (curveCoefficients.getInner(0));
        local duplicates:=ds.getInner(0).intersect(curveCoefficients.getInner(0))
                                        .filter((i)->!(curveCoefficients[i]==ds[i]));

        newEntries.each(newCurveIndex,begin
          print('  adding coeff #',newCurveIndex);
          curveCoefficients[newCurveIndex]:=ds[newCurveIndex];
        end);
        duplicates.each(newCurveIndex,begin
          local localErrors :=curveCoefficients[newCurveIndex].getInner(KEY_ERROR);
          local importErrors:=ds               [newCurveIndex].getInner(KEY_ERROR);
          (localErrors.size=importErrors.size) AND
          (localErrors<=importErrors).agg(AND)
          ? void
          : (localErrors.size=importErrors.size) AND
            (importErrors<=localErrors).agg(AND)
            ? curveCoefficients[newCurveIndex]:=ds[newCurveIndex]
            : begin
                warn('  coeff #',newCurveIndex,' need merge which is not implemented yet');
                print('Local error: ',localErrors);
                print('Imported   : ',importErrors);
              end;
        end);
      end;
  end;
  myPath.changeFileExt('.datastore*').files()
  .map(::readDatastore)
  .map((store)->store['id']='partitionedCurves' ? mergeCurves(store['content']) : mergeCoeff(store['content']));
end;

@SuppressUnusedWarning
truncateLongCoefficients->begin
  local d:=curveCoefficients.sort.filter((entry)->entry[0]!=4000);
  [d.leading(2),d.leading.tail,d.tail(2)]
    .transpose
    .filter({($L.getInner(0)<DEG_120).trueCount in [0,3]})
    .filter({($L.getInner(0)<4000   ).trueCount in [0,3]})
    .{$L[$L.size.random.sortPerm]}
    .map((triplet:List(3))->begin
       local neighborCoeffCountByDiscriminator:=[0,2].each(n,triplet[n,1].map((c)->[discriminator(c),c[KEY_KOEFF].size]),|);
       neighborCoeffCountByDiscriminator:=neighborCoeffCountByDiscriminator.getInner(1).group(neighborCoeffCountByDiscriminator.getInner(0));

       local curveIdx:=triplet[1,0];
       triplet[1,1].each(subcurve,begin
         local coeffCount        :=subcurve[KEY_KOEFF].size;
         local neighborCoeffCount:=neighborCoeffCountByDiscriminator[discriminator(subcurve)] orElse fail('No matching neighbors for curve ',curveIdx,'/',index);
         (coeffCount>neighborCoeffCount+2).agg(AND)
         ? begin
             warn('Oversized curve ',curveIdx,'/',index,'; size is ',coeffCount,' should be between ',neighborCoeffCount);
             //local newCoeffCount:=max(1,neighborCoeffCount.agg(+) div neighborCoeffCount.size-1);
             //curveCoefficients[curveIdx,index]:=[KEY_KOEFF=>subcurve[KEY_KOEFF].head(newCoeffCount),KEY_ERROR=>subcurve[KEY_ERROR]*10].toMap.mergeMaps(subcurve,::orElse).optimizeApproximation;
             //writeDatastoresLazily;
           end
         : void;
       end);
     end)
     .agg(|);
end;

main('animate','walk',componentIndex)->makeWalk(curveCoefficients,componentIndex.toInt,2*pi*random);
main('animate',curveIndex,subCurveIndex)->begin
  assertGuiStarted;
  local coeff:=curveCoefficients[curveIndex.toInt,subCurveIndex.toInt] orElse fail('There is no such curve');
  local alpha:=curveIndex.toInt*pi/7000;
  animateHeptagon(alpha,coeff);
end;
