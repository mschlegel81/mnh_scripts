USE fourierCurves;
packReferenceCurve  (samples   :Timed4DSamples)->samples.serialize.compress;

unpackReferenceCurve(packedData:String)->packedData.decompress.deserialize;

//*Shifts a list L left periodically by shift
private periodicShift(L:List,shift:Int)->begin
  local s:=L.size;
  local k:=shift-floor(shift/s)*s;
  k=0
  ? L
  : L.tail(k)|L.head(k);
end;

//*Returns the best guesses for half period index and zero index for a given list l
//*The zero is identified by a symmetry of f(i_0-x)=-f(i_0+x)
//*The half is identified by a symmetry of f(i_1-x)= f(i_1+x)
private findHalfAndZero(l:NumericList)->begin
  local judgeSymmetry:=(subList:NumericList)->
    [(subList+subList.reverseList).euklideanNorm,
     (subList-subList.reverseList).euklideanNorm,
     (subList*([0..subList.size-1]-(subList.size-1)/2)).agg(+)];

  local I:=[[0..l.size-1],l].transpose[l!=(l.tail|l.head)];
  local X:=I.getInner(1);
  I:=[-1|I.getInner(0),I.getInner(0)|l.size-1].transpose.map((idx)->idx[1]==idx[0] ? void : idx[1]<idx[0] ? [idx[0]] : [idx[0]+1..idx[1]]);

  local radius:=X.size div 4;
  local kernel:=exp(-sqr([-radius..radius]*2/radius));
  local symAround:=[0..X.size-1].pMap((i0)->i0|judgeSymmetry(X.periodicShift(i0-radius).head(kernel.size)*kernel));
  local bestZero      :=symAround.filter((p)->p[3]>0).sort(1)[0,0];
  local validHalfRange:=toSet([bestZero..bestZero+X.size div 3] mod X.size);
  local bestHalf      :=symAround.filter((p)->p[0] in validHalfRange).sort(2)[0,0];
  [round(I[bestZero].{$L.agg(+)/$L.size}),
   round(I[bestHalf].{$L.agg(+)/$L.size})];
end;

//*Returns a patch around the index "patchAround"
//*in dimensions [0,1,2] if primary is true and
//*in dimensions [1,2,3] if primary is false
private findLocalPatch(timedCurve:List,patchAround:Int,primary:Boolean)->begin
  local samples:=
  map(timedCurve.getInner(1)[(([1..64].each(i,i,-i))+timedCurve.size+patchAround) mod timedCurve.size],
      primary ? ::leading : ::tail);
  local point:=samples[0];
  samples:=samples.filter((x)->(x-point).euklideanNorm<=6).toSet;
  primary
  ? [point,samples]
  :        samples;
end;

//*Finds a similar patch in the given timed curve
private findSimilarPatch(timedCurve:List,patchAround:Int,targetTimeIdx)->begin
  local referencePatch:=findLocalPatch(timedCurve,patchAround,true);
  local referencePoint:=referencePatch[0];
        referencePatch:=referencePatch[1];
  //find points with timing:
  local timedPoints:=
    timedCurve.pEach(pt,pt[0].isNan ? void :
      [[index-timedCurve.size,pt[0]-1],
       [index                ,pt[0]  ],
       [index+timedCurve.size,pt[0]+1]],|).sort;
  //Determine scan range:
  local I:=[timedPoints[timedPoints.getInner(1)<targetTimeIdx].max[0]+1,
            timedPoints[timedPoints.getInner(1)>targetTimeIdx].min[0]-1];
  (I<0).agg(or) ? I+=timedCurve.size : void;
  ([I[0]..I[1]] mod timedCurve.size).pEach(i,begin
    local otherPatch:=findLocalPatch(timedCurve,i,false);
    [union(referencePatch.minus(otherPatch),otherPatch.minus(referencePatch))
     .map((sample)->0.5^(sample-referencePoint).euklideanNorm)
     .agg(+) orElse 0,i];
  end,min)[1];
end;

private timer(message,startTime)->{printf('%-40s (%8.3fs)',message,scriptTime-startTime)};
private timer(message)->timer(message,scriptTime);

timedCurveError(timedSamples:Timed4DSamples,factors:NumericList,phase:Int,doPlotOutput:Boolean)->begin
  assert(!timedSamples.isFullCurve);
  local reconstructed:=sampleCurve(factors,phase,timedSamples[1].getInner(0)*2*pi);
  local weights:=(timedSamples[1].getInner(1).tail-timedSamples[1].getInner(1).leading).euklideanNorm;
  weights:=weights.head|weights|weights.trailing;
  weights:=weights.tail+weights.leading;

  local D:=(timedSamples[1].getInner(1)-reconstructed).euklideanNorm;
  doPlotOutput
  ? begin
      setOptions(["fontsize"=>6,"preserveAspect"=>false,"x0"=>0,"y0"=>0,"y1"=>1,"autoscaleX"=>true,"autoscaleY"=>true].toMap);

      [timedSamples[1].getInner(0).map(::periodicTime),D].transpose.sort.plot('red 0.5 f');
      addAnimationFrame;
      postDisplay;
    end
  : void;
  sqrt((D.sqr*weights).agg(+)/weights.agg(+)); //weighted average over all samples
end;

private recommendedFourierCoeffCount(coefficients:NumericList)->ceil((indexOf(coefficients.abs>=coefficients.abs.max*1E-3).max+1)*1.3);

private heptagonExe:=expandedFileName(myPath.extractFileDirectory&'/../packages/heptagon.exe');
private improveSingleSample(k:Int,phi:NumericList(4))->begin
  local execOut:=exec(heptagonExe,map('opt'|k|(phi),::toString));
  assert(execOut[1]=0);
  execOut[0,0].split(";").head.replace('*','').trim.split(',').trim.softCast;
end;

getRefinementSteps(partiallyTimedCurve:List)->begin
  local L:=partiallyTimedCurve[1].getInner(0).map((t)->t.isNan ? Inf : 0);
  local k:=indexOf(!L.isInfinite);
  local level:=0;
  while(k.size<L.size,begin
    level+=1;
    k|=k[0]+L.size;
    (k.tail+k.leading).div(2).each(i, L[i]:=min(L[i],level));
    k:=indexOf(!L.isInfinite);
  end);
  local indexOnReconstruction:=L.sortPerm.each(j,j=>index).toMap;
  [1..L.max].each(k,begin
    local toReconstruct    :=indexOf(L=k);
    local toReconstructFrom:=indexOf(L=k-1);
    //local indexOnReconstruction:=indexOf(L<k).each(j,j=>index).toMap;
    toReconstruct.each(i,[i,
      begin
        local j:=toReconstructFrom[toReconstructFrom<i].max;
        j.isVoid ? [indexOnReconstruction[toReconstructFrom.max],-0.5] : [indexOnReconstruction[j],0.0];
      end,
      begin
        local j:=toReconstructFrom[toReconstructFrom>i].min;
        j.isVoid ? [indexOnReconstruction[toReconstructFrom.min], 0.5] : [indexOnReconstruction[j],0.0];
      end]);
  end);
end;

calcCurveCoeff(c:List,curveIndex:Int,subCurveIndex:Int,scale:Int)->
c.size<=8
? [KEY_PHASE=>0,
   KEY_KOEFF=>[0],
   KEY_ERROR=>0,
   KEY_REFCV=>[false,[[0,[0.0,0.0,0.0,0.0]],[0.25,[0.0,0.0,0.0,0.0]]]].packReferenceCurve,
   KEY_CURVE=>subCurveIndex].toMap
: begin
  fileExists(heptagonExe).assert;
  //Symmetries:
  // f_0(t   ) = f_0(T+t   ) = -f_0(  -t) = f_0(T/2   -t)
  //=f_1(t+ a) = f_1(T+t+ a) = -f_1( a-t) = f_1(T/2+ a-t)
  //=f_2(t+2a) = f_2(T+t+2a) = -f_2(2a-t) = f_2(T/2+2a-t)
  //=f_3(t+3a) = f_3(T+t+3a) = -f_3(3a-t) = f_3(T/2+3a-t)
  //a = k/7*T (for integer k)
  //
  //Because of f_0(t) = -f_0(-t) we only need the Sine components of a fourier transform
  //Because of f_0(t) = f_0(T/2-t) we only need the even indexed Sine components of a fourier transform
  //Because of f_0(t) = f_1(t+a) = f_2(t+2a) = f_3(t+3a) we only need one set of coefficients + a phase shift

  //(1) Extract points with exact times from symmetry assumptions:------------
  local zerosAndHalves:=c.transpose.map(::findHalfAndZero);
  local stepDone:=timer('Symmetry points found in '&c.size&' points');
  local phaseShift:=((zerosAndHalves.getInner(0).tail-
                      zerosAndHalves.getInner(0).leading)/c.size)
                   .periodicTime
                   .{($x.agg(+)/$x.size*7).round/7};
  local partiallyTimedCurve:=c
    .periodicShift(zerosAndHalves[0,0])
    .head(c.size div 2)
    .map((p)->Nan=>p);
  zerosAndHalves:=(zerosAndHalves+c.size-zerosAndHalves[0,0]) mod c.size;

  partiallyTimedCurve[0,0]:=0;
  partiallyTimedCurve[zerosAndHalves[0,1],0]:=1/4;
  //Assign phase shift timings:
  [1..3].each(dimension,[0..1].each(shiftKind,begin
    local shift:=zerosAndHalves[dimension,shiftKind];
    local da:=periodicTime(phaseShift*dimension+shiftKind/4);
    shift>=partiallyTimedCurve.size
    ? begin
        shift-=partiallyTimedCurve.size;
        da   -=0.5;
      end
    : void;
    partiallyTimedCurve[shift,0]:=da;
    shift;
  end));
  //Assign phase shift timings:
  [4..6].each(dimension,begin
    zerosAndHalves[dimension]:=[0,0];
    [0..1].each(shiftKind,begin
      local fullCurve:=partiallyTimedCurve | partiallyTimedCurve.map((pt)->[pt[0]+0.5,-pt[1]]);
      local da:=periodicTime(phaseShift*dimension+shiftKind/4);
      zerosAndHalves[dimension,shiftKind]:=findSimilarPatch(fullCurve,zerosAndHalves[dimension-1,shiftKind],da);
      local shift:=zerosAndHalves[dimension,shiftKind];
      shift>=partiallyTimedCurve.size
      ? begin
          shift-=partiallyTimedCurve.size;
          da   -=0.5;
        end
      : void;
      partiallyTimedCurve[shift,0]:=da;
      shift;
    end);
  end);

  stepDone();
  //------------:(1) Extract points with exact times from symmetry assumptions
  //(2) Refine samples:-------------------------------------------------------
  stepDone:=timer('Samples refined');
  local intPhaseShift:=round(phaseShift*7);
  partiallyTimedCurve:=[false,partiallyTimedCurve.pMap((pt)->[pt[0],
                                                              improveSingleSample(curveIndex,pt[1]*0.5^scale/256*pi)])];
  isGuiStarted ? begin
    setOptions(["fontsize"=>6,"preserveAspect"=>false].toMap);
    plot();
    map([0..3],(dim)->partiallyTimedCurve[1].getInner(1).each(x,(index/partiallyTimedCurve[1].size*0.5- phaseShift*dim)=>x[dim]).addPlot());
    addAnimationFrame;
  end : void;
    addAnimationFrame;
  end : void;
  local timedCurve:=[false,partiallyTimedCurve[1].map((pt)->pt[0].isNan ? void : pt.head(2))];
  stepDone();
  //-------------------------------------------------------:(2) Refine samples
  //(3) Interpolation of time:------------------------------------------------
  stepDone:=timer('Timing interpolated');
  local dft:=timedCurve.piecewiseCubicFourierTransform(phaseShift,10);
  local PLOT_INTERMEDIATE:=isGuiStarted
  ? {begin
      setOptions(["fontsize"=>6,"preserveAspect"=>false].toMap);
      plot();
      map([0..3],(dim)->timedCurve[1].pMap((pt)->periodicTime(pt[0]- phaseShift*dim)=>pt[1,dim]).sort.addPlot('0.5 . black'));
      local f:=getCurveFunction([KEY_PHASE=>intPhaseShift,KEY_KOEFF=>$dft].toMap,0);
      addPlot((t)->f(t*2*pi),0,1,5000,'red');
      addAnimationFrame;
      display;
    end}
  : {$dft};
  PLOT_INTERMEDIATE(dft);
  local refinementSteps:=getRefinementSteps(partiallyTimedCurve);
  refinementSteps.each(refStep,begin
    local newlyTimedSamples:=refStep.each(entry,begin
      local p:=partiallyTimedCurve[1,entry[0],1];
      local t:=((timedCurve[1,entry[1,0],0]+entry[1,1])+
                (timedCurve[1,entry[2,0],0]+entry[2,1]))*0.5;
      t=>p;
    end);
    timedCurve:=[false,(timedCurve[1]|newlyTimedSamples)];
    local numberOfRefinementRuns:=max(1,shiftRight(16,index));
    [1..numberOfRefinementRuns].each(refRun,begin
      timedCurve:=timedCurve.retimeCurveByFourierCoeff(dft,intPhaseShift,false)['timedSamples'];
      dft:=timedCurve.piecewiseCubicFourierTransform(phaseShift,min(dft.recommendedFourierCoeffCount,timedCurve[1].size));
      dft:=timedCurve.piecewiseCubicFourierTransform(phaseShift,min(dft.recommendedFourierCoeffCount,timedCurve[1].size));
      PLOT_INTERMEDIATE(dft);
    end);
    print('  ',timedCurve[1].size,' samples; ',dft.size,' coefficients');
  end);
  timedCurve:=timedCurve.retimeCurveByFourierCoeff(dft,intPhaseShift,true)['timedSamples'];
  PLOT_INTERMEDIATE(dft);
  stepDone();
  //------------------------------------------------:(3) Interpolation of time
  //(4): Normalization--------------------------------------------------------
  stepDone:=timer('Normalized and finished');
  phaseShift>0.5
  ? begin
      note('Flip phase');
      phaseShift:=1-phaseShift;
      timedCurve[1]:=timedCurve[1].each(pt,pt,[periodicTime(pt[0]+0.5),-pt[1]])
                                  .map((pt)->[periodicTime(0.5-pt[0]),pt[1]])
                                  .filter((pt)->0<=pt[0]<0.5).sort;
      intPhaseShift:=round(phaseShift*7);
      PLOT_INTERMEDIATE(dft);
    end
  : begin
      timedCurve[1]:=timedCurve[1].each(pt,pt,[periodicTime(pt[0]+0.5),-pt[1]])
                                  .filter((pt)->0<=pt[0]<0.5).sort;
    end;
  local error:=timedCurveError(timedCurve,dft,intPhaseShift,false);
  print('  Error: ',error);
  local result:=
  [KEY_PHASE=>intPhaseShift,
   KEY_KOEFF=>dft,
   KEY_ERROR=>error,
   KEY_REFCV=>timedCurve.packReferenceCurve,
   KEY_CURVE=>subCurveIndex].toMap;
  stepDone();
  result;
end;

optimizeApproximation(coeff:CurveCoefficients,curveIndex:Int)->begin
  local timedCurve  :=(coeff[KEY_REFCV] orElse fail).unpackReferenceCurve;
  local phaseShift  := coeff[KEY_PHASE] orElse fail('Missing key: ',KEY_PHASE);
  local initialError:= coeff[KEY_ERROR] orElse fail('Missing key: ',KEY_ERROR);
  local coefficients:= coeff[KEY_KOEFF] orElse fail;

  local timedCurveHistory    :=[timedCurve,timedCurve];
  local curveParameterHistory:=[coefficients,coefficients];
  local errorHistory         :=[Inf,initialError];
  local movementHistory      :=[Inf,Inf];

  local firstOptimizationRun:=!(coeff[KEY_OPTIMIZED] orElse false);
  local errorThreshold:=initialError*0.5;
  print ('  Curve samples: ',timedCurve[1].size);
  printf('  Init. error : %16.10f (%5.1f%%); coeffCount: %3d%s',
         initialError,
         initialError/errorThreshold*100-100,
         coefficients.size,
         firstOptimizationRun ? ' (first run)' : '');
  local historyPush:=(newTimedCurve:List,newParameters:NumericList,newError:Numeric,newMovement:Numeric)->begin
    timedCurveHistory    ||= newTimedCurve;
    curveParameterHistory||= newParameters;
    errorHistory         ||= newError;
    movementHistory      ||= newMovement;
  end;

  local shrinksBy:=(list:NumericList,factor:Numeric)->list.size<2 ? true : begin
    local trail:=list.trailing(2);
    (trail.isNan or trail.isInfinite).agg(or)
    ? true
    : trail[1]<trail[0]*factor;
  end;
  local intermediateError:=initialError;
  local invalidCoefficientsFound:=false;
  while(errorHistory.trailing>errorThreshold,begin
    timedCurveHistory    |=[timedCurve,timedCurve];
    curveParameterHistory|=[coefficients,coefficients];
    errorHistory         |=[Inf,intermediateError];
    movementHistory      |=[Inf,Inf];

    local targetCoeffCount:=coefficients.size;

    local firstRunWithAdditionalCoefficient:=false;
    firstOptimizationRun
    ? errorThreshold:=max(initialError,errorThreshold)
    : begin
        targetCoeffCount:=max(coefficients.size+1,coefficients.recommendedFourierCoeffCount);
        while(coefficients.size<targetCoeffCount,coefficients|=0);
        firstRunWithAdditionalCoefficient:=true;
      end;

    while(!invalidCoefficientsFound AND movementHistory.shrinksBy(0.95) AND errorHistory.shrinksBy(0.999),begin
      coefficients:=piecewiseCubicFourierTransform(timedCurve,phaseShift/7,coefficients.size);

      //Handle denormalized coefficients:
      !coefficients.isNan.agg(or) and !coefficients.isInfinite.agg(or)
      ? begin
          local retimeOut:=timedCurve.retimeCurveByFourierCoeff(coefficients,phaseShift,true);
          timedCurve    :=retimeOut['timedSamples'];
          local movement:=retimeOut['maxTimeDelta'];
          historyPush(timedCurve,coefficients,timedCurveError(timedCurve,coefficients,phaseShift,isGuiStarted),movement);
          printf('  Curve error : %16.10f (%5.1f%%); coeffCount: %3d%s; moving by: %12.4e',
            errorHistory.trailing,
            errorHistory.trailing/errorThreshold*100-100,
            coefficients.size,
            firstRunWithAdditionalCoefficient ? '(+)' : '   ',
            movement);
          firstRunWithAdditionalCoefficient AND errorHistory.trailing>errorHistory.trailing(2).head
          ? begin
              warn('ERROR GROWS! - forced resampling');
              local resampledCoeff:=resample(curveIndex,
                [KEY_REFCV=>packReferenceCurve(timedCurve),
                 KEY_KOEFF=>coefficients,
                 KEY_OPTIMIZED=>true,
                 KEY_ERROR=>errorHistory.trailing].toMap.mergeMaps(coeff,::orElse),true);
              timedCurve       :=resampledCoeff[KEY_REFCV].unpackReferenceCurve;
              coefficients     :=resampledCoeff[KEY_KOEFF];
              intermediateError:=resampledCoeff[KEY_ERROR];

              local retimeOut:=timedCurve.retimeCurveByFourierCoeff(coefficients,phaseShift,true);
              timedCurve    :=retimeOut['timedSamples'];
              local movement:=retimeOut['maxTimeDelta'];
              historyPush(timedCurve,coefficients,timedCurveError(timedCurve,coefficients,phaseShift,isGuiStarted),movement);
            end : void;
        end
      : begin
          warn('Invalid coefficients encountered: ',coefficients);
          invalidCoefficientsFound:=true;
          //error threshold set to infinity
          errorThreshold:=Inf;
          //Log infinite error and infinite movement!
          historyPush(timedCurve,coefficients,Inf,Inf);
        end;
      firstRunWithAdditionalCoefficient:=false;
    end);
    intermediateError:=min(errorHistory);
    local k:=argMin(errorHistory);
    timedCurve  :=timedCurveHistory[k];
    coefficients:=curveParameterHistory[k];
    //Increase error tolerance to limit loop count
    errorThreshold*=1.1;
    intermediateError>errorThreshold
    ? begin
        //Ensure that the target coeff count is reached:
        while(coefficients.size<targetCoeffCount,coefficients|=0);
      end
    : void;
  end);

  printf('  Final error : %16.10f         ; coeffCount: %3d',intermediateError,coefficients.size);

  intermediateError>=initialError AND !firstOptimizationRun
  ? coeff
  : [KEY_REFCV=>packReferenceCurve(timedCurve),
     KEY_KOEFF=>coefficients,
     KEY_OPTIMIZED=>true,
     KEY_ERROR=>intermediateError].toMap.mergeMaps(coeff,::orElse);
end;

resample(curveIndex:Int,coeff:CurveCoefficients,forceResampling:Boolean)->begin
  local coefficients:=coeff[KEY_KOEFF] orElse fail;
  local samplesRequired:=ceil(max(coefficients.size,coefficients.recommendedFourierCoeffCount)*16/7)*7+1;
  local currentSamples:=coeff[KEY_REFCV].unpackReferenceCurve[1].size;
  !forceResampling AND (samplesRequired*0.6<currentSamples<samplesRequired*1.5 OR coeff[KEY_ERROR]=0)
  ? return coeff
  : print('Resampling curve...');
  local done:=timer('Resampling');

  local phaseShift  := coeff[KEY_PHASE] orElse fail;
  local T:=[0..samplesRequired-1]/samplesRequired*0.5;
  print("  Samples before\t",coeff[KEY_REFCV].unpackReferenceCurve[1].size,"\n",
        "  Resampling curve at\t",T.size,"\tpoints");
  print('  Error before resampling : ',coeff[KEY_ERROR] orElse fail);
  local timedCurve:=[false,
    sampleCurve(coefficients,phaseShift,T*2*pi).pEach(x,
      [T[index],improveSingleSample(curveIndex,x)])];
  coefficients:=piecewiseCubicFourierTransform(timedCurve,phaseShift/7,coefficients.size);
  timedCurve:=timedCurve.retimeCurveByFourierCoeff(coefficients,phaseShift,true)['timedSamples'];

  local error:=timedCurve.timedCurveError(coefficients,phaseShift,isGuiStarted);
  print('  Error after  resampling : ',error);
  done();
  [KEY_REFCV=>packReferenceCurve(timedCurve),
   KEY_KOEFF=>coefficients,
   KEY_OPTIMIZED=>true,
   KEY_ERROR=>error].toMap.mergeMaps(coeff,::orElse);
end;

reconstructSamples(c:List,curveIndex:Int,coeff:Map)->begin
  local currentCurve:=sampleCurve(coeff);
  local error:=coeff[KEY_ERROR];
  local coefficients:=coeff[KEY_KOEFF];
  local t:=[0..currentCurve.size-1]/currentCurve.size;

  log('Timing ',c.size,' discrete samples');
  local samples:=
    c.pMap((x)->begin local closest:=currentCurve.map((r)->euklideanNorm(r-x)).argMin; t[closest]=>x; end)
     .filter((pt)->0<=pt[0]<=0.5)
     .{log('Refining ',$L.size,' samples') orElse $L}
     .pMap((pt)->[pt[0],improveSingleSample(curveIndex,pt[1])])
     .{log('Retiming ',$L.size,' samples') orElse $L}
     .{[false,$0]}
     .retimeCurveByFourierCoeff(coefficients,coeff[KEY_PHASE],true)['timedSamples'];
  printf('      Initial error : %16.10f; coeffCount: %3d',error,coefficients.size);
  [1..16].each(i,begin
    coefficients:=piecewiseCubicFourierTransform(samples,coeff[KEY_PHASE]/7,max(coefficients.size,recommendedFourierCoeffCount(coefficients)));
    samples:=samples.retimeCurveByFourierCoeff(coefficients,coeff[KEY_PHASE],true)['timedSamples'];
    printf(' #%2d/16 Curve error : %16.10f; coeffCount: %3d',
           i,
           error:=timedCurveError(samples,coefficients,coeff[KEY_PHASE],isGuiStarted),
           coefficients.size);
  end);

  [KEY_REFCV=>packReferenceCurve(samples),
   KEY_ERROR=>error,
   KEY_KOEFF=>coefficients,
   KEY_OPTIMIZED=>true].toMap.mergeMaps(coeff,::orElse);
end;
