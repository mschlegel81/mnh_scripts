KEY_PHASE:='phaseShift';
KEY_KOEFF:='coefficients';
KEY_ERROR:='error';
KEY_ERROR_INTEGRAL:='error_integral';
KEY_CURVE:='curveIdx';
KEY_REFCV:='referenceData';
KEY_OPTIMIZED:='ever_optimized';

ducktype CurveCoefficients(C:Map)->C[KEY_PHASE].isInt AND C[KEY_KOEFF].isNumericList AND C[KEY_KOEFF].size>0;
ducktype Timed4DSamples(L:List(2))->L[0].isBoolean AND L[1].each(x,x.isList(2) AND x[0].isNumeric AND x[1].isNumericList(4),AND);
isFullCurve(c:Timed4DSamples)->c[0];

periodicTime(Nan)->Nan;
periodicTime(t)->t-floor(t);

periodicHalfCurveSample(pt:List(2))->begin
  t:=pt[0]-floor(pt[0]);
  t>0.5
  ? [t-0.5,-pt[1]]
  : [t    , pt[1]];
end;

splineFourierTransform(timedCurve:Timed4DSamples,realPhaseShift:Real,maxCoeff>=1)->begin
  effectiveMaxCoeff:=min(maxCoeff*2-1,timedCurve[1].size div 2);
  [0..3].pEach(dimension,begin
    phaseShift:=dimension*realPhaseShift;
    samplesInTime:=timedCurve[1].map((t,p)->periodicTime(t-phaseShift)=>p[dimension]);
    if not timedCurve.isFullCurve
    then samplesInTime:=samplesInTime.each((t,p),[t,p],[periodicTime(t+0.5),-p]);
    allCoefficients:=samplesInTime.sort.transpose.*([2*pi,1]).transpose.calculateFourierCoefficients(effectiveMaxCoeff);
    allCoefficients.each((re,im),(index and 1)=1 ? im : void);
  end,+)*0.25;
end;

getCurveFunction(coeff:CurveCoefficients,dim:Int)->begin
  phaseShift:=-coeff[KEY_PHASE]*2*pi/7*dim;
  coeff[KEY_KOEFF].each(c,[0,0],
                          [sin(phaseShift*(index*2+1))*c,
                           cos(phaseShift*(index*2+1))*c]).newFourierSeries;
end;

private combine2D(fx,fy)->{[fx($t),fy($t)]};

getCurveFunction2D(coeff:CurveCoefficients,dim1:Int,dim2:Int)->
  combine2D(getCurveFunction(coeff,dim1),
            getCurveFunction(coeff,dim2));

recommendedSampleCount(dft:NumericList)->//round up to next power of two
                                         (dft.size*2-1)*4;
recommendedSampleCount(coeff:CurveCoefficients)->coeff[KEY_KOEFF].recommendedSampleCount;

//private combine4D(f:Expression(1),ps1,ps2,ps3)->(t)->[f(t),f(t-ps1),f(t-ps2),f(t-ps3)];
private combine4D(f:FourierSeries,ps1,ps2,ps3)->{begin
  r:=[f($0),f($0-ps1),f($0-ps2),f($0-ps3)];
  $0.isNumericList
  ? r.transpose
  : r;
end};

f4(factors:NumericList,phase:Int)->
    combine4D(factors.each(a,0,a).newFourierSeries,
              phase*2*pi/7,phase*4*pi/7,phase*6*pi/7);

private df4dt(factors:NumericList,phase:Int)->
    combine4D(factors.each(a,[0,0],[a*(2*index+1),0]).newFourierSeries,
              phase*2*pi/7,phase*4*pi/7,phase*6*pi/7);

sampleCurve  (factors:NumericList,phase:Int,pointsInTime:NumericList)-> f4  (factors,phase)(pointsInTime);
sampleCurveDt(factors:NumericList,phase:Int,pointsInTime:NumericList)->df4dt(factors,phase)(pointsInTime);

private sampleCurve(coeff:CurveCoefficients,sampleCount:Int)->sampleCurve(coeff[KEY_KOEFF],coeff[KEY_PHASE],[0..sampleCount]/sampleCount*2*pi);

sampleCurve(coeff:CurveCoefficients)->coeff.sampleCurve(recommendedSampleCount(coeff));

retimeCurveByFourierCoeff(TY:Timed4DSamples,factors:NumericList,phase:Int,normalize:Boolean)->begin
  F :=f4   (factors,phase);
  dF:=df4dt(factors,phase);
  Q:=TY[1].pEach((t0,p),begin
    t:=t0*2*pi;
    factor:=1;
    step:=1;
    [[1..64].each(iterationStep,abs(step)<1E-16 or factor<0.01 ? void : begin
       df:=dF(t);
       oldDistance:=p-F(t);
       step:=factor*((oldDistance*df).agg(+)/(df.sqr.agg(+)));
       t+=step;
       newDistance:=euklideanNorm(p-F(t));
       if newDistance>euklideanNorm(oldDistance) then begin
         t-=step; factor*=0.5;
         [euklideanNorm(oldDistance),t];
       end else [newDistance,t];
     end,min)[1]/(2*pi),p];
  end);
  ['timedSamples'=>[TY[0],
                    normalize
                    ? TY[0] ? Q.pMap((pt)->periodicTime(pt[0])=>pt[1])
                            : Q.pMap(::periodicHalfCurveSample)
                    : Q],
   'maxTimeDelta'=>abs(Q.getInner(0)-TY[1].getInner(0)).max].toMap;
end;

findPointOnCurveMinimizing(factors:NumericList,phase:Int,toMinimize:Expression(1))->begin
  F:=f4(factors,phase);
  evaluateAngle:={begin
    phi:=F($angle);
    [toMinimize(phi),
     $angle,
     phi];
  end};
  stepSize:=2*pi*1E-2;
  best:=([0..99]*stepSize).each(a,evaluateAngle(a),min);
  [1..20].each(run,begin
    stepSize*=0.5;
    best:=(best[1]+stepSize*[-1..1]).each(a,evaluateAngle(a),min);
  end);
  best;
end;

