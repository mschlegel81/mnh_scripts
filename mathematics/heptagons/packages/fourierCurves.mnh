KEY_PHASE:='phaseShift';
KEY_KOEFF:='coefficients';
KEY_ERROR:='error';
KEY_CURVE:='curveIdx';
KEY_REFCV:='referenceData';
KEY_OPTIMIZED:='ever_optimized';

ducktype CurveCoefficients(C:Map)->C[KEY_PHASE].isInt AND C[KEY_KOEFF].isNumericList AND C[KEY_KOEFF].size>0;
ducktype Timed4DSamples(L:List(2))->L[0].isBoolean AND L[1].each(x,x.isList(2) AND x[0].isNumeric AND x[1].isNumericList(4),AND);
isFullCurve(c:Timed4DSamples)->c[0];

periodicTime(Nan)->Nan;
periodicTime(t)->t-floor(t);

periodicHalfCurveSample(pt:List(2))->begin
  local t:=pt[0]-floor(pt[0]);
  t>0.5
  ? [t-0.5,-pt[1]]
  : [t    , pt[1]];
end;

//*Returns a 1D fourier series + error measure
private splineFourierTransform(timedSamples:List,coeffCount)->begin
  //Add samples at the start and at the end
  local prevTime:=-Inf;
  local tmp:=
  (timedSamples.trailing(5).map((pt)->(pt[0]-1)*2*pi=>pt[1])
  |timedSamples            .map((pt)-> pt[0]   *2*pi=>pt[1])
  |timedSamples.head(5)    .map((pt)->(pt[0]+1)*2*pi=>pt[1])).filter((pt)->begin
    local accept:=pt[0]>prevTime;
    prevTime:=pt[0];
    accept;
  end);
  local allCoefficients:=calculateFourierCoefficients(tmp,coeffCount*2-1);
  [allCoefficients.each(r,(index and 1)=1 ? r[1] : void),
   allCoefficients.each(r,(index and 1)=1 ? r[0] : r).flatten.euklideanNorm/sqrt(coeffCount*3)];
end;

splineFourierTransform(timedCurve:Timed4DSamples,realPhaseShift:Real,maxCoeff>=1)->
  [0..3].pEach(dimension,timedCurve[1]
                   .pMap((pt)->[periodicTime(pt[0]-dimension*realPhaseShift),pt[1,dimension]])
                   .{timedCurve.isFullCurve ? $L : $L.pEach(pt,pt,[periodicTime(pt[0]+0.5),-pt[1]])}
                   .sort
                   .splineFourierTransform(maxCoeff),+)*0.25;

getCurveFunction(coeff:CurveCoefficients,dim:Int)->begin
  local phaseShift:=coeff[KEY_PHASE]*2*pi/7*dim;
  local f:=coeff[KEY_KOEFF].each(a,a=0 ? void : a*sin((dim=0 ? {$t} : {$t}-phaseShift)*(index*2+1)),+);
  f.isVoid ? (x)->0
           : f;
end;

private combine2D(fx,fy)->{[fx($t),fy($t)]};

getCurveFunction2D(coeff:CurveCoefficients,dim1:Int,dim2:Int)->
  combine2D(getCurveFunction(coeff,dim1),
            getCurveFunction(coeff,dim2));

recommendedSampleCount(coeff:CurveCoefficients)->max(350,min(3500,(coeff[KEY_KOEFF].size*2-1)*4));

//private combine4D(f:Expression(1),ps1,ps2,ps3)->(t)->[f(t),f(t-ps1),f(t-ps2),f(t-ps3)];
private combine4D(f:Expression(1),ps1,ps2,ps3)->{begin
  local r:=[f($0),f($0-ps1),f($0-ps2),f($0-ps3)];
  $0.isNumericList
  ? r.transpose
  : r;
end};

private f4(factors:NumericList,phase:Int)->
    combine4D(factors.each(a,0,a).newFourierSeries,
              phase*2*pi/7,phase*4*pi/7,phase*6*pi/7);

private df4dt(factors:NumericList,phase:Int)->
    combine4D(factors.each(a,[0,0],[a*(2*index+1),0]).newFourierSeries,
              phase*2*pi/7,phase*4*pi/7,phase*6*pi/7);

sampleCurve(factors:NumericList,phase:Int,pointsInTime:NumericList)->f4(factors,phase)(pointsInTime);

private sampleCurve(coeff:CurveCoefficients,sampleCount:Int)->sampleCurve(coeff[KEY_KOEFF],coeff[KEY_PHASE],[0..sampleCount]/sampleCount*2*pi);

sampleCurve(coeff:CurveCoefficients)->coeff.sampleCurve(recommendedSampleCount(coeff));

retimeCurveByFourierCoeff(TY:Timed4DSamples,factors:NumericList,phase:Int,normalize:Boolean)->begin
  local F :=f4   (factors,phase);
  local dF:=df4dt(factors,phase);
  local absolutePrecisionThreshold:=1E-3/TY.size;
  local stepLimit:=1/TY.size;

  local retimed:=TY[1].pMap((pt)->begin
    local t:=pt[0]*2*pi;
    local p:=pt[1];
    local prevStep:=void;
    local damping:=1;
    while(abs(prevStep orElse Inf)>absolutePrecisionThreshold,begin
      local f0:=F(t);
      local df:=dF(t);
      local step:=(((p-f0)*df).agg(+)/(df.sqr.agg(+))).max(-stepLimit).min(stepLimit);
      step*=(sign(step)==sign(prevStep orElse step)
             ? damping
             : damping*=0.5);
      prevStep:=step;
      t+=step;
    end);
    [t/(2*pi),p];
  end);
  ['timedSamples'=>[TY[0],
                    normalize
                    ? TY[0] ? retimed.pMap((pt)->periodicTime(pt[0])=>pt[1])
                            : retimed.pMap(::periodicHalfCurveSample)
                    : retimed],
   'maxTimeDelta'=>abs(retimed.getInner(0)-TY[1].getInner(0)).max].toMap;
end;

findPointOnCurveMinimizing(factors:NumericList,phase:Int,toMinimize:Expression(1))->begin
  local F:=f4(factors,phase);
  local evaluateAngle:={begin
    local phi:=F($angle);
    [toMinimize(phi),
     $angle,
     phi];
  end};
  local stepSize:=2*pi*1E-2;
  local best:=([0..99]*stepSize).each(a,evaluateAngle(a),min);
  [1..20].each(run,begin
    stepSize*=0.5;
    best:=(best[1]+stepSize*[-1..1]).each(a,evaluateAngle(a),min);
  end);
  best;
end;

