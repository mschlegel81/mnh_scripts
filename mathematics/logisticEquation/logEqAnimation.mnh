USE logEqPeriodicRegions;
PERIODIC_REGIONS:='i]^T2m@sCPeQAL(DG4?<4OH?^UQ$9*+ymR%KG*i\T(:T^YzJT)r-v9,|G-x>kRlU\gmt$LW}Hn:+Sg%GnWcd0(o]_QXOuz=b1cE8Y4CvXtaAu-(pr^GbH;x/p^B.>Nb>>3-wH%0w1,`03Gq(%e{K!\\y#b/F[r-DALymVP>Me8u6,}5NW7*J>UNF;I3(&5On4FA.2GPR\Agx?2]7}BeH`5\Bd9u2[R&|7|EzKWjV-F5Ohx>&-JPMA?@If9s{?T*Dg3X/&2Y$0j10w1A!ci33IAkFuzc1/Ls1X@Wl.])}19kW6dUA]FNSR8nkB@]UTA#10yfnR:Co}1kqu<]O\9M8K,0t(Gr`RN+j{{:w%`(9Y<i55Ti^,XD!J*PLShrT_9#VP,c}>Cn#)JH=B+H#PVk\I5J>NVoWu$"c8o!HR[`b<X,e(=nk`cO/#9o!!_L;5>PvKUm)IP?ERc)N7Sb!,mHyA(j^1j<}(a;$g`?)E=y^BQ\!u{K/\X#ZJ{AB8iAB|UO[x`;{pfTUR;06(-lj;Py?GtI|%UeW{mPFZnhzb9XoqmAq(6QT?XEySOc\rKA&|X^teVF?'
  .base92decode.decompress.interpret;

FILE_NAME_FORMAT:=myPath.extractFileNameOnly&'_%4.4d.png';
STYLE:=[0..50].map((w)->'RGB'&(w/50)&',0,0 . 0.2');

datastore lastAx:=void;
datastore lastStep:=-1;
RESOLUTION_LIMIT:=isGuiStarted ? 2000 : 5000;

main->begin
  isGuiStarted OR assertUniqueInstance;
  initStart:=scriptTime;
  ax:=lastAx;
  ax.isVoid
  ? begin
      ax:=pMap([round(RESOLUTION_LIMIT*2.8)..RESOLUTION_LIMIT*4]/RESOLUTION_LIMIT,
               (a)->map(pointsOf(a),
                        (x)->[a,x])).agg(|);
      ax:=ax[sortPerm(random(ax.size))];
      ax:=group(ax,round(ax*RESOLUTION_LIMIT),::orElse).getInner(1).sort;
      log('Initialization done in ',round(scriptTime-initStart,1),' seconds');
    end
  : void;
  PERIODIC_REGIONS[sortPerm(PERIODIC_REGIONS.getInner(1)-PERIODIC_REGIONS.getInner(2))].getInner(0)
  .each(x,x,x)
  .each(stepness,
    index<lastStep
    ? void
    : index=lastStep
      ? begin ax:=lastAx; print('Resuming calculation...'); end
      :
  begin
    currentOutputIndex:=25*index-1;
    itStart:=scriptTime;

    ax:=
    ax.chunkMap(200)
      .pMap((chunk)->begin
         a:=chunk.getInner(0);
         x0:=
         x1:=chunk.getInner(1);
         x1:=[1..stepness].each(iterationStep,x1:=a*x1*(1-x1),trailing);
         [a,x0,x1].transpose;
       end)
      .agg(|);


    bars:=
    begin
      tmp:=PERIODIC_REGIONS.filter((b)->stepness mod b[0]=0).each(b,[b[0]=stepness,[[b[1],0],[b[2],1]]]);
      [(!tmp.getInner(0)).agg(or) ? [tmp.getInner(1)[!tmp.getInner(0)].agg(|),'box 0 fs RGB0.9,0.9,1'] : void,
         tmp.getInner(0) .agg(or) ? [tmp.getInner(1)[ tmp.getInner(0)].agg(|),'box 0 fs RGB0.8,0.8,1'] : void];
    end;

    a :=ax.getInner(0);
    x0:=ax.getInner(1);
    x1:=ax.getInner(2);
    printf('Iterated x%-5s in %6.2fs for %s points',stepness,scriptTime-itStart,a.size);
    itStart:=scriptTime;

    ax:=[a,x1].transpose;
    setOptions(["x0"=>2.8,"x1"=>4,"y0"=>0,"fontsize"=>6,"autoscaleX"=>false,"autoscaleY"=>false,"axisStyleX"=>1,"axisStyleY"=>1].toMap);
    ([0..24]/25*pi)
    .toIterableExpression
    .pMap((t)->begin
      wx:=0.5-0.5*cos(t);
      wv:=4*50*0.5*sin(t);
      speedGroups:=round(abs(x1-x0)*wv);//.map((g)->min(g,50));
      tooLarge:=ord(speedGroups>50);
      speedGroups:=speedGroups*(1-tooLarge)+50*tooLarge;

      points:=[a,x0*(1-wx)+x1*wx].transpose;
      points.group(speedGroups)
      .sort
      .reverseList
      .each(speedGroup,[speedGroup[1],STYLE[speedGroup[0]]]);
    end)
    .each(plotSet,begin
      plot();
      bars   .each(row,addPlot@row);
      plotSet.each(row,addPlot@row);
      drawTextAbsolute(0.02,0.95,'Steps: '&stepness,'TL',12);//,[1,1,1],[0.5,0.5,1]);
      isGuiStarted
      ? addAnimationFrame
      : begin
          outFile:=FILE_NAME_FORMAT.format(currentOutputIndex+=1);
          print('Writing ',outFile);
          renderToFile(outFile,1296,1080,true);
        end;
    end);
    printf('Posted plots    in %6.2fs',scriptTime-itStart) ;
    isGuiStarted
    ? display
    : begin
        lastStep:=index;
        lastAx:=ax;
        writeDataStores;
        print('Datstores updated at ',formatTime(systime));
      end;
    print;
  end);

end;

