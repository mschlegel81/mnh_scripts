orbits:=[1,2,4,8,3,6,16,6,5,12,10,12,32,12,10,4,5,7,24,24,20,20,8,8,7,24,10,14,9,64,24,10,16,14,20,8,18,14,9,48,48,14,20,40,6,48,16,9,40,40,7,18,48,16,20,16,28,18,9,28];

stepcounts:=begin
  local x:=1;
  orbits.each(o,x:=x*o div gcd(x,o)).unique;
end;

SAMPLE_COUNT:=isGuiStarted ? 100000 : 2000000;
FILE_NAME_FORMAT:=myPath.extractFileNameOnly&'_%4.4d.png';
STYLE:=[0..50].map((w)->'RGB'&(w/50)&',0,0 . 0.2');
BAR_STYLE:=[0..50].map((w)->'box 0 fs RGB'&(0.5+w/50*0.5)&','&(0.5+w/50*0.5)&',1');
BAR_PRECISION:=500;

datastore lastAx:=void;
datastore lastStep:=-1;

main->begin
  isGuiStarted OR assertUniqueInstance;
  local initStart:=scriptTime;
  local ax:=lastAx;
  ax.isVoid
  ? begin
      [(4-random(SAMPLE_COUNT/4))|(4-0.5*random(3*SAMPLE_COUNT/4)),random(SAMPLE_COUNT)]
        .transpose
        .chunkMap(200)
        .pMap((chunk)->begin
           local a:=chunk.getInner(0);
           local x:=chunk.getInner(1);
           [1..isGuiStarted ? 100 : 1000].each(iterationStep,begin x:=a*x*(1-x); void; end);
           [a,x].transpose;
         end)
        .agg(|);
      ax:=group(ax,round(ax*5000),::orElse).getInner(1);
      while(ax.size<SAMPLE_COUNT,
        ax:=sort(ax|(ax.size.random.sortPerm.head(SAMPLE_COUNT-ax.size).each(i,ax[i]+(0.5-random)/2500))).filter((p)->p[0]<4));
      ax:=group(ax,round(ax*5000),::orElse).getInner(1).sort;
      log('Initialization done in ',round(scriptTime-initStart,1),' seconds');
    end
  : void;
  orbits//.each(o,o in orbits.head(index) ? void : o)
  .each(x,x,x,x,x)
  .each(stepness,
    index<lastStep
    ? void
    : index=lastStep
      ? begin ax:=lastAx; print('Resuming calculation...'); end
      :
  begin
    local currentOutputIndex:=25*index-1;
    local itStart:=scriptTime;

    ax:=
    ax.chunkMap(200)
      .pMap((chunk)->begin
         local a:=chunk.getInner(0);
         local x0:=
         local x1:=chunk.getInner(1);
         [1..stepness].each(iterationStep,begin x1:=a*x1*(1-x1); void; end);
         [a,x0,x1].transpose;
       end)
      .agg(|);

    local a :=ax.getInner(0);
    local x0:=ax.getInner(1);
    local x1:=ax.getInner(2);
    printf('Iterated x%-5s in %6.2fs for %s points',stepness,scriptTime-itStart,a.size);
    itStart:=scriptTime;
    local bars:=
    begin
      local steadiness:=group(abs(x1-x0),floor(a*BAR_PRECISION))
                        .map((g)->[g[0],g[1].euklideanNorm/sqrt(g[1].size)])
                        .sort;

      steadiness:=steadiness.getInner(0).group(steadiness.getInner(1).map((dx)->min(50,floor(dx*1000))))
        .each(g,begin
           local indexes:=g[1];
           local i0:=indexes[0];
           local i1:=indexes[0]-1;
           indexes:=indexes.each(idx,
             i1=idx-1
             ? begin i1:=idx; void; end
             : begin
                 local out:=[i0,i1];
                 i0:=i1:=idx;
                 out;
               end);
           indexes.trailing==[i0,i1]
           ? void
           : indexes||=[i0,i1];
           [indexes.each(i,[i[0]/BAR_PRECISION,-0.1],[(i[1]+1)/BAR_PRECISION,1.1]),BAR_STYLE[g[0]]];

         end);
    end;
    printf('Calculated bars in %6.2fs',scriptTime-itStart);
    itStart:=scriptTime;


    ax:=[a,x1].transpose;
    setOptions(["x0"=>3,"x1"=>4,"y0"=>0,"fontsize"=>6,"autoscaleX"=>false,"autoscaleY"=>false,"axisStyleX"=>1,"axisStyleY"=>1].toMap);
    ([0..24]/25*pi)
    .toIteratableExpression
    .pMap((t)->begin
      local wx:=0.5-0.5*cos(t);
      local wv:=4*50*0.5*sin(t);
      local speedGroups:=round(abs(x1-x0)*wv).map((g)->min(g,50));
      local points:=[a,x0*(1-wx)+x1*wx].transpose;
      points.group(speedGroups)
      .sort
      .reverseList
      .each(speedGroup,[speedGroup[1],STYLE[speedGroup[0]]]);
    end)
    .each(plotSet,begin
      plot();
      bars   .each(row,addPlot@row);
      plotSet.each(row,addPlot@row);
      drawTextAbsolute(0.02,0.95,'Steps: '&stepness,'TL',12);//,[1,1,1],[0.5,0.5,1]);
      isGuiStarted
      ? addAnimationFrame
      : begin
          local outFile:=FILE_NAME_FORMAT.format(currentOutputIndex+=1);
          print('Writing ',outFile);
          renderToFile(outFile,1080,1080,true);
        end;
    end);
    printf('Posted plots    in %6.2fs',scriptTime-itStart) ;

    isGuiStarted
    ? display
    : begin
        lastStep:=index;
        lastAx:=ax;
        writeDataStores;
        print('Datstores updated at ',formatTime(systime));
      end;
    print;
  end);

end;

