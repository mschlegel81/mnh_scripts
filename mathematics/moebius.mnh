type MoebiusTransformationParameters(L:List(4))->L.each(p,p.isNumericList(2) AND
                                  !(p.isInfinite or p.isNan).agg(OR),AND);

private m(x,y)->[(x*y).agg(-),(x*y.reverseList).agg(+)];
private d(x,y)->x.m(y*[1,-1])/(y.sqr.agg(+));

transform(p:MoebiusTransformationParameters,x:NumericList(2))->
  // T(x) = (p[0]*x+p[1])/(p[2]*x+p[3]);
  (p[0].m(x)+p[1]).d(p[2].m(x)+p[3]);

transform(p:MoebiusTransformationParameters,q:MoebiusTransformationParameters)->
  // (p[0]*Q+p[1])/(p[2]*Q+p[3])
  // =((p[0]*q[0]+q[2]*p[1])*x+q[3]*p[1]+p[0]*q[1]) /
  //  ((p[2]*q[0]+q[2]*p[3])*x+q[3]*p[3]+p[2]*q[1])
  [p[0].m(q[0])+p[1].m(q[2]),
   p[0].m(q[1])+p[1].m(q[3]),
   p[2].m(q[0])+p[3].m(q[2]),
   p[2].m(q[1])+p[3].m(q[3])].toMoebiusTransformationParameters;

transform(p:MoebiusTransformationParameters,...)->p.transform(transform@...);

inverse(p:MoebiusTransformationParameters)->[p[3],-p[1],-p[2],p[0]].toMoebiusTransformationParameters;

subTransformation(p:MoebiusTransformationParameters,t)->begin
  local f1:=[[1,0]                    ,p[3].d(p[2])*t,[0,0],[1,0]       ].toMoebiusTransformationParameters;
  local f2:=[[0,0]                    ,[1,0]       ,[1,0],[0,0]       ]     .toMoebiusTransformationParameters;
  local f3:=([[1,0],[0,0],[0,0],[1,0]]*(1-t)+
             [p[1].m(p[2])-p[0].m(p[3]),[0,0]       ,[0,0],p[2].m(p[2])]*t).toMoebiusTransformationParameters;
  local f4:=[[1,0]                    ,p[0].d(p[2])*t,[0,0],[1,0]       ].toMoebiusTransformationParameters;
  transform(f4,f3,f2,f1);
end;

circleBy3Points(u:NumericList(2),v:NumericList(2),w:NumericList(2))->begin
  local A:=u[0]*(v[1]-w[1])-u[1]*(v[0]-w[0])+v[0]*w[1]-w[0]*v[1];
  local B:=(u[0]^2+u[1]^2)*(w[1]-v[1])+(v[0]^2+v[1]^2)*(u[1]-w[1])+(w[0]^2+w[1]^2)*(v[1]-u[1]);
  local C:=(u[0]^2+u[1]^2)      *(v[0]-w[0])+(v[0]^2+v[1]^2)*(w[0]-u[0])+(w[0]^2+w[1]^2)*(u[0]-v[0]);
  local D:=(u[0]^2+u[1]^2)*(w[0]*v[1]-v[0]*w[1])+
           (v[0]^2+v[1]^2)*(u[0]*w[1]-w[0]*u[1])+
           (w[0]^2+w[1]^2)*(v[0]*u[1]-u[0]*v[1]);
  [[B,C],sqrt((B^2+C^2-4*A*D))]/(-2*A);
end;

transformCircle(p:MoebiusTransformationParameters,circleCenter:NumericList(2),circleRadius)->begin
  circleBy3Points@(
  map([[1.0,0],[-0.5000000000000004,-0.86602540378443837],[-0.49999999999999978,0.8660254037844388]]*circleRadius,
//  map([[0.0,1.0],[0.8660254037844388,-0.49999999999999978],[-0.86602540378443837,-0.5000000000000004]]*circleRadius,
      {$d+circleCenter}).map({p.transform($x)}));
end;

CIRCLE_POINTS:=([0..99]/100*2*pi).map({[sin($x),cos($x)]});

transformCircle2(p:MoebiusTransformationParameters,circleCenter:NumericList(2),circleRadius)->begin
//  local N:=p[0].d(p[2])-p[1].d(p[3]);
  local N:=circleCenter+p[3].d(p[2]);
  N/=N.euklideanNorm;
  local x0:=p.transform(circleCenter+circleRadius*N);
  local x1:=p.transform(circleCenter-circleRadius*N);
  [(x0+x1)*0.5,(x1-x0).euklideanNorm*0.5];
end;


T0:=[[1,0],[0,0],[0,0],[1,0]].toMoebiusTransformationParameters;
T1:=[[0.1,0],[0,0],[0.9,0],[1,0]].toMoebiusTransformationParameters;

POINTS:=([1..4]/4).each(radius,([0..100]/100*2*pi).map({radius*[sin($x),cos($x)]}), [[Nan,Nan]],|) |
        ([0..15]/16*2*pi).each(a,begin
          local f:=[sin(a),cos(a)]/20;
          [-20..20].map({f*$x});
        end,[[Nan,Nan]],|);

CIRCLES:=[[[0,0],1],
          [[-0.5,0],0.5],
          [[ 0.5,0],0.5]];

begin
  ([0..100]/100).each(q,begin
    local T:=(T0*(1-q)+T1*q).toMoebiusTransformationParameters;
    POINTS .map({T.transform($p)}).plot;
    CIRCLES.map({T.transformCircle@$c}).each(c,c[0]-c[1],c[0]+c[1]).addPlot('ellipse f');
    addPlot([-T[1].d(T[0])],'blue 2 .');
    addAnimationFrame;
  end);

end;

//begin
//  local randomTrafo:={[0..3].map({2*random(2)-0.5}).toMoebiusTransformationParameters};
//  local A:=randomTrafo();
//  local P:=[-3..3].cross([-3..3]);
//  [0..99].each(step,begin
//    local B:=A.subTransformation(step/99);
//    //P:=P.each(p,A.transform(p),B.transform(p),C.transform(p));
//    //P:=P[sortPerm(random(count*3)).head(count)];
//    P.each(p,B.transform(p));
//  end).transpose.map({addPlot($p,'black')});
//
//end;



