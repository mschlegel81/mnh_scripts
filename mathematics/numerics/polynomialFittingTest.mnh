USE downhillSimplex;

X_SAMPLES:=[-50..50]/10;
Y_SAMPLES:=sin(X_SAMPLES);

err(poly:NumericList)->begin
  local X:=1;
  euklideanNorm(poly.each(coeff,coeff*X,begin X*=X_SAMPLES; void; end,+)-Y_SAMPLES);
end;

polyFunction(poly:NumericList)->
  poly.each(coeff,index = 0 ? coeff :
                  index = 1 ? coeff*{$x} :
                              coeff*{$x}^index,+);

begin
  setOptions(["x0"=>X_SAMPLES.min,
              "x1"=>X_SAMPLES.max,
              "y0"=>Y_SAMPLES.min-2*(Y_SAMPLES.max-Y_SAMPLES.min),
              "y1"=>Y_SAMPLES.max+2*(Y_SAMPLES.max-Y_SAMPLES.min),
              "autoscaleX"=>false,
              "autoscaleY"=>false].toMap);

  plot(X_SAMPLES,Y_SAMPLES,'. l 0.5');

  local coeff:=[0,0];
  local R:=downhillSimplex(::err,coeff,1E-1,1E-5);
  print(coeff.size,' ',R[0],' : ',R[1]);
  coeff:=R[1];
  addPlot(polyFunction(coeff),X_SAMPLES.min,X_SAMPLES.max,1000);
  [1..20].each(step,begin
    coeff|=[0,0];
    R:=downhillSimplex(::err,coeff,1E-1,1E-5);
    print(coeff.size,' ',R[0],' : ',R[1]);
    coeff:=R[1];
    addPlot(polyFunction(coeff),X_SAMPLES.min,X_SAMPLES.max,1000);
  end);

end;

