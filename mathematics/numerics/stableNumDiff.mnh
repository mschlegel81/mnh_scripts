ducktype OddInt(i:Int)->(i and 1)=1;

memoized
abstractDifferentiation(k=0)->[[0,1,0]];
abstractDifferentiation(k:OddInt)->
  abstractDifferentiation(k-1).each(d,[d[0]+1, d[1]/2,d[2]-1],
                                      [d[0]-1,-d[1]/2,d[2]-1]);
abstractDifferentiation(k:Int)->
  abstractDifferentiation(k-2).each(d,[d[0]+1,   d[1],d[2]-2],
                                      [d[0]  ,-2*d[1],d[2]-2],
                                      [d[0]-1,   d[1],d[2]-2]);

@SuppressUnusedWarning
D(f:Expression(1),k=0  ,maxWeight:Numeric)->f;
D(f:Expression(1),k:Int,maxWeight:Numeric)->begin
  local params:=abstractDifferentiation(k);
  local hPower:=params.head.trailing;
  params:=params.map({$x.leading}).group(0,{$x.head|($x.tail+$y.tail)});
  local maxWeightFactor:=params.getInner(1).abs.max;

  // maxWeightFactor*h^hPower = maxWeight
  //                 h^hPower = maxWeight/maxWeightFactor
  //                 h        = (maxWeight/maxWeightFactor)^(1/hPower);
  local h:=(maxWeight/maxWeightFactor)^(1/(hPower-1));
  local ph:=h^hPower;
  params.each(p,p[1]=0
                ? void
                : (p[0]==0 ? f : f({$x}+h*p[0]))*(p[1]*ph),+);
end;



x0:=0.000001;
AnalyticDSin(k:Int)->[::sin,::cos,-::sin,-::cos][k mod 4];



plot   (abs(AnalyticDSin(1)(x0)-{D(::sin,1,$h)(x0)}),1E8,1E18,1000);
addPlot(abs(AnalyticDSin(2)(x0)-{D(::sin,2,$h)(x0)}),1E8,1E18,1000);
addPlot(abs(AnalyticDSin(3)(x0)-{D(::sin,3,$h)(x0)}),1E8,1E18,1000);
addPlot(abs(AnalyticDSin(4)(x0)-{D(::sin,4,$h)(x0)}),1E8,1E18,1000);
addPlot(abs(AnalyticDSin(5)(x0)-{D(::sin,5,$h)(x0)}),1E8,1E18,1000);

//1E5,1E7,1E9,1E10,1E11
