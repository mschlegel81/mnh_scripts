private sumand(n,k)->4*powMod(16,n-k,8*k+1)/(8*k+1)
                    -2*powMod(16,n-k,8*k+4)/(8*k+4)
                    -  powMod(16,n-k,8*k+5)/(8*k+5)
                    -  powMod(16,n-k,8*k+6)/(8*k+6);
//see also: https://en.wikipedia.org/wiki/Bailey%E2%80%93Borwein%E2%80%93Plouffe_formula
private calcPiHexDigit(n)->begin
  //Calculate the n-th hexadecimal digit of pi
  d:=[0..n].each(k,sumand(n,k),+);
  (d:=floor(d*16) mod 16)<0 ? d+16 : d;
end;

private datastore calculatedDigitsOfPi:=[];
private saveInterval:=60;

private saveAfterAppendDigit(digit:Int)->begin
  nextTimeToSave:=scriptTime+saveInterval;
save;
  calculatedDigitsOfPi|=digit;
  scriptTime>nextTimeToSave
  ? begin
      writeDataStores;
      nextTimeToSave:=scriptTime+saveInterval;
      true;
    end
  : false;
end;

LOG16_10:=ln(16)/ln(10);

private hexToDecimal(hexDigits:IntList)->
  //Transform hexadecimal digits to decimal form:
  //  - compose to one big integer
  //  - multiply in order to normalize to base 10
  //  - use as digits after decimal point
  '3.'&(hexDigits.composeDigits(16)*10^floor(hexDigits.size*ln(16)/ln(10))).shiftRight(4*hexDigits.size);

private printNewDigits(nextHexDigit:Int)->begin
  currentSum:=calculatedDigitsOfPi.composeDigits(16);
  currentHexDigits:=calculatedDigitsOfPi.size;
  currentDecimalDigits:=0;
  printDirect('3.');
save;
  currentSum:=currentSum*16+nextHexDigit;
  currentHexDigits+=1;
  newDecimalDigits:=floor(currentHexDigits*LOG16_10-1);
  newDecimalDigits>currentDecimalDigits
  ? shiftRight(currentSum*10^newDecimalDigits,4*currentHexDigits).mod(10^(newDecimalDigits-currentDecimalDigits)).printDirect
  : void;
  currentDecimalDigits:=newDecimalDigits;
  nextHexDigit;
end;

calculate(quit:Expression(0),actionOnNewDigit:Expression(1))->begin
  log("Evaluation starts",
       "\ninitial state : ",initialDigits:=calculatedDigitsOfPi.size,' (hex)',
       "\n                ",floor(calculatedDigitsOfPi.size*LOG16_10),' (decimal)');
  startOfCalculation:=scriptTime;
  digitGen:=
  rangeGenerator(calculatedDigitsOfPi.size)
    .pMap(::calcPiHexDigit);
  while quit().isVoid do begin
    nextDigit:=digitGen();
    actionOnNewDigit(nextDigit);
    saveAfterAppendDigit(nextDigit)
    ? log("Intermediate update",
          "\ncurrent digits: ",calculatedDigitsOfPi.size,' (hex)',
          "\n                ",floor(calculatedDigitsOfPi.size*LOG16_10),' (decimal)',
          "\ncalculated ",(calculatedDigitsOfPi.size-initialDigits)/(scriptTime-startOfCalculation),' digits per second')
    : void;
  end;
  digitGen:=void;
  log("Evaluation finished",
      "\ncurrent digits: ",calculatedDigitsOfPi.size,' (hex)',
      "\n                ",floor(calculatedDigitsOfPi.size*LOG16_10),' (decimal)',
      "\ncalculated ",(calculatedDigitsOfPi.size-initialDigits)/(scriptTime-startOfCalculation),' digits per second');
end;

//*Calculates digits of pi until enter is pressed
main->calculate(async(::ask,['Press Enter to quit']),::printNewDigits);

//*Print pi, as far as calculated
main('show')->begin
  print(calculatedDigitsOfPi.hexToDecimal);
  print("current digits:\t",calculatedDigitsOfPi.size,"\t(hex)",
        "\n\t",floor(calculatedDigitsOfPi.size*LOG16_10),"\t(decimal)");
end;

//*Calculates the given number of digits of pi
main(numberOfDigitsToCompute)->begin
  count:=ceil(numberOfDigitsToCompute.toInt/LOG16_10);
  calculatedDigitsOfPi.size>=count
  ? print(calculatedDigitsOfPi.head(count).hexToDecimal)
  : calculate({calculatedDigitsOfPi.size<count ? void : true},(digit)->void);
end;

//*Calculates digits of pi for the given time in seconds
main('for',numberOfSeconds)->begin
  timeout:=scriptTime+numberOfSeconds.toInt;
  calculate({scriptTime<timeout ? void : true},(digit)->void);
end;
