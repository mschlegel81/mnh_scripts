USE plotUtil;
TIME_STEP_SIZE:=0.01;

//*Draw the blocks and add an animation frame
memoized draw(p0:Numeric,p1:Numeric,collisionCount:Int,block1text:String,outputFilename:String)->begin
  BLOCK_SIZE_0:=1;
  BLOCK_SIZE_1:=2;
  setPlotRangeManually(-0.1,10,-0.03,BLOCK_SIZE_1+0.25);
  setPlotPreserveAspect(true);
  setPlotAxisStyle('x',false,false,false);
  setPlotAxisStyle('y',false,false,false);
save;
  print('Updating ',outputFilename);
  plot([[p0                          ,0           ],
        [p0+BLOCK_SIZE_0             ,BLOCK_SIZE_0],
        [p1+BLOCK_SIZE_0             ,0           ],
        [p1+BLOCK_SIZE_0+BLOCK_SIZE_1,BLOCK_SIZE_1]],'box fs 0 RGB1,0.7,0.5');
  addPlot([[p0                          ,0           ],
          [p0+BLOCK_SIZE_0             ,BLOCK_SIZE_0],
          [p1+BLOCK_SIZE_0             ,0           ],
          [p1+BLOCK_SIZE_0+BLOCK_SIZE_1,BLOCK_SIZE_1]],'box 0.7 RGB0.5,0.35,0.25');
  addPlot([[0,BLOCK_SIZE_1],[0,0],[10,0]],'black l 0.5');

  drawTextAbsolute(0,1,' Collisions: '&collisionCount,11,'TL');
  drawText(p0+BLOCK_SIZE_0/2             ,BLOCK_SIZE_0/2,'1kg'     ,9,'C');
  drawText(p1+BLOCK_SIZE_0+BLOCK_SIZE_1/2,BLOCK_SIZE_1/2,block1text,9,'C');
  outputFilename=='' ? void : renderToFile(outputFilename,960,270);
end;

newCollisionSimulation(POWER:Int)->{begin
  MASS_RATIO:=100^POWER;
  BLOCK_TEXT:=POWER=0 ? '1kg' : ([1..POWER*2]*0|1).each(i,index mod 3=0<index ? '.' :void, i).reverseList.join&'kg';

  p0:= 1;
  v0:= 0;
  p1:= 2;
  v1:=-1;
  collisionCount:=0;

  restStep:=0;
  t_wall  :=0;
  t_blocks:=0;
  stepForward:={
    begin
      p0+=v0*$timestep;
      p1+=v1*$timestep;
      restStep-=$timestep;
    end};

  stepRest:={
    begin
      p0+=v0*restStep;
      p1+=v1*restStep;
      restStep:=0;
    end};

  wallBounce:={
    begin
      stepForward(t_wall);
      v0:=-v0;
      collisionCount+=1;
    end};

  w0:=2           /(1+MASS_RATIO);
  w1:=2*MASS_RATIO/(1+MASS_RATIO);
  blockBounce:={
    begin
      stepForward(t_blocks);
      u:=v0*w0+v1*w1;
      v0:=u-v0;
      v1:=u-v1;
      collisionCount+=1;
    end};
save;
  stillColliding:=(t_wall<Inf OR t_blocks<Inf);
  result:=[stillColliding,[min(10,p0),min(9,p1),collisionCount,BLOCK_TEXT,'sim'&POWER&'.png'],false];
  while restStep>0 do begin
    (t_wall   := v0<0  ? -p0    /    v0  : Inf)<
    (t_blocks := v1<v0 ? (p0-p1)/(v1-v0) : Inf)
    ? t_wall<restStep
      ? wallBounce()
      : stepRest()
    : t_blocks<restStep
      ? blockBounce()
      : stepRest();
  end;
  restStep:=TIME_STEP_SIZE;
  result;
end}.toIterableExpression;


main->begin
  sim  :=[0..7].map(::newCollisionSimulation);
  state:=[0..7].each(k,sim[k]());
  outputIndex:=0;
  maxMoving:=0;
  drawCurrentState:={begin
    outputName:=format('piCollision_%4.4d.png',outputIndex);
    fileExists(outputName) ? print('Skipping ',outputName) : begin
      [0..7].each(k,state[k,2] ? void : begin
        draw@(state[k,1]);
        state[k,2]:=true;
      end);
      print('Creating ',outputName);
      executeWorkflow([   'crop:0,2x0,4'  ,maxMoving=0 OR maxMoving>0 AND state[0,0] ? void : 'grey',           'stash:0',
          'load:sim1.png','crop:0,2x-1,3' ,maxMoving=1 OR maxMoving>1 AND state[1,0] ? void : 'grey','+stash:0','stash:0',
          'load:sim2.png','crop:0,2x-2,2' ,maxMoving=2 OR maxMoving>2 AND state[2,0] ? void : 'grey','+stash:0','stash:0',
          'load:sim3.png','crop:0,2x-3,1' ,maxMoving=3 OR maxMoving>3 AND state[3,0] ? void : 'grey','+stash:0','stash:0',
          'load:sim4.png','crop:-1,1x0,4' ,maxMoving=4 OR maxMoving>4 AND state[4,0] ? void : 'grey','+stash:0','stash:0',
          'load:sim5.png','crop:-1,1x-1,3',maxMoving=5 OR maxMoving>5 AND state[5,0] ? void : 'grey','+stash:0','stash:0',
          'load:sim6.png','crop:-1,1x-2,2',maxMoving=6 OR maxMoving>6 AND state[6,0] ? void : 'grey','+stash:0','stash:0',
          'load:sim7.png','crop:-1,1x-3,1',maxMoving=7 OR maxMoving>7 AND state[7,0] ? void : 'grey','+stash:0','stash:0'],
          'sim0.png',outputName);
    end;
    outputIndex+=1;
  end};
  drawCurrentState();
  while maxMoving<=7 do begin
    [0..maxMoving].each(k,//print(state[k,1].join(" ")),
    state[k]:=sim[k]());
    drawCurrentState();
    state[maxMoving,0] ? void : maxMoving+=1;
    //outputIndex mod 300=0 ? maxMoving+=1 : void;
  end;
  //Wait until the last one is not colliding anymore
  while state.getInner(0).agg(OR) do begin
    [0..7].each(k,state[k]:=sim[k]());
    drawCurrentState();
  end;
  //extra frames
  [0..50].each(extraFrame,begin
    [0..7].each(k,state[k]:=sim[k]());
    drawCurrentState();
  end);
end;
