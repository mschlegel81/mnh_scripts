ducktype Probability(p:Numeric)->0<=p<=1;

titForTat(M:NumericList(2),prevResponse:Probability)->
   M[0]*prevResponse+(1-M[0])*M[1];

titForTat(M:NumericList(2),prevResponse:Boolean)->
  random<=M[0] ? prevResponse : random<=M[1];

SCORE_11:=[-1,-1]+3/2;
SCORE_00:=[-2,-2]+3/2;
SCORE_10:=[-3, 0]+3/2;
SCORE_01:=[ 0,-3]+3/2;

SCORE:=[[true , true]=>SCORE_11,
        [false,false]=>SCORE_00,
        [true ,false]=>SCORE_10,
        [false, true]=>SCORE_01].toMap;

score(L:NumericList(2))->
  (1-L[0])*(SCORE_00*(1-L[1])+
            SCORE_01*   L[1])+
     L[0] *(SCORE_10*(1-L[1])+
            SCORE_11*   L[1]);

scoreRand(ModelA,ModelB,rounds>=1)->begin
  local res:=[true,true];
  [0..rounds-1].map(()->
    res:=[titForTat(ModelA,res[1]),
          titForTat(ModelB,res[0])])
  .elementFrequency.each(f,SCORE[f[0]]*f[1],+)/rounds;
end;

scoreProb(ModelA,ModelB,rounds>=1)->begin
  local res:=[1,1];
  [0..rounds-1].map(()->
    res:=[titForTat(ModelA,res[1]),
          titForTat(ModelB,res[0])])
  .map(::score).transpose;
end;

modelToString(p:NumericList(2))->p[0]=1 ? "p[tft]=\t1\t\t\t" :
                                 p[0]=0 ? format("\t\tp[nice]=\t%0.3f\t",p[1]) :
                                 format("p[tft]=\t%0.3f\tp[nice]=\t%0.3f\t",p[0],p[1]);

runningAverage(X:NumericList)->begin
  local sum:=0;
  X.each(x,(sum+=x)/(index+1));
end;

testSquarePopulation->
begin
  local rounds:=100;
  local h:=      0.5/10;
  local M:=cross([0..10],
                 [0..10])/
                     10;
  local pairs:=cross([0..M.size-1],[0..M.size-1]).filter((p)->p.agg(<));

  local progressDot:=print(repeat("------------------------|",4)) orElse round([1..100]*pairs.size/100)-1;

  local scores:=
  pairs
    .pEach(pair,begin
       index in progressDot ? printDirect('.') : void;
       local s :=scoreProb @(M[pair]|rounds);
       [[pair[0],s[0]],
        [pair[1],s[1]]];
     end,|)
    .group(0,::+)
    .map({$g[0]=>runningAverage($g[1,1])});
  setOptions(["axisStyleX"=>0,"axisStyleY"=>0].toMap);
  clearAnimation;
  [0..rounds-1].each(r,begin
    plot();
    local highscore:=scores.getInner(1).getInner(r).max;
    local lowScore :=scores.getInner(1).getInner(r).min;
    scores.map((s)->addPlot([M[s[0]]-h,M[s[0]]+h],'box 0 fs HUE'&(2/3*(s[1,r]-lowScore)/(highscore-lowScore))));
    drawText(0,0,"PURE\nEVIL");
    drawText(0,1,"PURE\nGOOD");
    drawText(0,0.5,"COIN\nFLIP");
    drawText(0.5,0,"50% bad\nTit for Tat");
    drawText(0.5,1,"50% nice\nTit for Tat");
    drawText(1,0.5,"TIT\nFOR\nTAT");
    addAnimationFrame;
  end);

  showTable(
  [['TitForTat','Nice']|('score #'&[1..rounds])]|
  scores.map((s)->M[s[0]]|s[1]),'Scoring',1,2);
end;

testTrianglePopulation->
begin
  local rounds:=100;
  local h:=                0.5/20;
  local PlotPoints:=(cross([0..20],
                           [0..20])/
                               20)
  .filter((x)->abs(x[1]-0.5)*2+x[0]<=1);

  local Models:=PlotPoints.map((x)->x[1]=0.5 ? x : [x[0],0.5+(x[1]-0.5)/(1-x[0])]);

  local pairs:=cross([0..Models.size-1],[0..Models.size-1]).filter((p)->p.agg(<=));

  local progressDot:=print(repeat("------------------------|",4)) orElse round([1..100]*pairs.size/100)-1;

  local scores:=
  pairs
    .pEach(pair,begin
       index in progressDot ? printDirect('.') : void;
       local s :=scoreProb @(Models[pair]|rounds);
       [[pair[0],s[0]],
        [pair[1],s[1]]];
     end,|)
    .group(0,::+)
    .map({$g[0]=>runningAverage($g[1,1])});

  setOptions(["axisStyleX"=>0,"axisStyleY"=>0].toMap);
  clearAnimation;
  [0..rounds-1].each(r,begin
    plot();
    local highscore:=scores.getInner(1).getInner(r).max;
    local lowScore :=scores.getInner(1).getInner(r).min;
    scores.map((s)->addPlot([PlotPoints[s[0]]-h,PlotPoints[s[0]]+h],'box 0 fs HUE'&(2/3*(s[1,r]-lowScore)/(highscore-lowScore))));
    drawText(0,0,"PURE\nEVIL");
    drawText(0,1,"PURE\nGOOD");
    drawText(0,0.5,"COIN\nFLIP");
    drawText(0.5,0.25,"50% bad\nTit for Tat");
    drawText(0.5,0.75,"50% nice\nTit for Tat");
    drawText(1,0.5,"TIT\nFOR\nTAT");
    addAnimationFrame;
  end);

  showTable(
  [['TitForTat','Nice']|('score #'&[1..rounds])]|
  scores.map((s)->Models[s[0]]|s[1]),'Scoring',1,2);
end;

scoreSort(population)->population.size=1 ? population : begin
  local ranked:=
  population[sortPerm(random(population.size))] //random ordering
  .chunkMap(2)                                  //group to pairs
  .pMap((pair)->begin                           //score each pair
    local A:=pair[0];
    local B:=pair[1];
    B.isVoid ? [[A,Inf]] : begin
      local score:=scoreProb(A,B,30);
      [[A,score[0].agg(+)/score[0].size],
       [B,score[1].agg(+)/score[1].size]];
    end;
  end)
  .flatMap
  .toList
  .sort(1)
  .getInner(0);
  ranked.head(ranked.size div 2) | scoreSort(ranked.tail(ranked.size div 2));
end;

convexHull(points:List)->begin
  local rest:=points.sort;
  local P:=rest.head(1);

  while(rest.size>0,begin
    local dp:=P.size==1 ? [0,1] : -P.trailing(2).agg(-); dp/=dp.euklideanNorm;
    local q:=P.trailing;
    local i:=rest.map((p)->begin local delta:=p-q; (delta/delta.euklideanNorm*dp).agg(+); end).argMax;
    P||=rest[i];
    i==0
    ? return P
    : rest[i]:=void;
  end);
  P;
end;

evolutionGame(poolSize>=10                                 ,generations,poolDisplay:Expression(1))->
evolutionGame([random(poolSize),random(poolSize)].transpose,generations,poolDisplay);

evolutionGame(initialPool:List,generations,poolDisplay:Expression(1))->begin
  local pool:=initialPool;
  local K:=pool.size-1;
  local coolDown:=1E-3^(1/(generations-1));
  print('Starting evolution game with a pool size of ',pool.size);
  local toCross:=sqrt(K/3).ceil;
  print('  The best ',toCross+1,' individuals will procreate each round, ');
  toCross:=[K..K-toCross].cross([K..K-toCross]).filter({$x[0]<$x[1]});
  print('  replacing the ',toCross.size,' worst individuals');
  pool[toCross.size]:=[1,random]; //Force pure Tit-For-Tat once
  [1..generations].each(generation,begin
    poolDisplay(pool);
    pool:=pool.scoreSort;
    assert(pool.size=K+1);
    toCross
    .each(parent,(pool[parent[0]]+pool[parent[1]])*0.5+coolDown^generation*(random(2)*2-1))
    .each(offspring,pool[index]:=[max(0,min(1,offspring[0])),
                                  max(0,min(1,offspring[1]))]);
  end);
  pool;
end;


//begin
//  resetOptions;
//  [0..200].each(run,begin
//    local initialPool:=[0.5+0.5*(1-2*random(32)),
//                        0.5+0.5*(1-2*random(32))].transpose;
//    plot();
//    local counter:=-1;
//    evolutionGame(initialPool,local steps:=100,{begin
//      local hull:=convexHull($x);
//      addPlot(hull,'polygon f HUE'&(counter+=1)/steps*2/3);
//      $x;
//    end}.trailing).trailing.{print('Best: ',$x)};
//    addAnimationFrame;
//    postDisplay;
//  end);
//end;


[1..50].each(r,begin
  plot;
  [0..399].pEach(scan,
  begin
    local M0:=([scan mod 20,scan div 20]+0.5)/20;
    local way:=[M0];
    while(!M0.isVoid AND way.size<4,begin
//      M0:=M0;
      way||=M0;
      local D:=[scoreProb(M0+[1E-3,0],M0,r).map((S)->S.agg(+)).agg(-),
                scoreProb(M0+[0,1E-3],M0,r).map((S)->S.agg(+)).agg(-)];
      D*=1E-2/D.euklideanNorm;
      M0+=D;
      M0[0].isProbability AND
      M0[1].isProbability ? void : M0:=void;


      //M0:=
      //([0..15]/8*pi)
      //.map((phi)->M0+1E-2*[cos(phi),sin(phi)])
      //.filter((M)->M[0].isProbability AND M[1].isProbability)
      //.each(M1,begin
      //   local score:=scoreProb(M0,M1,r).map((S)->S.agg(+));
      //   score[1]>score[0]
      //   ? [score[1],M1]
      //   : void;
      // end,max);
    end);
    way.addPlot('red 0.5');
    addPlot(way.trailing(1),'red .');
  end);
  addAnimationFrame;
  display;
end);
