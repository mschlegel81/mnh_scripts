main->begin
  bestCount100:=0;
  bestCount10000:=0;
  rangeGenerator(1)
  .map((k)->
    cross([0..k],[0..k])
    .filter((x)->x.agg(+)<=k AND x.agg(<))
    .map((x)->x|(k-x.agg(+)))
    .sort)
  .flatMap
  .filter((abc)->(abc[1]>0 OR abc[2]>0))
  .pMap((abc)->begin
    n:=abc[0]+[1..100]*abc[1]+[1..100]²*abc[2];
    abc=>n.isPrime.trueCount;
    end)
  .map((set)->begin
     set[1]>=bestCount100*0.9
     ? begin
         bestCount100:=max(set[1],bestCount100);
         set;
       end
     : void;
   end)
  .pMap((abc)->begin
      n:=abc[0,0]+[101..10000]*abc[0,1]+[101..10000]²*abc[0,2];
      n:=n.isPrime;
      [abc[0],abc[1],abc[1]+n.head(900).trueCount,abc[1]+n.trueCount];
    end)
  .agg((set)->begin
       printf("%s+%sn+%sn² contains\t%5.2f%% primes in the first   100 samples"&
                                "\n\t%5.2f%% primes in the first  1000 samples"&
                                "\n\t%5.2f%% primes in the first 10000 samples %s",
       set[0,0],set[0,1],set[0,2],set[1],set[2]/10,set[3]/100,
       set[3]>=bestCount10000 ? '(*)' : '');

       bestCount10000:=max(set[3],bestCount10000);


   end);

end;
//  1+40n+2n² contains 43.7% primes
//
//
////a+c*n² <= MP
////    n  <= sqrt((MP-a)/c)
//




