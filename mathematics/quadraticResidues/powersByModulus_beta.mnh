uniqueRemainders(modulus:Int,power:Int)->powMod([0..modulus-1],power,modulus).toSet;


showAsPlotAndTable->begin
  setOptions(["x0"=>1E-100,"y0"=>1E-100,"preserveAspect"=>false,"logscaleX"=>true,"logscaleY"=>true].toMap);
  local X:=[2..1000] .futureMap({[$x,$x.uniqueRemainders(2)]}).pMap({[$x[0],$x[1].size/$x[0],$x[1].size,factorize($x[0]).join("*"),$x[1].sort.join(",")]});
  plot(X.getInner(0),X.getInner(1),'0.5 .');
  showTable(([['k','ratio','remainders','factors','dividers']]|X),
             true);
end;

isAbundant(i:Int)->i.factorize.subSets.each(s,s.agg(*) orElse 1,+)>2*i;

calculateContinuous->
begin
  setOptions(["x0"=>1E-100,"y0"=>1E-100,"preserveAspect"=>false,"logscaleX"=>true,"logscaleY"=>true].toMap);
  local upToHere:=[];
  local abundantDots :=[[Nan,Nan]];
  local deficientDots:=[[Nan,Nan]];
  local primeDots:=[[2,1]];
  local best:=Inf;
  rangeGenerator(2).futureMap({$x=>$x.uniqueRemainders(2).size/$x}).each(entry,
    entry[1]<best
    ? begin
        upToHere|=[entry];
        plot(deficientDots,'0.5 . red');
        addPlot(abundantDots,'0.5 . blue');
        addPlot(upToHere,'2 black');
        addPlot(primeDots,'1 black');
        display;
        best:=entry[1];
        printf('%5d',entry[0]);
      end
    : begin
        (entry[0] and 1)=0 AND isPrime(entry[0] div 2) ?
        primeDots|=[entry] :
          isAbundant(entry[0]) ? abundantDots |=[entry]
                               : deficientDots|=[entry];
        void;
      end);
end;

calculateContinuous;

