ducktype Identifier(id:String)->id.matches('^\$?\D\w*$') OR id.matches('^\$\d+$');
ducktype IdentifierFreqMap(m:Map)->m.each(entry,entry[0].isIdentifier AND entry[1].isInt AND entry[1]>=0,AND);
type Polynomial(P:Map)->P.each(entry,entry[0].isIdentifierFreqMap AND entry[1].isNumeric,AND);

poly(id:String)->[[id=>1].toMap=>1].toMap.toPolynomial;
poly(value:Numeric)->[[].toMap=>value].toMap.toPolynomial;

private canonicalForm(m:Iterable)->
  m.each(entry,[entry[0].filter({$x[1]>0}).toMap,entry[1]])
   .group(0)
   .each(g,[g[0],g[1].getInner(1).agg(+)])
   .filter({$x[1]!=0})
   .toMap
   .toPolynomial;

sqr(P:Polynomial)->P*P;

OPERATOR_PLUS(P:Polynomial,Q:Polynomial)->mergeMaps(P,Q,::+).canonicalForm;
OPERATOR_MINUS(P:Polynomial,Q:Polynomial)->P.getInner(0).union(Q.getInner(0)).each(key,[key,(P[key] orElse 0)-Q[key]]).canonicalForm;
OPERATOR_MULT(P:Polynomial,Q:Polynomial)->P.cross(Q).each(pair,begin
  p:=pair[0];
  q:=pair[1];
  [mergeMaps(p[0],q[0],::+),p[1]*q[1]];
end).canonicalForm;
OPERATOR_MULT(P:Polynomial,x:Numeric)->P.map({[$p[0],$p[1]*x]}).canonicalForm;

//*Returns all variables in P and their max. powers
polyParameters(P:Polynomial)->P.getInner(0).each(pow,pow,|).group(0,{[$x[0],max($x[1],$y[1])]}).toMap;

polySummandToString(powers:IdentifierFreqMap,factor:Numeric)->
  powers.size=0
    ? factor.toString
    : begin
        (factor = 1
         ? ''
         : factor = -1
           ? '-'
           : format('%s*'  ,factor))&
        powers.each(pow,"{$0}{$1=1 ? '' : '^'&$1}".format@pow).join("*");
      end;

private collapseSyntaxTree(t:List(3))->begin
  LHS     :=t[0];
  operator:=t[1];
  RHS     :=t[2];
  LHS.isList(3) ? LHS:=LHS.collapseSyntaxTree : void;
  RHS.isList(3) ? RHS:=RHS.collapseSyntaxTree : void;
  LHS.isNumeric AND (LHS=0 AND operator='+' OR
                              LHS=1 AND operator='*')
  ? RHS :
  RHS.isNumeric AND (RHS=0 AND operator='+' OR
                     RHS=1 AND operator='*')
  ? LHS :
  LHS.isNumeric AND (LHS=0 AND operator='*') OR
  RHS.isNumeric AND (RHS=0 AND operator='*')
  ? 0 :
  [LHS,operator,RHS];
end;

private syntaxTreeToString(t:List(3))->begin
  LHS     :=t[0];
  operator:=t[1];
  RHS     :=t[2];
  format('%{$0?"(":""}s%{$1}s%{$0?")":""}s%{$2}s%{$3?"(":""}s%{$4}s%{$3?")":""}s',
         (LHS.isList(3) AND LHS[1]='+') AND operator='*',
         LHS.syntaxTreeToString(),
         operator,
         (RHS.isList(3) AND RHS[1]='+') AND operator='*',
         RHS.syntaxTreeToString());
end;
private syntaxTreeToString(x:Numeric)->x.toString;
private syntaxTreeToString(x)->x;

private simplify(P:Polynomial)->P.size=0 ? 0 : begin
  ps:=P.polyParameters;
  ps.size=0
  ? P.getInner(1).toList[0]
  : ps.size=1
  ? begin
      x:=ps.toList[0,0];
      Q:=P.map({($p[0].getInner(1)[0] orElse 0)=> $p[1]}).toMap;
      syntaxTree:=0;
      [0..Q.getInner(0).max]
        .each(k,Q[k] orElse 0)
        .reverseList
        .each(a,begin
                  syntaxTree:=[a,'+',[x,'*',syntaxTree]];
                  void;
                end);
      syntaxTree;
    end
  : begin
      x:= ps.sort(1).trailing[0];
      A:=[];
      B:=[];
      P.each(p,p[0,x].isVoid ? A||=p : begin
        p0:=p[0];
        p0[x]:=p0[x]=1 ? void : p0[x]-1;
        B||=[p0,p[1]];
      end);
      A:=A.toMap.toPolynomial;
      B:=B.toMap.toPolynomial;
      [A.simplify,'+',[x,'*',B.simplify]];
    end;
end;

simplifiedForm(P:Polynomial)->P.simplify.collapseSyntaxTree.syntaxTreeToString();

toString(polynomial:Polynomial)->
  polynomial.size=0
  ? 0
  : polynomial.sort.map({polySummandToString@$p}).join("+").replace('+-','-').replace('^2','²').replace('^3','³');

@SuppressUnusedWarning
//*Returns derivative of P by variable
D(P:Polynomial,variable:Identifier)->
  P.map({begin
           powers:=$summand[0];
           factor:=$summand[1];
           (powers[variable] orElse 0)=0
           ? void
           : begin
               factor*=powers[variable];
               powers[variable]-=1;
               [powers,factor];
             end;
         end})
   .canonicalForm;

//*Replace all occurences of variable in P by substitute
substitute(P:Polynomial,variable:Identifier,substitute:Numeric)->
  P.map({begin
           powers:=$summand[0];
           factor:=$summand[1];
           (powers[variable] orElse 0)=0
           ? $summand
           : begin
               factor*=substitute^powers[variable];
               powers[variable]:=void;
               [powers,factor];
             end;
         end})
   .canonicalForm;

substitute(P:Polynomial,variable:Identifier,substitute:Identifier)->
  P.map({begin
           powers:=$summand[0];
           factor:=$summand[1];
           (powers[variable] orElse 0)=0
           ? $summand
           : begin
               powers[substitute]+=powers[variable];
               powers[variable]:=void;
               [powers,factor];
             end;
         end})
   .canonicalForm;

@SuppressUnusedWarning
memoized
mandelbrotIteration(depth>=0)->begin
  x:=poly('x');
  c:=poly('c');
  depth=0 ? return c : void;
  r:=x;
  [1..depth].each(step,r:=sqr(r)+c,trailing);
end;


//[1..6].each(i,
//printf("\nStep %s\t:\t%s\nFixed point\t:\t0 = %s\ndf/dx\t:\t%s", i,
//  mandelbrotIteration(i),
//  (mandelbrotIteration(i)-poly('x')).simplifiedForm(false),
//   mandelbrotIteration(i).D('x').simplifiedForm(false)));

//mandelbrotIteration(3).toString.print orElse
//mandelbrotIteration(3).simplifiedForm(false).print;
//
//[1..6].each(i,
//print('0 = ',(mandelbrotIteration(i)-poly('x')).toString),
//print('1 <|',(mandelbrotIteration(i).D('x')).toString,'|'));

interpolatingPolynomial(X:NumericList,Y:NumericList)->begin
  assert(X.size==Y.size);
  X.each(xi,
    begin
      i:=index;
      [0..X.size-1].each(j,j=i ? void : begin
        factor:=xi-X[j];
        [['x'=>1].toMap=>1/factor].toMap.toPolynomial-
        poly(X[j]/factor);
      end,*)*Y[index];
    end,+);
end;

clearAnimation;
[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1].each(h,

begin
  setOptions(["x0"=>-10,"x1"=>10,"y0"=>-1,"y1"=>1,"autoscaleX"=>false,"autoscaleY"=>false].toMap);
  plot(::math.sin,-10,10,100);
  X:=[-9..9]*h;
  Y:=sin(X);
  addPlot(X,Y,'.');
  int:=interpolatingPolynomial(X,Y);
  int.substitute('x','$x').simplifiedForm.toExpression.addPlot(-10,10,1000);
  print(int.toString);
  addAnimationFrame;
end);



