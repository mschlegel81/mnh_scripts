getHistogram(samples:NumericList,numberOfBins>=1)->begin
  local x0:=samples.min;
  local x1:=samples.max;
  local binWidth:=(x1-x0)/numberOfBins;
  local heightFactor:=numberOfBins/samples.size/(x1-x0);
  floor((samples-x0)/binWidth)
  .elementFrequency
  .mergeMaps([0..numberOfBins+1].map({$k=>0}).toMap,::orElse)
  .sort
  .map({[$b[0]*binWidth+x0,$b[1]*heightFactor]});
end;

approxDensity(samples:NumericList,numberOfPoints>=2)->begin
  local X:=samples.sort;
  //X now represent the integrated density
  //Construct the density by differentiation
  local k:=[0..numberOfPoints-1]/(numberOfPoints-1);
  X:=X[round(k*(samples.size-1))];
  local cX:=(X.tail+X.leading)*0.5;
  local cY:=(k.tail-k.leading)/(X.tail-X.leading);
  //Add zeros left and right
  cX:=(2*cX[0]-cX[1])|cX|(cX.trailing-cX.trailing(2).agg(-));
  cY:=0|cY|0;
  [cX,cY].transpose;
end;

statistics(samples:NumericList)->begin
  local mean:=samples.agg(+)/samples.size;
  local variance:=sqr(samples-mean).agg(+)/samples.size;
  local standardDeviation:=sqrt(variance);
  local skew    :=((samples-mean)/standardDeviation).^(3).agg(+)/samples.size;
  local curtosis:=((samples-mean)/standardDeviation).^(4).agg(+)/samples.size;
  local decils:=samples.sort[round([0..10]/10*(samples.size-1))];
  ["mean"    =>mean,
   "variance"=>variance,
   'standardDeviation'=>standardDeviation,
   'skew'  =>skew,
   'curtosis'=>curtosis,
   'decils'=>decils,
   'min'   =>decils[0],
   'max'   =>decils[1],
   'median'=>decils[5]].toMap;
end;
