#!/usr/bin/mnh_light
USE oeis_server;
@SuppressUnusedWarning
initHook:=begin
  isIpcServerRunning(oeis_server.ipcId) OR $1=='stopServer'
  ? void
  : begin
      executor.execAsync([inspect['uses'].each(i,i[0].matches('(?i)oeis_server') ? i[1] : void,head)]);
      sleep(1);
    end;
end;

OUTPUT_WIDTH:=125;
WRAP_WIDTH:=OUTPUT_WIDTH-5;

niceWrap(s:String,injectTab:Boolean)->s.length<WRAP_WIDTH ? s : begin
  local splitAt:=s.chars.head(WRAP_WIDTH).each(c,c in [' ',','] ? index : void).trailing+1;
  splitAt==[] ? splitAt:=WRAP_WIDTH : void;
  copy(s,0,splitAt)&"\n"&(injectTab ? "\t":"")&copy(s,splitAt,s.length).niceWrap(injectTab);
end;

private getData(parameters)->sendIpcRequest(oeis_server.ipcId,parameters);
private validateRegex_(s:String)->validateRegex(s,{fail('Invalid regex: ',escape(s),'; ',$message)});
printFormattedInfo(S:String)->S.decompress.split("\n").map({$x.niceWrap(true)}).join("\n").print;
printFormattedInfo(L:IntList)->print(L.join(",").niceWrap(false));
printFormattedInfo(L:List)->L.each(element,printFormattedInfo(element),'='.repeat(OUTPUT_WIDTH).print);
printFormattedInfo(M:Map)->begin
  @SuppressUnusedWarning
  local id  :=M['ID'] orElse '?';
  local name:=M['Name'] orElse '?';
  local seq :=M['Sequence'] orElse [];
  local info:=M['Info'] orElse '?';
  local gen :=M['genClass'];
  printf("ID:\t{id}\n"&
         "Name:\t{name.niceWrap(true)}\n"&
         "Seq.:\t{seq.join(',').niceWrap(true)}\n"&
         "Info:\t{info} series of {seq.size} elements"&
         (gen.isVoid ? void : "\n\tGenerator avaliable: {gen[0].toString}"&
                              "\n\tGenerator class    : {gen[1]}"));
end;

@demo_for=Inter Process Communication
//*Return info on a series by ID(s)
main('id',...)->getData($params).printFormattedInfo;
//*Return details on a series by ID(s)
main('details',...)->getData($params).printFormattedInfo;
//*Returns info on a series by name pattern(s)
main('name',...)->map(...,::validateRegex_)[0] orElse getData($params).printFormattedInfo;
//*Returns info on a series by part; start with \[ to indicate sequence start
main('part',part)->validateRegex_(part) orElse getData($params).printFormattedInfo;
//*Returns info on possible continuations
main('continue',sequenceStart,additional)->getData(['continue',sequenceStart.split(",").softCast.filter(::isInt),toInt(additional)]).printFormattedInfo;
//*Returns statistics on the given input
main('statistics')->getData($params).printFormattedInfo;
//*Validates implemented series
main('validate')->getData($params).printFormattedInfo;
//*Return info on a series by class (or list classes)
main('class',...)->getData($params).printFormattedInfo;
//*Scan for reproducible series
main('scan')->getData($params).printFormattedInfo;
//*Show info on duplicate series
main('duplicates')->getData($params).printFormattedInfo;
//*Plot number frequencies
main('plot')->begin
  ['logscaleX'=>true,'fontsize'=>6,'logscaleY'=>true,'preserveAspect'=>false].toMap.setOptions;
  getData('numberFrequencies').plot('. 0.3 red') orElse display;
end;
//*Stops the IPC server (if running)
main('stopServer')->begin
  isIpcServerRunning(ipcId) AND sendIpcRequest(ipcId,['stop']);
  while(isIpcServerRunning(ipcId),sleep(0.1));
end;
//*Updates OEIS data
main('download')->getData($params).printFormattedInfo;
//*Generates values for given id
main('gen',id,count)->getData($params).printFormattedInfo;
