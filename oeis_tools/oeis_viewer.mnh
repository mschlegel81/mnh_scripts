CIRCLE_DETAIL:=30;

halfCircle(startAt:Int,endAt:Int,up:Boolean)->begin
  local C:=cos([0..CIRCLE_DETAIL]/CIRCLE_DETAIL*pi);
  local S:=sin([0..CIRCLE_DETAIL]/CIRCLE_DETAIL*pi);
save;
  local radius:=(endAt-startAt)/2;
  local center:=(endAt+startAt)/2;
  transpose([center-C*radius,(up ? abs(radius) : -abs(radius))*S]);
end;

circleAnimation(generator:Iteratable)->begin
  clearAnimation;
  local up:=false;
  local last:=0;
  local previous:=[];
  local row:=[];
  ['autoscaleFactor'=>1.0,
   'autoscaleX'=>false,
   'autoscaleY'=>false,
   'axisStyleX'=>3,
   'axisStyleY'=>3,
   'fontsize'=>5,
   'logscaleX'=>false,
   'logscaleY'=>false,
   'preserveAspect'=>true].toMap.setOptions;
  generator.each(next,begin
    next=last ? void : row|=halfCircle(last,next,up:=!up);
    previous|=next;
    ['x0'=>previous.min,
     'x1'=>previous.max,
     'y0'=>-abs(last-next)/2,
     'y1'=> abs(last-next)/2].toMap.setOptions;
    row==[] ? plot() : plot(row,'0.5 black l');
    addPlot(previous,previous*0,'red . 0.5');
    addAnimationFrame;
    display;
    last:=next;
  end);
end;

USE customFormUtil,oeis;

formatList(S:IntList)->begin
  local line:='';
  local result:=[];
  S.map(::toString)
  .each(part,length(line)+length(part)>50 ? begin result|=line; line:=''; end : line+=part+",");
  result|=replace(line&'#',',#','');
  result.join("\n");
end;

main->begin
  local retrievedId  :=local id:=0;
  local retrievedName:=local name:='?';
  local sequence:=[];
  local sequenceAsString:='';
  local info:='';
  local genClass :='';
  local genString:='';
  local update:={begin
    id:=retrievedId:=$retrieved['ID'];
    name:=retrievedName:=$retrieved['Name'];
    sequence:=$retrieved['Sequence'];
    info:=$retrieved['Info']&' series of '&sequence.orElse([]).size&' elements';
    sequenceAsString:=sequence.orElse([]).formatList;
    genClass:=($retrieved['genClass'] orElse ['',''])[0];
    genString:=($retrieved['genClass'] orElse ['',''])[1];
  end};

  showDialog('OEIS viewer',
    [newEdit.withCaption('ID')
            .bind(::id)
            .withAction({queryServer('id',id).head.update}),
    newEdit.withCaption('Name')
           .bind(::name)
           .withAction({queryServer('name',name).head.update}),
    newOutputEditor('txt')
           .withCaption({sequenceAsString}),
    newEdit.withCaption('Query more')
           .withEnabledRule({genString!=''})
           .withAction({begin
             local queryCount:=$0.trim.softCast;
             queryCount.isInt AND queryCount>sequence.size
             ? begin
                 sequence:=sendIpcRequest(oeis.ipcId,['gen',id,queryCount]);
                 sequenceAsString:=sequence.formatList;
               end
             : void;
           end}),
    newEdit.withCaption('Info')
           .withEnabledRule(false)
           .bind(::info),
    newEdit.withCaption('Class')
           .withEnabledRule(false)
           .bind(::genClass),
    newEdit.withCaption('Generator')
           .withEnabledRule(false)
           .bind(::genString),
    newButton.withCaption('Show graph')
             .withEnabledRule({!(sequence==[])})
             .withAction({resetOptions orElse clearAnimation orElse plot(sequence,'.') orElse display}),
    newButton.withCaption('Show circle animation')
             .withEnabledRule({!(sequence==[])})
             .withAction({circleAnimation(sequence)}),
    newWorker({begin id:=retrievedId; name:=retrievedName; end},1)]);
end;
