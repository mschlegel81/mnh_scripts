stringWorkload->intRandom(2,100000).join.replace('01','').{pos('0',$s)};
realWorkload->(random(300000)*sin([1..300000])).sqr.agg(+);
intWorkload->[1..2000].agg(*).digits.sort.agg(+);


timeParallel(task:Expression(0),count=1)->begin
  local startTime:=time;
  task();
  time-startTime;
end;

timeParallel(task:Expression(0),count>1)->begin
  local startTime:=time;
  [1..count].pMap(task);
  //[2..count].each(s,async(task))
  //          .{begin task(); $L; end}
  //          .each(t,while(t().isVoid,sleep(0.001)));
  time-startTime;
end;

timeParallelList(task:Expression(0),maxCount>1)->begin
  local times:=[1..maxCount].each(c,task.timeParallel(c)/c);
  print('Reference time for ',nameOf task);
  print('                is ',times.head);
  times/=times.head;
  [[1..maxCount],times].transpose;
end;

timeParallelList(::stringWorkload,16).plot   (". l"); postDisplay;
timeParallelList(::intWorkload   ,16).addPlot(". l"); postDisplay;
timeParallelList(::realWorkload  ,16).addPlot(". l"); postDisplay;
