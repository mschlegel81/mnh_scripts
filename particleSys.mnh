periodicDist(p0,p1)->begin
  local d:=p1-p0;
  d-round(d);
end;

D0:=0.2;

//force(p0,p1)->begin
//  local n:=euklideanNorm(local dist:=periodicDist(p0,p1));
//  n<D0
//  ? -dist/n*sin(2*pi*n/D0)
//  : [0,0];
//end;
//
force(p0,p1)->begin
  local n:=euklideanNorm(local dist:=periodicDist(p0,p1));
  n<D0
  ? -0.1*dist/nÂ²
  : [0,0];
end;


dt:=0.05;
begin
  local P:=map([0..99],()->random(2));
  local V:=P*0;
  setOptions(["x0"=>0,"x1"=>1,"y0"=>0,"y1"=>1,"preserveAspect"=>true,"autoscaleX"=>false,"autoscaleY"=>false,"logscaleX"=>false,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>7,"axisStyleY"=>7].toMap);
  plot(P,'.'); addAnimationFrame;
  [0..999].each(timestep,begin
    V+=dt*P.pEach(p,begin local k:=index; P.each(q,index=k ? void : force(p,q),+); end);
    V*=0.99;
    P+=dt*V;
    P-=floor(P);
    plot(P,'.'); addAnimationFrame;




  end);
end;
