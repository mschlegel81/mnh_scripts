MY_IPC_ID:=format('%x',myPath.sha256);

WIDTH :=50;
HEIGHT:=50;
dt    :=0.1;
gridSize:=50/WIDTH;
MAX_ACCELERATION:=4/dt;

cellPositions:=cross([0..HEIGHT-1],[0..WIDTH-1]);

randomInUnitCircle->begin
  local r:=void;
  while(euklideanNorm(r:=1-2*random(2))>1);
  r;
end;

datastore history:=[];
datastore state:=begin
  local center1:=[HEIGHT*0.4,WIDTH*0.4];
  local center2:=[HEIGHT*0.6,WIDTH*0.6];
  local scale:=50/euklideanNorm([WIDTH,HEIGHT]);
  local gauss:=(dx)->exp(-(euklideanNorm(dx)*scale)²);

  local c:=10*cellPositions.pMap((x)->gauss(x-center1)+gauss(x-center2)*2);
  local vy:=c*0;
  local vx:=gridSize*1.5*c*(ord(cellPositions.getInner(1)*2<WIDTH-1)*3-1);




//  local c :=(0.95+0.05*random(WIDTH*HEIGHT))  *0.05*(50/20)²;
//  local vx:=c.pMap((c_)->c_*randomInUnitCircle)*0.1;
//  local vy:=vx.getInner(1);
//        vx:=vx.getInner(0);
//  vx-=vx.agg(+)/vx.size;
//  vy-=vy.agg(+)/vy.size;
  [c,vy,vx];
end;

shallowWaterAcceleration(concentrations)->begin
  local I_xn:=cellPositions.map((i)->(((i+[0, WIDTH-1]) mod [HEIGHT,WIDTH])*[WIDTH,1]).agg(+));
  local I_xp:=cellPositions.map((i)->(((i+[0,       1]) mod [HEIGHT,WIDTH])*[WIDTH,1]).agg(+));
  local I_yn:=cellPositions.map((i)->(((i+[HEIGHT-1,0]) mod [HEIGHT,WIDTH])*[WIDTH,1]).agg(+));
  local I_yp:=cellPositions.map((i)->(((i+[1       ,0]) mod [HEIGHT,WIDTH])*[WIDTH,1]).agg(+));
save;
  2.5*[concentrations[I_yn]-concentrations[I_yp],
       concentrations[I_xn]-concentrations[I_xp]].transpose/gridSize;
end;

//attractionFactors:=$1=='replay' OR $1=='stop' ? void :
//begin
//  log('Initializing periodic attraction factors');
//  local startTime:=scriptTime;
//  local dxy_:=cross([-50..50]*HEIGHT,[-50..50]*WIDTH).minus(
//  local dxy2:=cross([ -1.. 1]*HEIGHT,[ -1.. 1]*WIDTH)).toList.transpose;
//
//  local progressMark:=[round([1..99]/100*WIDTH*HEIGHT),[1..99]].transpose.toMap;
//  progressMark[0]:=0;
//
//  local attractionFactor:=
//  [0..HEIGHT-1].cross([0..WIDTH-1]).minus([[0,0]]).pEach(baseDelta,baseDelta=>begin
//    progressMark[index].isVoid ? void : log('Initializing ',progressMark[index],'%');
//
//    local dxy:=[dxy_[0]+baseDelta[0],
//                dxy_[1]+baseDelta[1]].transpose;
//    (dxy/dxy.euklideanNorm³).agg(+)+dxy2.each(cd,begin
//      local delta:=baseDelta+cd;
//      (local n:=delta.euklideanNorm)>20
//      ? delta/n³
//      : integrate((x)->
//        integrate((y)->[x,y]/euklideanNorm([x,y])³,delta[1]-0.5,delta[1]+0.5,1E-6),
//                                                   delta[0]-0.5,delta[0]+0.5,1E-6);
//    end,+);
//  end).toMap;
//  attractionFactor[[0,0]]:=[0,0];
//  begin //Expand symmetries
//    log('Expanding symmtries');
//    local S1:=[-1,1]; local S2:=[1,-1]; local S3:=[-1,-1];
//    attractionFactor:=attractionFactor.each(entry,entry,
//                   [entry[0]*S1, entry[1]*S1],
//                   [entry[0]*S2, entry[1]*S2],
//                   [entry[0]*S3, entry[1]*S3]).toMap;
//  end; //Expand symmetries
//
//  log('Distributing on cells');
//  local result:=cellPositions.pEach(p0,cellPositions.each(p1,attractionFactor[p1-p0] orElse fail('Factor for ',p1-p0,' is missing')));
//
//  log('Initialization of force factors finished in ',scriptTime-startTime,' seconds');
//  result;
//end;

attractionFactors:=$1=='replay' ? void :
begin
  warn('INITIALIZING NON-PERIODIC ATTRACTION FACTORS!');
  local startTime:=scriptTime;

  local progressMark:=[round([1..99]/100*WIDTH*HEIGHT),[1..99]].transpose.toMap;
  progressMark[0]:=0;

  local attractionFactor:=
  [0..HEIGHT-1].cross([0..WIDTH-1]).minus([[0,0]]).pEach(delta,delta=>begin
    progressMark[index].isVoid ? void : log('Initializing ',progressMark[index],'%');
    (local n:=delta.euklideanNorm)>20
    ? delta/n³
    : integrate((x)->
      integrate((y)->[x,y]/euklideanNorm([x,y])³,delta[1]-0.5,delta[1]+0.5,100),
                                                 delta[0]-0.5,delta[0]+0.5,100);
  end/gridSize²).toMap;
  attractionFactor[[0,0]]:=[0,0];
  begin //Expand symmetries
    log('Expanding symmtries');
    local S1:=[-1,1]; local S2:=[1,-1]; local S3:=[-1,-1];
    attractionFactor:=attractionFactor.each(entry,entry,
                   [entry[0]*S1, entry[1]*S1],
                   [entry[0]*S2, entry[1]*S2],
                   [entry[0]*S3, entry[1]*S3]).toMap;
  end; //Expand symmetries

  log('Distributing on cells');
  local result:=cellPositions.pEach(p0,cellPositions.each(p1,attractionFactor[p1-p0] orElse fail('Factor for ',p1-p0,' is missing')));

  log('Initialization of force factors finished in ',scriptTime-startTime,' seconds');
  result;
end;

compoundStep(state:List(3),dt,timestepIndex)->begin
  local startTime:=scriptTime;
  local acceleration:=attractionFactors.pEach(tab,(tab*state[0] ).agg(+))+
                      shallowWaterAcceleration(state[0])  ;
  local subSteps:=ceil((acceleration.euklideanNorm*ord(state[0]>0.1)).max/MAX_ACCELERATION).max(1);
  acceleration:=acceleration.transpose;
  local dtSub   :=dt/subSteps;

  local y0:=state;

  local result:=
  [1..subSteps].each(subStep,
    subStep==1 ? void : begin
      acceleration:=(attractionFactors.pEach(tab,(tab*y0[0] ).agg(+))+
       shallowWaterAcceleration(y0[0])).transpose;
      void;
    end,
    begin
      local N:=
      (y0|[cellPositions]|acceleration).transpose
      .pEach(cell,begin
         local c :=cell[0];
         local v :=cell[[1,2]]/(1E-10+c);
         local a :=cell[[4,5]];
//         local x :=cell[3]+v*dtSub+a*dtSub²/2;
         local x :=cell[3]+(v+a*dtSub)*dtSub;
//         local x :=cell[3]+(v+a*dtSub*0.95)*dtSub;

         local cp:=cell[[0,1,2]]+c*(0|a)*dtSub;
         local K:=floor(x); local w:=x-K;

         [[(K+[HEIGHT  ,WIDTH  ]) mod [WIDTH,HEIGHT],(1-w[0])*(1-w[1])],
          [(K+[HEIGHT+1,WIDTH  ]) mod [WIDTH,HEIGHT],   w[0] *(1-w[1])],
          [(K+[HEIGHT  ,WIDTH+1]) mod [WIDTH,HEIGHT],(1-w[0])*   w[1] ],
          [(K+[HEIGHT+1,WIDTH+1]) mod [WIDTH,HEIGHT],   w[0] *   w[1] ]]
         .each(p,[(p[0]*[WIDTH,1]).agg(+),p[1]*cp]);
       end,|);
       y0:=groupToList(N.getInner(1),N.getInner(0),[0,0,0],::+,WIDTH*HEIGHT).transpose;
   end).trailing;
  printf('%4d %6.1fs %2d substeps',timestepIndex,scriptTime-startTime,subSteps);


  result;
end;

replotHistory->isGuiStarted ? begin
  log('Replaying ',history.size,' frames');
  history.toIteratableExpression
  .pMap((h)->begin
    local p:=h/255;
    [p*0  ,p*0,     p     ].transpose*ord(p<=0.5)+
    [p-0.5,p*0,0.5-(p-0.5)].transpose*ord(0.5<p<=1.5)+
    [p-0.5,p-1.5,p-2.5].transpose*ord(1.5<p);
  end)
  .agg((plottable)->begin
    setOptions(["axisStyleX"=>0,"axisStyleY"=>0].toMap);
    plot;
    plotRasterImage(plottable,WIDTH);
    addAnimationFrame;
  end);
end : void;

postUpdateDatastores->begin
  local lastUpdate:=0;
save;
  scriptTime-lastUpdate>600
  ? begin
      lastUpdate:=scriptTime;
      writeDataStores;
      //callMemoryCleaner;
      note('Datastores updated (',scriptTime-lastUpdate,'s)');
      lastUpdate:=scriptTime;
    end
  : void;
end;

plotState(state:List(3))->begin
  local p:=state[0].sqrt;
  history|=[round(p*255)];
  postUpdateDatastores;
  isGuiStarted
  ? begin
      setOptions(["axisStyleX"=>0,"axisStyleY"=>0].toMap);
      plot;
      plotRasterImage(
        [p*0  ,p*0,     p     ].transpose*ord(p<=0.5)+
        [p-0.5,p*0,0.5-(p-0.5)].transpose*ord(0.5<p<=1.5)+
        [p-0.5,p-1.5,p-2.5].transpose*ord(1.5<p)
                      ,WIDTH);
      addAnimationFrame;
    end
  : void;
end;

main('replay')->begin
  assertGuiStarted;
  replotHistory;
  display;
end;

main('replay','finer')->begin
//  local TARGET_RES:=[1920,1080];
//  local TARGET_RES:=[640,480];
  local TARGET_RES:=[1920,900];

  assertGuiStarted;
  local scale:=floor(TARGET_RES/[WIDTH,HEIGHT]/1.1).min;
  while(max(TARGET_RES mod scale)>0,scale-=1);

  log('scale=',scale);
  local r:=TARGET_RES div scale;
  log('r=',r);

  local offset:=
  begin
    local weightCache:=[].toMap;
    local getWeights:=(totalSize,index)->weightCache[[totalSize,index]] orElse weightCache[[totalSize,index]]:=begin
      local L:=cos([-index..totalSize-1-index]*(pi/totalSize))^8;
      L/L.agg(+);
    end;

    local out:=
    history.pEach(entry,begin
      local H:=entry.chunkMap(WIDTH).toList;
      local Hx:=H.agg(+);
      local Hy:=H.transpose.agg(+);
      [map([0..Hx.size-1],(i)->(getWeights(Hx.size,i)*Hx).agg(+)).argMax,
       map([0..Hy.size-1],(i)->(getWeights(Hy.size,i)*Hy).agg(+)).argMax];
    end);

    local centerX:=out.getInner(0).elementFrequency.sort(1).trailing[0];
    local centerY:=out.getInner(1).elementFrequency.sort(1).trailing[0];

    (2*[centerX,centerY]+[WIDTH,HEIGHT]*100-r) div 2 mod [WIDTH,HEIGHT];
  end;
  log('offset=',offset);

  local I:=cross(([0..r[1]-1]+offset[1]) mod HEIGHT,
                 ([0..r[0]-1]+offset[0]) mod WIDTH).map((j)->(j*[WIDTH,1]).agg(+));
  history.toIteratableExpression
  .pMap((h)->begin
    local p:=h/255;
    ([p*0  ,p*0,     p     ].transpose*ord(p<=0.5)+
     [p-0.5,p*0,0.5-(p-0.5)].transpose*ord(0.5<p<=1.5)+
     [p-0.5,p-1.5,p-2.5].transpose*ord(1.5<p))[I];
  end)
  .each(plottable,begin
    setOptions(["axisStyleX"=>0,"axisStyleY"=>0].toMap);
    plot;
    plotRasterImage(plottable,r[0]);
    addAnimationFrame;
    index=0 ? display : postDisplay;
  end);
  callMemoryCleaner;
end;

main('stop')->sendIpcRequest(MY_IPC_ID,'STOP');

main->begin
  local quitRequested:=false;
  startIpcServer(MY_IPC_ID,(m)->begin
    quitRequested:=quitRequested OR m=='STOP';
    note('Handled IPC request; stop requested= ',quitRequested);
    quitRequested;
  end);

  callMemoryCleaner;
  isGuiStarted
  ? begin
      resetOptions;
      clearAnimation;
      history.size=0
      ? plotState(state)
      : replotHistory;
      display;
    end
  : history.size=0
    ? plotState(state)
    : void;

  rangeGenerator(history.size,1000).each(timestep,begin
    state:=compoundStep(state,dt,timestep);
    plotState(state);
    quitRequested
    ? begin
        writeDataStores;
        halt;
      end
    : void;
  end);
end;


