mutable CHARGES:=[[[2,0],1],
                  [2*[cos(2*pi/3),sin(2*pi/3)],1],
                  [2*[cos(4*pi/3),sin(4*pi/3)],-2]];
positiveCharges->CHARGES.filter({$x.trailing>0});
negativeCharges->CHARGES.filter({$x.trailing<0});

@SuppressUnusedParameterWarning
ducktype Vec2(v:NumericList(2))->true;

STEP_SIZE:=0.5;

closestNegativeCharge(p:Vec2)->
negativeCharges.size=0 ? void :
begin
  local D:=negativeCharges.getInner(0).map({(p-$c).sqr.agg(+)});
  D.min<STEP_SIZE^2
  ? negativeCharges[D.argMin,0]
  : void;
end;

largestComponent(p)->p.abs.max;


private K(dx)->dx*dx.sqr.agg(+)^(-1.5);
F(p:Vec2)->begin
  local f:=CHARGES.each(c,K(p-c[0])*c[1],+);
  f*(0.1/f.sqr.agg(+).sqrt);
end;

fieldLine(x0:Vec2,phi)->begin
  local result:=[
    x0,
    local p:=x0+0.1*[sin(phi),cos(phi)]];
  local d:=0;
  while ((d:=largestComponent(p))<1000,begin
    result|=[p+=F(p)*(d<5 ? 1 : d/5)];
    local close:=closestNegativeCharge(p);
    close.isVoid ? void : return result|[close];
  end);
  result;
end;

drawSystem(turn)->begin
  plot();
  setOptions([['autoscaleX',false],['x0',-5],['x1',5],
              ['autoscaleY',false],['y0',-5],['y1',5]]);
  positiveCharges.pEach(c,begin
    local k:=round(40*c[1]);
    ([0..k-1]/k*2*pi+turn).pEach(i,addPlot(fieldLine(c[0],i),'black'));
  end);
end;

//begin
//  clearAnimation;
//  [0..100].each(i,begin
//    CHARGES[2,0,1]:=-5+i/10;
//    drawSystem(i/100*pi);
//    addAnimationFrame;
//    postDisplay;
//  end);
//end;

begin
  clearAnimation;
  [0..100].each(i,begin
    CHARGES[0,1]:=  2*i/100;
    CHARGES[1,1]:=2-2*i/100;
    drawSystem(i/100*pi);
    addAnimationFrame;
    postDisplay;
  end);
end;


// a(t)+b(t)+c(t)=0
// a(t)=b(t-1/3)=c(t-2/3)
