IMAX:=200;
gridSize:=200/IMAX;
c0:=//0.2-0.2*cos([0..200]/201*2*pi);
   // 0.1+ord([0..IMAX]=IMAX div 2);
    ord([0..IMAX]<0);

    //0.1+cos(10*pi/IMAX*[0..IMAX])*0.1;
    //0.2*exp(-500*sqr([0..IMAX]/IMAX-0.4));

p0:=c0*0;
fBaseProfile(x)->
cos(5*pi/IMAX*(x-0.5))*0.2
                 +0.5
                 -0.3*((x-0.5)/IMAX);
baseProfile:=fBaseProfile([0..IMAX]+0.5);
baseProfileSlope:=map([0..IMAX+1],(x)->fBaseProfile(x+0.1)-fBaseProfile(x-0.1))*5;


//baseProfile:=1-sqrt(1-([0..IMAX]/IMAX)²);


//c0:=begin
//  local hi:=0;
//  local q:=baseProfile.each(p,hi:=max(p,hi));
//  q-baseProfile;
//end*0;


spread(x0,x0)->[[min(IMAX,max(0,floor(x0))),1]];
spread(x0,x1)->
  x1<x0+1
  ?
    begin
      local i:=floor(local w:=(x0+x1-1)*0.5); w-=i;
      [[min(IMAX,max(0,i  )),1-w],
       [min(IMAX,max(0,i+1)),  w]];
    end :
  begin
    local I:=[min(IMAX,max(0,floor(x0)))..min(IMAX,max(0,floor(x1)))];
    local m0:=ord(I>=x0);
    local m1:=ord(I<=x1-1);
    local w:=(m1*(I+1)+(1-m1)*x1)-((1-m0)*x0+I*m0);
    [I,w/w.agg(+)].transpose;
  end;
//spread(x0,x1)->spread(x1,x0);

I    :=[0..c0.size-1];
I_fwd:=map([0..c0.size-1],(i)->min(c0.size-1,i+1));
I_bwd:=map([0..c0.size-1],(i)->max(0        ,i-1));


plotSystem(c,p)->begin
  setOptions(["x0"=>0,"x1"=>c0.size-1,"y0"=>0,"y1"=>2,"fontsize"=>10,"preserveAspect"=>false,
              "autoscaleX"=>false,"autoscaleY"=>false,"logscaleX"=>false,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>7,"axisStyleY"=>7].toMap);
  plot;
  local h:=c+baseProfile;
  map(2*p/(c+1E-10),(q)->max(-1,min(1,q)))
   .map((q)->q<0 ? [-q,0,1+q]
                 : [0,q,1-q])
  .each(v,
    addPlot([[index,baseProfile[index]],
             [index+1,h[index]]],'box 0 fs RGB'&join(v,',')));
  addPlot(baseProfile,'stepRight fs 0 GREY0.9');
  addPlot(baseProfile,'stepRight black');
  addAnimationFrame;
  postDisplay;
end;

//postPlotSystem(c,p)->begin
//  local pending:=[];
//  local prepare:=(c_,p_)->begin
//    local h:=c_+baseProfile;
//    map(2*p_/(c_+1E-10),(q)->max(-1,min(1,q)))
//     .map((q)->q<0 ? [-q,0,1+q]
//                   : [0,q,1-q])
//    .each(v,
//      [[[index,baseProfile[index]],
//               [index+1,h[index]]],'box 0 fs RGB'&join(v,',')])|
//    [[baseProfile,'stepRight f 0.5 black']];
//  end;
//
//
//save;
//  c==true
//  ? pending.each(f,begin
//      setOptions(["x0"=>0,"x1"=>c0.size,"y0"=>0,"y1"=>2,"fontsize"=>10,"preserveAspect"=>false,"autoscaleX"=>false,"autoscaleY"=>false,"logscaleX"=>false,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>6,"axisStyleY"=>6].toMap);
//      plot;
//      f().each(r,addPlot@r);
//      addAnimationFrame;
//      postDisplay;
//    end)
//  : begin
//      local T:=max(0,pending.size-1);
//      while(pending.size>T AND pending.head.peekFuture,begin
//        local f:=pending.head; pending:=pending.tail;
//        setOptions(["x0"=>0,"x1"=>c0.size,"y0"=>0,"y1"=>2,"fontsize"=>10,"preserveAspect"=>false,"autoscaleX"=>false,"autoscaleY"=>false,"logscaleX"=>false,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>6,"axisStyleY"=>6].toMap);
//        plot;
//        f().each(r,addPlot@r);
//        addAnimationFrame;
//        postDisplay;
//      end);
//      pending|=future(prepare,[c,p]);
//    end;
//end;

postPlotSystem(c,p)->begin
  local pending:=[];
  local done:=false;
  local backgroundPlot:=future({begin
    while(!done,begin
      while(pending.size>0,begin
        local current:=pending.head; pending:=pending.tail;
        local h:=current[0]+baseProfile;
        setOptions(["x0"=>0,"x1"=>c0.size,"y0"=>0,"y1"=>1,"fontsize"=>10,"preserveAspect"=>false,"autoscaleX"=>false,"autoscaleY"=>false,"logscaleX"=>false,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>6,"axisStyleY"=>6].toMap);
        plot;
        map(2*current[1]/(current[0]+1E-10),(q)->max(-1,min(1,q)))
         .map((q)->q<0 ? [-q,0,1+q]
                       : [0,q,1-q])
        .each(v,
          addPlot([[index,baseProfile[index]],
                   [index+1,h[index]]],'box 0 fs RGB'&join(v,',')));
        addPlot(baseProfile,'stepRight f 0.5 black');
        addAnimationFrame;
        postDisplay;
      end);
      sleep(1);
    end);
    true;
  end});

save;
  c==true
  ? begin done:=true; log('Flushing ',pending.size,' more frames...'); backgroundPlot(); end
  : begin
      pending|=[[c,p]];
    end;
end;

@SuppressUnusedWarning
sim1->begin
  local dt:=0.5;
  local c:=c0;
  local cBefore:=local p:=p0;
  local dtSub:= local h:=  local aPlus :=  local aMinus:=  local v0:=  local vPlus :=void;  local vMinus:=void;

  postPlotSystem(c,p);
  [0..5000].each(ts,begin
    h:=(c+baseProfile); h:=h.tail-h.leading; h:=(h.tail-h.leading).abs.max*20/gridSize*dt;
    local subSteps:=sqrt(h*5).ceil.max(1);
    dtSub:=dt/subSteps;

    cBefore:=c;
    [1..subSteps].each(subStep,begin
      h:=newLinearInterpolator(c+baseProfile);
      aPlus :=(h(I  )-h(I+1))*(20/gridSize);
      aMinus:=(h(I-1)-h(I  ))*(20/gridSize);
      v0:=p/c;
      (v0.isInfinite or v0.isNan).agg(or) ? v0:=map(v0,(v)->v.isNan or v.isInfinite ? 0 : v) : void;
      vPlus :=v0+aPlus *(dtSub/2);
      vMinus:=v0+aMinus*(dtSub/2);
      p+=(aPlus+aMinus)*c*dtSub;//
      p*=(1-abs(p/(1E-3+c))*0.014*dtSub);
      local
      J:=[I+vMinus/gridSize*dtSub,I+1+vPlus/gridSize*dtSub].transpose.map((q)->spread(q[0],q[1]));
      //contents of cell at index k will be spread out evenly between J[k] and J[k+1]
      local tgtIndexes:=J.each(j,j.getInner(0),|);
      c:=groupToList([J,c].transpose.each(q,q[1]*q[0].getInner(1),|),tgtIndexes,0,::+,c.size);
      p:=groupToList([J,p].transpose.each(q,q[1]*q[0].getInner(1),|),tgtIndexes,0,::+,c.size);


      //1000<=ts<2000 ? c[118]+=0.2*dtSub/gridSize*sin((ts-1000)/1000*pi) : void;
    //  4000>ts>2000 ? c[118]+=0.1*dtSub/gridSize*(ts-2000)/1000 : void;

      //c[IMAX]+=0.1*dtSub/gridSize*ts/1000;

      //1000<ts<2000 ? void : c[IMAX]+=0.1*dt/gridSize;

      //c[0]:=0;//max(0,c[0]-0.1*dtSub/gridSize);
      //p[0]:=0;//-c[0];
      c[0]+=dtSub*0.1;
      void;
    end);


    postPlotSystem(c,p);
    log(ts,' (',subSteps,') ',scriptTime/ts);
  end);
  postPlotSystem(true,true);
end;

@SuppressUnusedWarning
sim2->begin
  local dt:=0.5;
  local c:=c0;
  local p:=p0;
  plotSystem(c,p);
  [0..3000].each(ts,begin
    local h:=c+baseProfile;
    local a:=(h[I_bwd]-h[I_fwd])*10;
    local v0:=p/(c+1E-10);
    local v :=v0+a *dt;
    p:=v*(c+1E-10);
    local W1:=I+v*dt;
    local J0:=floor(W1); W1-=J0; local W0:=1-W1;
    local J1:=J0+1;
    J0:=ord(0<J0<=IMAX)*J0+IMAX*ord(J0>IMAX);
    J1:=ord(0<J1<=IMAX)*J1+IMAX*ord(J1>IMAX);

    c:=groupToList((c*W0)|(c*W1),J0|J1,0,::+,c.size);
    p:=groupToList((p*W0)|(p*W1),J0|J1,0,::+,c.size);
    //ts<2000 ? c[IMAX]+=0.1*dt : void;
    //ts>1000 ? c[0]:=max(0,c[0]-0.1*dt) : void;

    c[0]+=dt*0.1;
    plotSystem(c,p);
    log(ts,' ');
  end);
end;


sim3->begin
  local dt:=0.5;
  local c:=c0;
  local p:=p0;
  local dtSub:= local h:=  local a := local v0:=  local vLeft := local vRight:=void;

  postPlotSystem(c,p);
  [0..5000].each(ts,begin
    h:=c+baseProfile;
    a:=0|(h.leading-h.tail)*(20/gridSize)|0;
    //                   |vLeft-vRight|*dtSub <= 1
    //                   |a.tail-a.leading|*dtSub² <= 1
    //                   sqrt(abs(a.tail-a.leading).max)*dt <= subSteps
    //    subSteps:=ceil(sqrt(abs(a.tail-a.leading).max)*dt);
    local subSteps:=max(sqrt(abs(a.tail-a.leading).max)*dt*2,
                        p.trailing/(1E-10+c.trailing)*dt/gridSize*2,
                        -p.head   /(1E-10+c.head    )*dt/gridSize*2,
                        1).ceil;
    dtSub:=dt/subSteps;


    [1..subSteps].each(subStep,begin
      //calculate acceleration at cell boundaries
      h:=c+baseProfile;
      a:=0|(h.leading-h.tail)*(20/gridSize)|0;
      //calculate cell centered velocities
      v0:=p/c;
      (v0.isInfinite or v0.isNan).agg(or) ? v0:=map(v0,(v)->v.isNan or v.isInfinite ? 0 : v) : void;
      //calculate cell boundary velocities after applying acceleration
      vLeft :=v0+a.leading*dtSub;
      vRight:=v0+a.tail   *dtSub;
      //update cell "impulses"
      p+=c*(a.tail+a.leading)*(0.5*dtSub);
      p*=(1-abs(p)*0.014*dtSub);
      //calculate new cell boundaries:
//      local edges:=0.5*(((I+  vLeft *dtSub/gridSize)|(IMAX+1))+
//                      (0|(I+1+vRight*dtSub/gridSize)));
      local J:=[I+  vLeft *dtSub/gridSize,
                I+1+vRight*dtSub/gridSize].transpose.map((q)->spread(q[0],q[1]));
      //contents of cell at index k will be spread out evenly between J[k] and J[k+1]
      local tgtIndexes:=J.each(j,j.getInner(0),|);
      c:=groupToList([J,c].transpose.each(q,q[1]*q[0].getInner(1),|),tgtIndexes,0,::+,c.size);
      p:=groupToList([J,p].transpose.each(q,q[1]*q[0].getInner(1),|),tgtIndexes,0,::+,c.size);
      c[0]+=dtSub*0.1;
    end);
    postPlotSystem(c,p);
    log(ts,' (',subSteps,')',scriptTime/ts);
  end);
  postPlotSystem(true,true);


end;

sim4->begin
  local dt:=0.5;
  local c:=c0;
  local p:=p0;
  local dtSub:= local h:=  local a := local v0:=  local vLeft := local vRight:=void;

  postPlotSystem(c,p);
  [0..520].each(ts,begin
    h:=c+baseProfile;
    a:=0|(h.leading-h.tail)*(20/gridSize)|0;
    //                   |vLeft-vRight|*dtSub <= 1
    //                   |a.tail-a.leading|*dtSub² <= 1
    //                   sqrt(abs(a.tail-a.leading).max)*dt <= subSteps
    //    subSteps:=ceil(sqrt(abs(a.tail-a.leading).max)*dt);
    local subSteps:=max(sqrt(abs(a.tail-a.leading).max)*dt*2,
                        p.trailing/(1E-10+c.trailing)*dt/gridSize,
                        -p.head   /(1E-10+c.head    )*dt/gridSize,
                        1).ceil;
//    subSteps:=1;
    dtSub:=dt/subSteps;


    [1..subSteps].each(subStep,begin
      //calculate acceleration at cell boundaries
      h:=c+baseProfile;
      a:=0|(h.leading-h.tail)*(20/gridSize)|0;
      //calculate cell centered velocities
      v0:=p/c;
      (v0.isInfinite or v0.isNan).agg(or) ? v0:=map(v0,(v)->v.isNan or v.isInfinite ? 0 : v) : void;
      //calculate cell boundary velocities after applying acceleration
      vLeft :=v0+a.leading*dtSub/2;
      vRight:=v0+a.tail   *dtSub/2;
      //update cell "impulses"
//      local p1:=p+c*(a.tail+a.leading)*(0.5*dtSub);
//      p1*=(1-abs(p1/(1E-3+c))*0.014*dtSub);
      //calculate new cell boundaries:
      local J:=[I+  vLeft *dtSub/gridSize,
                I+1+vRight*dtSub/gridSize].transpose.map((q)->spread(q[0],q[1]));
      local tgtIndexes:=J.each(j,j.getInner(0),|);
      local c1:=groupToList([J,c ].transpose.each(q,q[1]*q[0].getInner(1),|),tgtIndexes,0,::+,c.size);
  //          p1:=groupToList([J,p1].transpose.each(q,q[1]*q[0].getInner(1),|),tgtIndexes,0,::+,c.size);

      //calculate acceleration at cell boundaries
      h:=c1+baseProfile;
      a:=0|(h.leading-h.tail)*(20/gridSize)|0;
      //calculate cell boundary velocities after applying acceleration
      vLeft :=v0+a.leading*dtSub;
      vRight:=v0+a.tail   *dtSub;
      //update cell "impulses"
      p+=c*(a.tail+a.leading)*(0.5*dtSub);
      p*=(1-abs(p/(1E-3+c))*0.014*dtSub);

      //calculate new cell boundaries:
      J:=[I+  vLeft *dtSub/gridSize,
          I+1+vRight*dtSub/gridSize].transpose.map((q)->spread(q[0],q[1]));
      tgtIndexes:=J.each(j,j.getInner(0),|);
      c:=groupToList([J,c].transpose.each(q,q[1]*q[0].getInner(1),|),tgtIndexes,0,::+,c.size);
      p:=groupToList([J,p].transpose.each(q,q[1]*q[0].getInner(1),|),tgtIndexes,0,::+,c.size);
//
   //   c:=c*(0.5)+c1*(0.5);
   //   p:=p*(0.5)+p1*(0.5);




      c[0]+=dtSub*0.1;
    end);
    postPlotSystem(c,p);
    log(ts,' (',subSteps,')',a.abs.max);
  end);
  postPlotSystem(true,true);
end;

sim4b->begin
  local dt:=0.5;
  local c:=c0;
  local p:=p0;
  local dtSub:= local h:=  local a := local v0:=  local vLeft := local vRight:=void;

  postPlotSystem(c,p);
  [0..5000].each(ts,begin
    local tRest:=dt;
    local subSteps:=0;
    while(tRest>0,begin
      subSteps+=1;
      h:=c+baseProfile;
      a:=0|(h.leading-h.tail)*(20/gridSize)|0;
      a:=1.125*a-0.041666666666666685*((a.head|a.leading)+(a.tail|a.trailing));

      //((h[I]-h[I_bwd])*1.125-(h[I][I_fwd]-h[I_bwd][I_bwd])*0.041666666666666685)*(20/gridSize)|0;
      dtSub:=0.5/sqrt(max(abs(a.tail-a.leading)));

      v0:=p/c;
      (v0.isInfinite or v0.isNan).agg(or) ? v0:=map(v0,(v)->v.isNan or v.isInfinite ? 0 : v) : void;
//      dtSub:=min(dtSub,0.6/v0.abs.max);
//      dtSub:=min(dtSub,0.2/(v0.tail-v0.leading).abs.max);


      dtSub>tRest
      ? begin
          dtSub:=tRest; tRest:=0;
        end
      : tRest-=dtSub;
      //calculate cell centered velocities
      //calculate cell boundary velocities after applying acceleration
      vLeft :=v0+a.leading*(dtSub*0.5);
      vRight:=v0+a.tail   *(dtSub*0.5);
      //calculate new cell boundaries:
      local J:=[I+  vLeft *dtSub/gridSize,
                I+1+vRight*dtSub/gridSize].transpose.map((q)->spread(q[0],q[1]));
      local tgtIndexes:=J.each(j,j.getInner(0),|);
      local c1:=groupToList([J,c ].transpose.each(q,q[1]*q[0].getInner(1),|),tgtIndexes,0,::+,c.size);
      //calculate acceleration at cell boundaries
      h:=c1+baseProfile;
      a:=(0|(h.leading-h.tail)*(20/gridSize)|0);
      a:=1.125*a-0.041666666666666685*((a.head|a.leading)+(a.tail|a.trailing));
      //calculate cell boundary velocities after applying acceleration
      vLeft :=v0+a.leading*dtSub;
      vRight:=v0+a.tail   *dtSub;
      //update cell "impulses"
      p+=c*(a.tail+a.leading)*(0.5*dtSub);
      p*=(1-abs(p/(1E-3+c))*0.0014*dtSub);

      //calculate new cell boundaries:
      J:=[I+  vLeft *dtSub/gridSize,
          I+1+vRight*dtSub/gridSize].transpose.map((q)->spread(q[0],q[1]));
      tgtIndexes:=J.each(j,j.getInner(0),|);
      c:=groupToList([J,c].transpose.each(q,q[1]*q[0].getInner(1),|),tgtIndexes,0,::+,c.size);
      p:=groupToList([J,p].transpose.each(q,q[1]*q[0].getInner(1),|),tgtIndexes,0,::+,c.size);

      ts<500 ? begin v0:=(p[0]+p[1])/(c[0]+c[1]+1E-10); c[0]+=dtSub*0.1; p[0]+=dtSub*0.1*v0; end : void;
    end);
    postPlotSystem(c,p);
    log(ts,' (',subSteps,') ',a.abs.max);
  end);
  postPlotSystem(true,true);
end;

sim5->begin
  local dt:=0.5;
  local c:=c0;
  local p:=p0;
  local CFL_LIM:=0.5;
  postPlotSystem(c,p);
  [0..5000].each(ts,begin
    local tRest:=dt;
    local subSteps:=0;
    while(tRest>0,begin
      subSteps+=1;
      local a:=((0|(c.leading-c.tail)|0)-baseProfileSlope)*(20/gridSize);
      a:=a*0.6+0.2*(a.head|a.leading)+0.1*(a.tail|a.trailing);

      local v0:=p/c;
        (v0.isInfinite or v0.isNan).agg(or) ? v0:=map(v0,(v)->v.isNan or v.isInfinite ? 0 : v) : void;
      a-=((v0|0)+(0|v0)).{$x*abs($x)}*(0.001*gridSize);
      local dtSub:=tRest;
      local vLeft :=(v0+a.leading*dtSub)*dtSub; vLeft *=-1*ord(vLeft<0);
      local vRight:=(v0+a.tail   *dtSub)*dtSub; vRight*=   ord(vRight>0);
      while((vLeft+vRight).max>CFL_LIM,begin
        dtSub*=min(0.9,CFL_LIM/(vLeft+vRight).max);
        vLeft :=(v0+a.leading*dtSub)*dtSub; vLeft *=-1*ord(vLeft<0);
        vRight:=(v0+a.tail   *dtSub)*dtSub; vRight*=   ord(vRight>0);
      end);
      dtSub>=tRest   ? begin dtSub:=tRest; tRest:=0; end :
                       begin dtSub:=tRest/ceil(tRest/dtSub); tRest-=dtSub;  end;
      vLeft[0]:=0;
      vRight[IMAX]:=0;

//      local h :=c+(0|(c*vRight).leading)+(((c*vLeft).tail)|0)-c*(vLeft+vRight);
//
//      a:=((0|(h.leading-h.tail)|0)-baseProfileSlope)*(20/gridSize);
//      a:=a*0.6+0.2*(a.head|a.leading)+0.1*(a.tail|a.trailing);
//      a-=((v0|0)+(0|v0)).{$x*abs($x)}*(0.001*gridSize);
//      vLeft :=(v0+a.leading*dtSub)*dtSub; vLeft *=-1*ord(vLeft<0);
//      vRight:=(v0+a.tail   *dtSub)*dtSub; vRight*=   ord(vRight>0);
//      vLeft [0]   :=0; vLeft :=vLeft *ord(vLeft <0.5)+0.5*ord(vLeft >=0.5);
//      vRight[IMAX]:=0; vRight:=vRight*ord(vRight<0.5)+0.5*ord(vRight>=0.5);


      //1st order upwind transport
      p+=((a.tail+a.leading)*0.25)*c*dtSub;
      c+=(0|(c*vRight).leading)+(((c*vLeft).tail)|0)-c*(vLeft+vRight);
      p+=(0|(p*vRight).leading)+(((p*vLeft).tail)|0)-p*(vLeft+vRight);
      p+=((a.tail+a.leading)*0.25)*c*dtSub;

      ts<800  ? begin c[0]+=dtSub*0.1/gridSize; p[0]+=dtSub*0.1/gridSize²; end : void;
      ts>2000 ? begin
        local outflow:=min(0.1*dtSub/gridSize,c[IMAX]);
        local relOutflow:=outflow/c[IMAX];
        c[IMAX]-=outflow;
        p[IMAX]*=1-relOutflow;
      end : void;



      [0..IMAX-1].each(i,c[i]>1E-3<c[i+1] ? begin
        local v0:=p[i  ]/c[i  ];
        local v1:=p[i+1]/c[i+1];
        local vMed:=(p[i]+p[i+1])/(c[i]+c[i+1]);

        v0>v1
        ? begin
            local dp:=(v0-vMed)*c[i];
            p[i  ]-=dp;
            p[i+1]+=dp;
          end
        : begin
            local dp:=(v1-vMed)*c[i+1];
            p[i  ]+=dp;
            p[i+1]-=dp;
          end;
      end : void);


      void;
    end);
    postPlotSystem(c,p);
    log(ts,' (',subSteps,') ',ts/scriptTime,'fps (calc)');
    ts mod 1000=0 ? callMemoryCleaner : void;
  end);
  postPlotSystem(true,true);
end;

sim5;

