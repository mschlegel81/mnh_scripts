#!C:\bin\mnh.exe -quiet -convertPrintToLog -logDateFmt hh:mm:ss -logLocationLength 15 +log stdOut(1)
//PHYSICS SETUP:==================================================================

//PARTICLE_COUNT:=117;
//PARTICLE_COUNT:=209;
//PARTICLE_COUNT:=405;
PARTICLE_COUNT:=1025;

timeStepSize:=0.08;
errorTolerance:=0.01;

ducktype ForceSetupTriplet(n:NumericList(3))->!(isNan(n) or isInfinite(n)).agg(or);
ducktype ForceSetup(L:List(3))->L.each(f,f.isForceSetupTriplet,AND);
type ForceTriplet(L:List(3))->L.each(f,f.isExpression(1),AND);
private memoized makeForce(range,amp,attract)->[amp*10.124,'*(cos($x*',pi/2/range,')+1)*ord($x<',2*range,')*(',  range*attract,'/$x-sqr(',range,'/$x))/$x'].toExpression;
@Overload
toForceTriplet(setup:ForceSetup)->setup.map((triplet)->makeForce@triplet).toForceTriplet;

//*Returns force setup and interaction sets for a given time step
forcesForTimeStep(i:Int,state:List(2))->begin
  local SETUP:=
  ['--'=>
   [[0.5,0.5²,1],
    [1.5,0.5 ,1],
    [1  ,1  ²,1]].toForceSetup,
   'Weird'=>
   [[0.5,0.5²,1],
    [1.5,0.5 ,1],
    [1  ,1  ²,1]].toForceSetup,
   'Weird (reversed)'=>
   [[1  ,1  ²,1],
    [1.5,0.5 ,1],
    [0.5,0.5²,1]].toForceSetup,
   'Dust'=>
   [[1    ,1  ,1],
    [0.588,0.4,1],
    [0.588,0.4,1]].toForceSetup,
   'Hexagonal'=>
   [[1  ,1,1],
    [0.5,1,1],
    [1  ,1,1]].toForceSetup,
   'Polymer'=>
   [[4/3,0.7,1],
    [0.5,2  ,1],
    [4/3,0.7,1]].toForceSetup,
   'NaCl'=>
   [[4/3*1        ,1,1],
    [4/3*sqrt(0.5),1,1],
    [4/3*1        ,1,1]].toForceSetup,
   'Layers'=>
   [[0.7,1,1],
    [1  ,1,1],
    [0.7,1,1]].toForceSetup,
   'Neutral'=>
   [[1,1,1],
    [1,1,1],
    [1,1,1]].toForceSetup,
   'Phobic'=>
   [[0.7,1,1],
    [0.7,1,0],
    [0.7,1,1]].toForceSetup,
   'Phobic'=>
   [[0.7,1,1],
    [0.7,1,0],
    [0.7,1,1]].toForceSetup];
  local lastSetup:=-1;
save;
  local k:= i div 500;
  local tau:=(i mod 500)/500;
  local w:=tau<1/4 ? 4*tau : 1;
  k>=size(SETUP)-1
  ? void
  : begin
      k==lastSetup ? void : begin
        log('Switching to setup #',k,': ',SETUP[k+1,0],' @',i);
        saveState(lastSetup>-1);
        lastSetup:=k;
      end;
      local damping:=(k=size(SETUP)-2 OR k=size(SETUP)-3 AND tau>0.5)
                     ? 0.2
                     : 0.2+2*(cos(tau*pi)^6);
      local scen0:=SETUP[k  ,1];
      local scen1:=SETUP[k+1,1];
      ['forces'=>(scen0*(1-w)+scen1*w).toForceTriplet,
       'sets'=>getInteractionSets(state,(scen0*(1-w)+scen1*w).getInner(1).abs.max*2),
       'damping'=>damping
       ].toMap;
    end;
end;

private F(points:List,weightedForceFunction:Expression(1),pairing:List(2))->begin
  local deltas:=points[pairing[1]]-points[pairing[0]];
  local accel:=deltas*weightedForceFunction(deltas.euklideanNorm);
  groupToList(accel     |(-accel),
              pairing[0]|pairing[1],
              0,
              ::+,
              PARTICLE_COUNT);
end;

private curry D(forceTriplet:ForceTriplet,interactionSets,dampingFactor,state:List(2))->begin
  local p:=state[0];
  local v:=state[1];
  local dampingFuture:=future({-0.01*$p-dampingFactor*$v*(0.1+$v.euklideanNorm)},state);
  [v,interactionSets.pEach(s,F(p,forceTriplet[s[0]],s[1]),+)
    +dampingFuture()];
end;
//==================================================================:PHYSICS SETUP
//PERSISTENT STATE:===============================================================
private datastore state;
private datastore positionHistory;
//===============================================================:PERSISTENT STATE
//VARIABLES FOR LOGGING:==========================================================
mutable interactionsConsidered:=0;
mutable microStepCount        :=0;
//==========================================================:VARIABLES FOR LOGGING
//PLOTTING:=======================================================================
private nearestNeighborDistances_recursive(points:List,splitIndex)->
  points.size<50
  ? points.each(p,points.each(q,q==p ? void : euklideanNorm(p-q),min))
  : begin
      local oneDim    :=points.getInner(splitIndex and 1);
      local splitValue:=oneDim.sort[points.size div 2];
      local mask      :=oneDim<splitValue;
      local part0     :=nearestNeighborDistances_recursive(points[ mask],splitIndex+1);
      local part1     :=nearestNeighborDistances_recursive(points[!mask],splitIndex+1);
      local bMask     :=abs(oneDim-splitValue)<max(part0.max,part1.max);
      local partB     :=nearestNeighborDistances_recursive(points[bMask],splitIndex+1);
      [indexOf( mask),part0].transpose.toMap.mergeMaps(
      [indexOf(!mask),part1].transpose.toMap,::min).mergeMaps(
      [indexOf(bMask),partB].transpose.toMap,::min)
      .sort(0).getInner(1);
    end;

private prepareForPlot(points:List)->
  [points,points.nearestNeighborDistances_recursive(0)].transpose.map({[$x[0]-$x[1]/2,$x[0]+$x[1]/2]})
  .group([0..points.size-1] and 1)
  .each(groupByClass,[groupByClass[0],groupByClass[1].agg(|)])
  .toMap
  .mergeMaps([0=>[],1=>[]].toMap,::orElse);

private plotPreparedSystem(balls:Map(2),addFrame:Boolean)->begin
  local xExtend:=void;
  local yExtend:=void;
save;
  local locations:=balls.getInner(1).agg(|).transpose.abs.pMap(
    (list)->begin
      local x:=list.sort.tail(floor(list.size*0.95));
      local y:=arcsin(([0..x.size-1]+list.size-x.size)/(list.size-1))/(0.5*pi);
      (x/y).agg(+)/(x.size);
    end);

  plot();
  balls[0].size=0 ? void : balls[0].addPlot('blue e fs 0.5');
  balls[1].size=0 ? void : balls[1].addPlot('RGB1,0.5,0 e fs 0.5');

  xExtend.isVoid ? begin
    clearAnimation;
    xExtend:=locations[0];
    yExtend:=locations[1];
    setOptions(
     ['autoscaleFactor'=>1,
      'autoscaleX'=>false,
      'autoscaleY'=>false,
      'axisStyleX'=>2,
      'axisStyleY'=>2,
      'y0'=>-yExtend,
      'y1'=> yExtend,
      'x0'=>-xExtend,
      'x1'=> xExtend,
      'logscaleX'=>false,
      'logscaleY'=>false,
      'preserveAspect'=>true]);
    postDisplay;
  end : begin
    xExtend:=xExtend*0.98+locations[0]*0.02;
    yExtend:=yExtend*0.98+locations[1]*0.02;
    locations[0].tail.each(x,x>xExtend ? xExtend:=xExtend*0.995+x*0.005 : void);
    locations[1].tail.each(y,y>xExtend ? yExtend:=yExtend*0.995+y*0.005 : void);
    setOptions(['y0'=>-yExtend,
                'y1'=> yExtend,
                'x0'=>-xExtend,
                'x1'=> xExtend]);
  end;
  addFrame ? addAnimationFrame : void;
end;

private plotSystem(points:List)->points.prepareForPlot.plotPreparedSystem(true);
//=======================================================================:PLOTTING
//PARTITIONING:===================================================================
private pairType(ij:IntList(2))->(ij and 1).agg(+);

getInteractionSets(state:List(2),maxForceRange)->begin
  local basePairs    :=[0..PARTICLE_COUNT-1].cross([0..PARTICLE_COUNT-1]).filter((i)->i.agg(<));
  local basePairTypes:=basePairs.map(::pairType);
  local maxSpatialStepMemory:=0;
save;
  //The max. distance that two particles can move apart during one step is maxSpatialStep
  local maxSpatialStep:=2*state[1].euklideanNorm.max*timeStepSize;
  maxSpatialStepMemory:=maxSpatialStep:=max(maxSpatialStep,maxSpatialStep*0.01+maxSpatialStepMemory*0.99);
  local safeRange:=maxForceRange+maxSpatialStep*1.5;
  local mask:=euklideanNorm(state[0,basePairs.getInner(0)]-state[0,basePairs.getInner(1)])<=safeRange;
  interactionsConsidered+=mask.trueCount;
  local sets:=group(basePairs[mask],basePairTypes[mask]).toList;
  sets.size=0 ? return [] : void;
  while(sets.size<mnhInfo['configured_cpus'],begin
    sets:=sets[sets.map((s)->s[1].size).sortPerm];
    local setToSplit:=sets.trailing;
    sets:=sets.leading|
    [[setToSplit[0],setToSplit[1].head(setToSplit[1].size div 2)],
     [setToSplit[0],setToSplit[1].tail(setToSplit[1].size div 2)]];
  end);
  sets.filter((s)->s[1].size>0).map((s)->[s[0],s[1].transpose]);
end;
//===================================================================:PARTITIONING
//TIME INTEGRATION:===============================================================
private microTimestep(forceTriplet:ForceTriplet,interactionSets,damping,state:List(2),dt)->begin
  local F0:=dt*D(forceTriplet,interactionSets,damping,state);
  local F1:=dt*D(forceTriplet,interactionSets,damping,state+F0);
  local F2:=dt*D(forceTriplet,interactionSets,damping,state+0.25*F0+0.25*F1);
  local deltaO3:=(F0+F1)*(1/6)+F2*(2/3);
  local deltaO2:=(F0+F2+F2)*1/3;
  [state+deltaO3,((deltaO2-deltaO3).flatten.abs.max/errorTolerance)^(1/3)];
end;

private timeStep(setup:Map,state:List(2),dt)->begin
  local subSteps:=1;
save;
  local forceTriplet   :=setup['forces']        orElse fail;
  local interactionSets:=setup['sets']          orElse fail;
  local damping        :=setup['damping']       orElse fail;

  local errorEstimate:=Inf;
  local y:=state;
  while(errorEstimate>1,begin
    microStepCount+=subSteps;
    errorEstimate:=0;
    y:=state;
    local dtSub:=dt/subSteps;
    [1..subSteps].each(step,begin
      local y_:=microTimestep(forceTriplet,interactionSets,damping,y,dtSub);
      errorEstimate:=max(errorEstimate,y_[1]);
      y:=y_[0];
    end);
    errorEstimate>1
    ? subSteps:=ceil(errorEstimate*1.1*subSteps)
    : void;
  end);

  (errorEstimate<0.6*(subSteps-1)/subSteps)
  ? subSteps-=1
  : void;
  y;
end;
//===============================================================:TIME INTEGRATION

getInitialPosition(count:Int)->begin
  local i:=round(sqrt(count)*sqrt(9/16));
  i+=ord((i and 1)=0);
  local p:=[0..count-1].map((j)->[j div i,j mod i]+1E-6*(0.5-random(2)));
  local c:=p.agg(+)/p.size;
  p.map((x)->(x-c)*1.2);
end;

saveState(force:Boolean)->begin
  local lastSaved:=scriptTime;
  local runningFuture:={true};
save;
  force or scriptTime>lastSaved+300
  ? begin
      runningFuture();
      lastSaved:=scriptTime;
      runningFuture:=future({
        writeDataStores;
        log('Datastores updated');
        true});
      true;
    end
  : false;
end;

main->begin
  print('Setting up calculation for ',PARTICLE_COUNT,' particles');
  assertUniqueInstance;
  local prevOutput:=scriptTime-1000;
  state.isVoid
  ? begin
      state:=[getInitialPosition(PARTICLE_COUNT),map([1..PARTICLE_COUNT],()->[0,0])];
      positionHistory:=[state[0]];
    end
  : begin
      assert(state.size=2);
      assert(state[0].size=state[1].size=PARTICLE_COUNT);
      isGuiStarted ? main('replay') : void;
      log('Resuming calculation @',positionHistory.size);
    end;

  local plotFuture:=isGuiStarted ? future(::plotSystem,[state[0]]) : {void};
  local start:=scriptTime;
  local framesStart:=size(positionHistory);
  local doOutput:={begin
          prevOutput:=scriptTime;
          local stepsDone:=size(positionHistory)-framesStart;
          printf("Calculated %5d frames\t%5.2f/s\n"&
                 "  Interactions considered\t%5.2f%%\n"&
                 "  Micro steps per step\t%5.2f",
                 size(positionHistory),
                 stepsDone/(scriptTime-start),
                 100*interactionsConsidered/stepsDone/(PARTICLE_COUNT*(PARTICLE_COUNT-1)/2),
                 microStepCount/stepsDone);
          microStepCount         :=0;
          interactionsConsidered:=0;
          start      :=scriptTime;
          framesStart:=positionHistory.size;
        end};

  while(true,begin
    local setup:=forcesForTimeStep(positionHistory.size,state);
    setup.isVoid ? return doOutput() orElse print('Done calculating') : void;
    state:=timeStep(setup,state,timeStepSize);

    plotFuture();
    isGuiStarted
    ? plotFuture:=future(::plotSystem,[state[0]])
    : void;
    positionHistory|=[state[0]];
    saveState(false) or (scriptTime>60+prevOutput)
    ? doOutput()
    : void;
  end);
end;

main('replay')->begin
  assertGuiStarted;
  local framesReady:=0;
  [0..100].each(run,begin
    index>0 ? print("\nreloading...") : void;
    local anyDrawn:=false;
    local framesTotal:=positionHistory.size;
    print('Replaying ',framesTotal,' frames');
    positionHistory.tail(framesReady).toIteratableExpression.pMap(::prepareForPlot).agg((x)->begin
      x.plotPreparedSystem(true);
      framesReady+=1;
      local tTotal:=framesTotal*scriptTime/framesReady;
      printDirect("\r",framesReady,' done ',formatTime('hh:mm:ss',tTotal/(24*60*60)),' total ',formatTime('hh:mm:ss',(tTotal-scriptTime)/(24*60*60)),' remaining  ');
      anyDrawn:=true;
    end);
    anyDrawn;
  end,AND);
  print('Done replaying');
end;

