//PHYSICS SETUP:==================================================================
TIME_STEP_SIZE:=0.1;
ERROR_TOLERANCE:=0.02;
LOWER_SPEED_LIMIT:=0.05;

ducktype ForceSetupTriplet(n:NumericList(3))->!(isNan(n) or isInfinite(n)).agg(or);
ducktype ForceSetup(L:List(3))->L.each(f,f.isForceSetupTriplet,AND);
type ForceTriplet(L:List(3))->L.each(F,F.isList(2) AND F[0].isExpression(1) AND F[1].isExpression(1),AND);

SETUP:=
  [
   'INITIAL'=>
   [[[sqrt(2),0.8,1],
     [1      ,0.8,1],
     [sqrt(2),0.8,1]].toForceSetup,1,0],
   'Weird'=>
   [[[0.5,0.5²,0.04],
     [1.5,0.5 ,0.01],
     [1  ,1  ²,0.02]].toForceSetup,300,1000],
   'Phobic'=>
   [[[1,1,0.05],
     [1,0,0.00],
     [1,1,0.05]].toForceSetup,500,1000],
   'Layers'=>
   [[[1   ,1,0.02],
     [10/7,1,0.01],
     [1   ,1,0.02]].toForceSetup,100,1000],
   'Dipoles'=>
   [[[2   ,0,0.02],
     [0.44,1,1],
     [2   ,0,0.02]].toForceSetup,200,700],
   'Polymer'=>
   [[[1   ,0,0.02],
     [0.44,2,0.2],
     [1   ,0,0.02]].toForceSetup,500,1000],
   'Hexagonal'=>
   [[[1  ,0.9,0.01],
     [0.5,0.9,0.05],
     [1  ,0.9,0.01]].toForceSetup,500,1000],
   'NaCl'=>
   [[[1        ,1,0.01 ],
     [sqrt(0.5),1,0.014],
     [1        ,1,0.01 ]].toForceSetup,500,1000],
   'Dust'=>
   [[[2/sin(2*pi/3),1  ,0.02],
     [1            ,0.6,0.04],
     [1            ,0.6,0.08]].toForceSetup,300,1000],
   'Restless'=>
   [[[1,0.25,0],
     [1,0.25,0],
     [1,0.25,0]].toForceSetup,50,800],
   'Handbrake'=>
   [[[1,1,1],
     [1,1,1],
     [1,1,1]].toForceSetup,10,100],
   'Neutral'=>
   [[[1,1,0.01],
     [1,1,0.01],
     [1,1,0.01]].toForceSetup,500,1500]
];

datastore currentSetupIndex:=0;
datastore nextSetups:=[SETUP[0,1,0].toBuiltin];
datastore stepsInCurrentSetup:=0;

switchSetup->begin
  local result:=void;
  local switched:=false;
  nextSetups.size>1
  ? begin
      stepsInCurrentSetup+=1;
      result:=nextSetups[0];
      nextSetups[0]:=void;
    end
  : (state[1].euklideanNorm.max<LOWER_SPEED_LIMIT) or (stepsInCurrentSetup+=1)>SETUP[currentSetupIndex,1,2]
    ? begin
        switched:=true;
        saveState(currentSetupIndex=SETUP.size-1);
        (currentSetupIndex+=1)<SETUP.size
        ? begin
            local prev:=SETUP[currentSetupIndex-1,1,0];
            local next:=SETUP[currentSetupIndex  ,1,0];
            nextSetups:=map(0.5-0.5*cos(pi*[1..SETUP[currentSetupIndex,1,1]]/SETUP[currentSetupIndex,1,1]),
                            (w)->toBuiltin(prev*(1-w)+next*w));
            result:=nextSetups.head;
            nextSetups:=nextSetups.tail;
            stepsInCurrentSetup:=0;
          end
        : begin
            plotQueuePut('QUEUE_END');
            return([]);
          end;
      end
    : result:=nextSetups[0];
  ['forces'=>result.toForceTriplet,
   'sets'=>getInteractionSets(state,result.getInner(1).abs.max*2.4),
   'pull'=>begin
      local range:=state[0].euklideanNorm.sort[floor(PARTICLE_COUNT*[0.9,0.95])];
      newLinearInterpolator([[0,0],[range[0],0],[range[1],-1E-2]]);
    end,
   'switched'=>switched].toMap;
end;

@Overload
toForceTriplet(setup:ForceSetup)->setup.map((triplet)->
  begin
    local range  :=triplet[0];
    local attract:=triplet[1];
    local couple :=triplet[2];
    [newBSpline([[0        ,-75],
                 [0.6*range,0],
                 [1.2*range,1.5*attract],
                 [1.8*range,0],
                 [2.4*range,0],
                 [3  *range,0]]),
     newBSpline([[0        ,4*couple],
                 [0.6*range,2*couple],
                 [1.2*range,  couple],
                 [1.8*range,0],
                 [2.4*range,0],
                 [3  *range,0]])];
  end).toForceTriplet;

private F(points:List,velocities:List,forceFunction:Expression(1),couplingFunction:Expression(1),pairing:List(2))->begin
  local dist:=(
  local deltas:=points[pairing[1]]-points[pairing[0]]).euklideanNorm;
  local accel:=deltas/dist                                    *forceFunction   (dist)
              +(velocities[pairing[1]]-velocities[pairing[0]])*couplingFunction(dist);
  groupToList(accel     |(-accel),
              pairing[0]|pairing[1],
              0,
              ::+,
              PARTICLE_COUNT);
end;

private D(centralPull,forceTriplet:ForceTriplet,interactionSets)->(state:List(2))->begin
  local p:=state[0];
  local v:=state[1];
  [v,(p+v)*centralPull(p.euklideanNorm)+interactionSets.pEach(s,F(p,v,forceTriplet[s[0],0],forceTriplet[s[0],1],s[1]),+)];
end;

private D_noInteract(centralPull)->(state:List(2))->begin
  local p:=state[0];
  local v:=state[1];
  [v,(p+v)*centralPull(p.euklideanNorm)];
end;
//==================================================================:PHYSICS SETUP
//PERSISTENT STATE:===============================================================
private datastore positionHistory;
private datastore state;
//===============================================================:PERSISTENT STATE
//VARIABLES FOR LOGGING:==========================================================
mutable interactionsConsidered:=0;
mutable microStepCount        :=0;
//==========================================================:VARIABLES FOR LOGGING

private pairType(ij:IntList(2))->(ij and 1).agg(+);
basePairs    :=[0..PARTICLE_COUNT-1].cross([0..PARTICLE_COUNT-1]).filter((i)->i.agg(<));
basePairTypes:=basePairs.map(::pairType);

//PLOTTING:=======================================================================
SCAN_DI:=cross([-1..1],[-1..1]);

nearestNeighborDistances(points:List)->begin
  local x:=points.getInner(0);
  local y:=points.getInner(1);
  local low:=[x.min,y.min];
  local range:=(sqrt(PARTICLE_COUNT)-1)/([x.max,y.max]-low).max;
  local T:=round(({$p}-low)*range);
  local M:=points.group(points.map(T));
  points.each(point,begin
    local I:=T(point);
    M.getAll((I+SCAN_DI.transpose).transpose).agg(|).each(q,q==point ? void : euklideanNorm(q-point),min).min(1/range.euklideanNorm);
  end);
end;

private prepareForPlot(points:List)->
  [points,points.nearestNeighborDistances].transpose.map({[$x[0]-$x[1]/2,$x[0]+$x[1]/2]})
  .group([0..points.size-1] and 1)
  .each(groupByClass,[groupByClass[0],groupByClass[1].agg(|)])
  .toMap
  .mergeMaps([0=>[],1=>[]].toMap,::orElse);

private plotPreparedSystem(balls:Map(2))->begin
  local xExtend:=void;
  local yExtend:=void;
save;
  local locations:=balls.getInner(1).agg(|).transpose.abs.map(
    (list)->begin
      local x:=list.sort.tail(floor(list.size*0.95));
      local y:=arcsin(([0..x.size-1]+list.size-x.size)/(list.size-1))/(0.5*pi);
      (x/y).agg(+)/(x.size);
    end);

  plot();
  balls[0].size=0 ? void : balls[0].addPlot('blue e fs 0.5');
  balls[1].size=0 ? void : balls[1].addPlot('RGB1,0.5,0 e fs 0.5');

  xExtend.isVoid ? begin
    clearAnimation;
    xExtend:=locations[0];
    yExtend:=locations[1];
    setOptions(
     ['autoscaleFactor'=>1,
      'autoscaleX'=>false,
      'autoscaleY'=>false,
      'axisStyleX'=>2,
      'axisStyleY'=>2,
      'y0'=>-yExtend,
      'y1'=> yExtend,
      'x0'=>-xExtend,
      'x1'=> xExtend,
      'logscaleX'=>false,
      'logscaleY'=>false,
      'preserveAspect'=>true].toMap);
    display;
  end : begin
    xExtend:=xExtend*0.98+locations[0]*0.02;
    yExtend:=yExtend*0.98+locations[1]*0.02;
    locations[0].tail.each(x,x>xExtend ? xExtend:=xExtend*0.995+x*0.005 : void);
    locations[1].tail.each(y,y>xExtend ? yExtend:=yExtend*0.995+y*0.005 : void);
    setOptions(['y0'=>-yExtend,
                'y1'=> yExtend,
                'x0'=>-xExtend,
                'x1'=> xExtend].toMap);
  end;
  addAnimationFrame;
  postDisplay;
end;
//=======================================================================:PLOTTING
//PARTITIONING:===================================================================
getInteractionSets(state:List(2),maxForceRange)->begin
  //The max. distance that two particles can move apart during one step is maxSpatialStep
  local maxSpatialStep:=state[1].euklideanNorm.max*TIME_STEP_SIZE;
  local safeRange:=maxForceRange+maxSpatialStep;
  local mask:=euklideanNorm(state[0,basePairs.getInner(0)]-state[0,basePairs.getInner(1)])<=safeRange;
  interactionsConsidered+=mask.trueCount;
  local sets:=group(basePairs[mask],basePairTypes[mask]).toList;
  sets.size=0 ? return [] : void;
  //while(sets.size<mnhInfo['configured_cpus'],begin
  //  sets:=sets[sets.map((s)->s[1].size).sortPerm];
  //  local setToSplit:=sets.trailing;
  //  sets:=sets.leading|
  //  [[setToSplit[0],setToSplit[1].head(setToSplit[1].size div 2)],
  //   [setToSplit[0],setToSplit[1].tail(setToSplit[1].size div 2)]];
  //end);
  sets.filter((s)->s[1].size>0).map((s)->[s[0],s[1].transpose]);
end;
//===================================================================:PARTITIONING
//TIME INTEGRATION:===============================================================
private microTimestep(df,state:List(2),dt)->begin
  local F0:=dt*df(state);                    //   1  |  1
  local F1:=dt*df(state+F0);                 //   1  | 1/2 1/2
  local F2:=dt*df(state+0.5*F0+0.5*F1);      // -----+---------
  local deltaO2:=F0*0.5+F1*0.16666666666666666+F2*0.3333333333333333;    //   1  | 1/2 1/6 1/3  //-> 2nd order
  local deltaO1:=F1;                                                     //   1  |  0   0   1
  [state+deltaO2,((deltaO1-deltaO2)[1].euklideanNorm.max/ERROR_TOLERANCE).sqrt];
end;

private timeStep(setup:Map,state:List(2),dt)->begin
  local subSteps:=1;
save;

  local interactionSets:=setup['sets']          orElse fail;
  local df:=interactionSets.size==0
            ? D_noInteract(setup['pull'  ] orElse fail)
            : D(           setup['pull'  ] orElse fail,
                           setup['forces'] orElse fail,
                           interactionSets);

  local errorEstimate:=Inf;
  local y:=state;
  while(errorEstimate>1,begin
    microStepCount+=subSteps;
    errorEstimate:=0;
    y:=state;
    local dtSub:=dt/subSteps;
    [1..subSteps].each(step,begin
      local y_:=microTimestep(df,y,dtSub);
      errorEstimate:=max(errorEstimate,y_[1]);
      y:=y_[0];
    end);
    errorEstimate>1
    ? subSteps:=ceil(errorEstimate*1.1*subSteps)//warn('Increasing number of substeps from ',subSteps,' to ',subSteps:=ceil(errorEstimate*1.1*subSteps))
    : void;
  end);

  (errorEstimate<0.9*(subSteps-1)/subSteps)
  ? subSteps-=1
  : void;
  y;
end;
//===============================================================:TIME INTEGRATION

getInitialPosition(count in [4,12,16,24,32,44,52,60,68,76,80,88,96,112,120,124,140,148,156,164,172,180,188,192,208,216,232,240,248,256,268,276,284,300,308,316,332,348,360,368,376,384,392,400,408,424,432,440,448,460,468,484,492,500,524,532,540,548,556,560,576,584,592,608,616,624,632,640,648,656,680,688,692,708,716,724,732,740,756,772,788,804,812,820,824,840,848,864,872,880,896,904,912,928,936,944,952,960,968,988,1004,1012,1020,1028,1036,1044,1052,1060,1076,1092,1108,1116,1124,1148,1152,1160,1176,1184,1192,1208,1216,1224,1240,1256,1264,1272,1280,1288,1296,1304,1316,1340,1348,1356,1372,1380,1388,1396,1412,1428,1436,1460,1468,1476,1484,1500,1508,1512,1528,1536,1544,1560,1568,1576,1584,1592,1600,1624,1632,1648,1656,1664,1672,1680,1696,1700,1708,1716,1748,1756,1764,1780,1788,1804,1812,1828,1844,1852,1868,1876,1884,1900,1908,1916,1928,1936,1944,1952,1968,1976,1992,2000,2016,2024,2032,2040,2056,2072,2080,2104,2112,2128,2136,2148,2156,2164,2172,2188,2204,2212,2220,2236,2244,2252,2260,2284,2292,2308,2324,2332,2340,2348,2364,2380,2392,2416,2432,2440,2448,2456,2472,2480,2496,2504,2512,2520,2528,2536,2568,2576,2584,2600,2608,2624,2632,2644,2660,2668,2676,2684,2700,2708,2716,2724,2732,2748,2756,2772,2788,2796,2804,2820,2828])->begin
  local k:=ceil(sqrt(count)-2);
  local P:=cross([-k..k],[-k..k]);
  P:=P[(P+0.5).euklideanNorm.sortPerm].head(count);
  local m:=P.map((p)->(p and 1).agg(xor))=0;
  [P[m],P[!m]].transpose.each(p,p[0],p[1])
     .map((p)->p+0.5+1E-6*(0.5-random(2)));
end;

saveState(force:Boolean)->begin
  local lastSaved:=scriptTime;
save;
  force or scriptTime>lastSaved+120
  ? begin
      lastSaved:=scriptTime;
      writeDataStores;
      log('Datastores updated');
      true;
    end
  : false;
end;

encodeHistory(x)->round(x*1000).serialize.compress;
decodeHistory(x)->x.decompress.deserialize*1E-3;

mutable plotQueue:=[];
synchronized plotQueuePut(balls)->begin
  plotQueue|=[balls];
end;

synchronized plotQueueGet->begin
  local result:=plotQueue[0];
  result.isVoid ? void : plotQueue:=plotQueue.tail;
  result;
end;

plotThread:=isGuiStarted
  ? async({begin
      {begin local next:=void; save; while((next:=plotQueueGet).isVoid,sleep(1)); next=='QUEUE_END' ? void : next; end}
      .toIteratableExpression
      .pMap(::prepareForPlot)
      .agg(::plotPreparedSystem);
      true;
    end})
  : {true};

main->begin
  print('Setting up calculation for ',PARTICLE_COUNT,' particles');
  assertUniqueInstance;
  local prevOutput:=scriptTime-1000;
  state.isVoid
  ? begin
      print('Creating initial state...');
      state:=[getInitialPosition(PARTICLE_COUNT),map([1..PARTICLE_COUNT],()->[0,0])];
      positionHistory:=[state[0].encodeHistory];
      print('Starting calculation');
    end
  : log('Resuming calculation @',positionHistory.size,' with setup ',SETUP[currentSetupIndex,0]);
  assert(state.size=2);
  assert(state[0].size=state[1].size=PARTICLE_COUNT);

  isGuiStarted ? plotQueue:=positionHistory.pMap(::decodeHistory) : void;

  local start:=scriptTime;
  local framesStart:=size(positionHistory);
  local doOutput:={begin
          prevOutput:=scriptTime;
          local stepsDone:=size(positionHistory)-framesStart;
          printf('%5d (%5.2f/s); Itr: %5.2f%%; mSteps: %5.2f; %s +%d',
                 size(positionHistory),
                 stepsDone/(scriptTime-start),
                 100*interactionsConsidered/stepsDone/(PARTICLE_COUNT*(PARTICLE_COUNT-1)/2),
                 microStepCount/stepsDone,
                 SETUP[currentSetupIndex,0],
                 stepsInCurrentSetup);
          microStepCount         :=0;
          interactionsConsidered:=0;
          start      :=scriptTime;
          framesStart:=positionHistory.size;
        end};
  local setup:=void;
  while((setup:=switchSetup).isMap,begin
    setup.isVoid ? return doOutput() orElse print('Done calculating') : void;
    state:=timeStep(setup,state,TIME_STEP_SIZE);
    begin
      local c0:=state[0].agg(+)/state[0].size;
      local c1:=state[1].agg(+)/state[1].size;
      state:=[state[0].map((x)->x-c0),
              state[1].map((x)->x-c1)];
    end;
    isGuiStarted ? plotQueuePut(state[0]) : void;

    positionHistory|=[state[0].encodeHistory];
    setup['switched'] OR saveState(false) OR (scriptTime>30+prevOutput)
    ? doOutput()
    : void;
  end);
  while(plotThread().isVoid,sleep(0.1));
end;

main('replay')->begin
  assertGuiStarted;
  local rescan:=true;
  local displayed:=0;
  local toDisplay:=void;
  while(rescan,begin
    toDisplay:=positionHistory.size;
    print('Displaying frames ',displayed,'..',toDisplay);
    plotQueue:=positionHistory.head(toDisplay).tail(displayed).pMap(::decodeHistory);
    displayed:=toDisplay;
    local pendingBefore:=-1;
    while(plotQueue.size>0,
      begin
        local pending:=plotQueue.size;
        pending==pendingBefore
        ? void
        : print(pendingBefore:=pending,' frames pending');
        sleep(1);
      end);
    rescan:=ask('Rescan?',['Yes','No'])=='Yes';
  end);
  print('Waiting for plot queue processing end');
  plotQueuePut('QUEUE_END');
  while(plotThread().isVoid,sleep(1));
end;

