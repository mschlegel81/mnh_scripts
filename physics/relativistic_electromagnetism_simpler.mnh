ducktype FractionOfC(v:Numeric)->0<=v<=1;

private makeCondensatorPositions   (v:FractionOfC)->[[{[ $t*v,-3.5]}, 1],
                                                     [{[-$t*v,-2.5]},-1],
                                                     [{[ $t*v,-1.5]}, 1],
                                                     [{[-$t*v,-0.5]},-1],
                                                     [{[ $t*v, 0.5]}, 1],
                                                     [{[-$t*v, 1.5]},-1],
                                                     [{[ $t*v, 2.5]}, 1],
                                                     [{[-$t*v, 3.5]},-1]];
private makeDivergePositions       (v:FractionOfC)->[[{[0, $t*v]}, 1],
                                                     [{[0,-$t*v]},-1]];
private makeFlybyPositions         (v:FractionOfC)->[[{[ 1,0*$t    ]}, 1],
                                                     [{[-1,$t*v]},-1]];
private makeMovingPairPositions    (v:FractionOfC)->[[{begin local tau:=$t*v; [ sin(tau*3)*0.1,(tau-0.1*(cos(3*tau)/3))*0.79]; end}, 1],
                                                     [{begin local tau:=$t*v; [-sin(tau*3)*0.1,(tau-0.1*(cos(3*tau)/3))*0.79]; end},-1]];
private makeSinglePosition         (v:FractionOfC)->[[{[0,$t*v]},1]];
private makeAtomPosition           (v:FractionOfC)->[[{[0                   ,$t*0                ]}, 2],
                                                     [{[sin($t*v)    ,cos($t*v)    ]},-1],
                                                     [{[sin($t*v*-2)*0.5,cos($t*v*-2)*0.5]},-1]];
private makePairPositions          (v:FractionOfC)->[[{[ 0.5,$t*v]}, 1],
                                                     [{[-0.5,$t*v]},-1]];
private makeCirclingPositions      (v:FractionOfC)->[[{[ cos($t*v), sin($t*v)]}, 1],
                                                     [{[-cos($t*v),-sin($t*v)]},-1]];
private makeDoubleCirclingPositions(v:FractionOfC)->[[{[ 2+cos($t*v), sin($t*v)]}, 1],
                                                     [{[ 2-cos($t*v),-sin($t*v)]},-1],
                                                     [{[-2-cos($t*v), sin($t*v)]},-1],
                                                     [{[-2+cos($t*v),-sin($t*v)]}, 1]];
private invSpiralTau(x)->1/2*sqrt(9*x^2+1)*x+1/6*ln(sqrt(9*x^2+1)+3*x);
private spiral_tau(y)->begin
  local x0:=sqrt(y+0.25)-0.5;
  local x1:=x0+0.01; local f1:=invSpiralTau(x1)-y;
        x0:=x0-0.01; local f0:=invSpiralTau(x0)-y;
  local xm:=x1-f1*(x0-x1)/(f0-f1);
  local fm:=invSpiralTau(xm)-y;
  max(0,
  f0*fm>0
  ? x1-f1*(xm-x1)/(fm-f1)
  : xm-fm*(x0-xm)/(f0-fm));
end;

private makeSpiralPositions    (v:FractionOfC)->[[{begin local tau:=spiral_tau(-$t*v); [ cos(3*tau), sin(3*tau)]*tau; end}, 1],
                                                 [{begin local tau:=spiral_tau(-$t*v); [-cos(3*tau),-sin(3*tau)]*tau; end},-1]];
private makeAnnihilatePositions(v:FractionOfC)->[[{[ v*(sqr(max(0,min(12,$t+12)))*0.041666666666666664-6),0]}, 1],
                                                 [{[-v*(sqr(max(0,min(12,$t+12)))*0.041666666666666664-6),0]},-1]];
SCENARIOS:=['circling'       =>[::makeCirclingPositions      ,{[0..99]/100*2*pi/$v}],
            'double_circling'=>[::makeDoubleCirclingPositions,{[0..99]/100*2*pi/$v}],
            'pair'           =>[::makePairPositions          ,{[-100..100]/100*(8/$v)}],
            'single'         =>[::makeSinglePosition         ,{[-100..100]/100*(8/$v)}],
            'moving_pair'    =>[::makeMovingPairPositions    ,{[-100..100]/100*(8/$v)}],
            'flyby'          =>[::makeFlybyPositions         ,{[-100..100]/100*(8/$v)}],
            'diverge'        =>[::makeDivergePositions       ,{[-100..100]/100*(8/$v)}],
            'condensator'    =>[::makeCondensatorPositions   ,{[-100..100]/100*(8/$v)}],
            'spiral'         =>[::makeSpiralPositions        ,{[-180..20 ]/100*(8/$v)}],
            'annihilate'     =>[::makeAnnihilatePositions    ,{[-150..50 ]/100*(8/$v)}],
            'atom'           =>[::makeAtomPosition           ,{[0..99]/100*2*pi/$v}]].toMap;

WEATHER_FLAG_POSITIONS:=[-20..20].each(x,[-23..23].each(y,[x+(y and 1)*0.5,0.5*sqrt(3)*y]*0.4),|);

datastore storedScenarios:=[].toMap;

USE root;

//*Find apparent positions by Regula Falsi
//*Solve: |p(t-dt)-p_obs| - dt = 0 for dt
apparentPosition(positionFunction:Expression(1),observerPosition:NumericList(2),atTime:Real,speed:Real)->begin
  //Solve: |p(t-dt)-p_obs| = dt
  //       |p(t-dt)-p_obs| - dt = 0
  //Corner case 1: Moving directly towards observer
  //|p(t-dt)-p_obs| - dt = dx(0)-v*dt-dt
  //                     = dx(0)+(-v-1)*dt = 0
  //               dx(0) = (v+1)*dt
  //                  dt =  dx(0)/(1+v)
  //Corner case 1: Moving directly away from observer
  //|p(t-dt)-p_obs| - dt = dx(0)+v*dt-dt
  //                     = dx(0)+(v-1)*dt = 0
  //               dx(0) = (1-v)*dt
  //                  dt =  dx(0)/(1-v)
  local t0:=       euklideanNorm(positionFunction(atTime   )-observerPosition).max(1E-3);
  t0:=regulaFalsi({euklideanNorm(positionFunction(atTime-$t)-observerPosition)-$t},
                  t0/(1+speed),
                  t0/(1-speed),
                  1E-4,
                  1E-4);
  [positionFunction(atTime-t0     )-observerPosition,
   positionFunction(atTime-t0+1E-3)-observerPosition];
end;

apparentPositions(scenario,observerPosition:NumericList(2),atTime:Real,speed:Real)->
  scenario.each(charge,apparentPosition(charge[0],observerPosition,atTime,speed)|charge[1]);

dataToStore(data)->begin
  local previousFrame:=WEATHER_FLAG_POSITIONS.map({[0,0]});
  data.each(frame,begin
    local curr:=frame-previousFrame;
    previousFrame:=frame;
    curr;
  end).transpose.serialize.compress(1);
end;

storeToData(stored:String)->begin
  local previousFrame:=WEATHER_FLAG_POSITIONS.map({[0,0]});
  stored.decompress.deserialize.transpose.each(d,previousFrame+=d);
end;

getCalculatedScenario(scenarioName in (SCENARIOS.getInner(0)),speed:FractionOfC)->begin
  local key:=[scenarioName,speed];
  storedScenarios[key].isVoid
  ? begin
      assertUniqueInstance;
      local startOfCalculation:=scriptTime;
      local scenarioAtSpeed:=SCENARIOS[scenarioName,0](speed);
      local pointsInTime:=SCENARIOS[scenarioName,1].toExpression()(speed);
      print('Calculating scenario ',key.join(" "),'; ',pointsInTime.size,' frames must be calculated');
      print(repeat("-",pointsInTime.size-1),'|');

      local scenarioData:=
      pointsInTime.pMap((t)->
        printDirect('.') orElse
        WEATHER_FLAG_POSITIONS
          .map((obsPos)->apparentPositions(scenarioAtSpeed,obsPos,t,speed).each(p,p[2]*p[0]/(p[0].euklideanNorm^3),+))
          .map((f)->f.isNan.agg(or) OR f.isInfinite.agg(or) ? [0,0] : f));
      local globalMaxForce    :=scenarioData.pMap({$x.map(::euklideanNorm)}).flatten    .sort;
            globalMaxForce    :=globalMaxForce[round(0.9*globalMaxForce.size)];
      print;
      scenarioData:=scenarioData.pEach(frameData,begin
        printDirect('.');
        frameData./(globalMaxForce).map({round($f*18/max(1,$f.euklideanNorm))});
      end);
      print("\nCalculation done in ",scriptTime-startOfCalculation,' seconds');
      storedScenarios[key]:=scenarioData.dataToStore;
      writeDataStores;
      scenarioData;
    end
  : begin
      print('Restoring scenario ',key.join(" "));
      storedScenarios[key].storeToData;
    end;
end;

normed(x:NumericList)->x/x.euklideanNorm;

maxTipSize:=0.15;

dArrow(dx:IntList(2))->begin
  local tipSize:=min(maxTipSize,euklideanNorm(dx)/100);
  local fwd:=dx; fwd:=fwd.normed*tipSize;
  local lft:=[-fwd[1],fwd[0]];
  [-dx/100,
   +dx/100,
   +dx/100-fwd-0.3*lft,
   +dx/100,
   +dx/100-fwd+0.3*lft,
   [Nan,Nan]].transpose;
end;

arrow(xc:NumericList(2),dx:IntList(2))->(dArrow(dx)+xc).transpose;

showAnimation(scenarioName in (SCENARIOS.getInner(0)),speed:FractionOfC)->begin
  [['logscaleY',false],
   ['logscaleX',false],
   ['autoscaleX',false],
   ['autoscaleY',false],
   ['axisStyleX',0],
   ['axisStyleY',0],
   ['x0',-8],['x1',8],
   ['y0',-8],['y1',8]].toMap.setOptions;
  clearAnimation;
  local calculatedScenario:=getCalculatedScenario(scenarioName,speed);
  local actualPositions   :=begin
    local scenarioForSpeed:=SCENARIOS[scenarioName,0](speed);
    SCENARIOS[scenarioName,1]
      .toExpression()(speed)
      .each(t,scenarioForSpeed.map({[$s[0](t),sign($s[1])]})
                              .group(1)
                              .each(g,[g[1].getInner(0),(g[0]>0 ? 'red' : 'blue')&' . 2',
                                [g[0]>0 ? '+' : '-' ,
                                 8,//size
                                 'C',
                                 'Courier New',
                                 [1,1,1]]]));
  end;
  print(repeat("-",calculatedScenario.size-1),'|');
  //Convert frame data to plot commands


  calculatedScenario.each(frameData,
    future({begin
                [[[WEATHER_FLAG_POSITIONS,$frameData].transpose.each(p,arrow@p,|),'0.9 black']]
               |actualPositions[index].map({head($x,2)});
            end},[frameData]))
  .each(frameFuture,begin
    printDirect('.');
    plot();
    frameFuture().each(stmt,addPlot@stmt);
    actualPositions[index].each(charge,
      charge[0].each(p,drawText@(p|charge[2])));
    addAnimationFrame;
  end);
  postDisplay;
  print;
end;

//*Show animation for the given scenario and movement speed
//*Speed is fraction of c; 0.0<=speed<=1.0
main(scenario in (SCENARIOS.getInner(0)),speed)->showAnimation(scenario,toReal(speed));
//*Prepare animation for the given scenario and movement speed without displaying it
main('prepare',scenario in (SCENARIOS.getInner(0)),speed)->getCalculatedScenario(scenario,speed);
//*List script parameters for cached scenarios
main('list')->
  storedScenarios.size = 0
  ? print('No scenarios are stored')
  : storedScenarios.getInner(0).sort.map({join($x,' ').print});
//*Initialize defaults
main('defaults')->
  begin
    print('INITIALIZING DEFAULT SCENARIOS');
    SCENARIOS.getInner(0).cross([0.9,0.5])
    .filter({storedScenarios[$key].isVoid})
    .{begin
        print('Missing defaults: ');
        $L.map({join($x,' ').print});
        $L;
      end}
    .each(param,begin
      getCalculatedScenario@param;
      writeDataStores;
    end);
  end;
//*Delete a specific scenario
main('delete',scenario,speed)->begin
  assert(!(storedScenarios[[scenario,speed.toReal]].isVoid),scenario,' ',speed,' does not exist');
  assertUniqueInstance;
  storedScenarios[[scenario,speed.toReal]]:=void;
  print(scenario,' ',speed,' has been deleted');
end;
