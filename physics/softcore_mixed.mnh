#!/usr/bin/mnh
USE rungeKutta;

PERSISTENT:=true;

makeAttractiveForce(neutralRange,amplitude)->[ amplitude*10.124,'*(cos($x*',pi/2/neutralRange,')+1)*ord($x<',2*neutralRange,')*(',  neutralRange,'/$x-sqr(',neutralRange,'/$x))'].toExpression;
makeRepulsiveForce (neutralRange,amplitude)->[-amplitude*10.124,'*(cos($x*',pi/2/neutralRange,')+1)*ord($x<',2*neutralRange,                       ')*sqr(',neutralRange,'/$x)' ].toExpression;

mutable absForce00:=makeAttractiveForce(1,1);
mutable absForce11:=absForce00;
mutable absForce01:=absForce00;

SCENARIO_SIMPLE :='simple';
SCENARIO_POLYMER:='polymer';
SCENARIO_NACL   :='NaCl';
SCENARIO_DIPOLES:='dipoles';
SCENARIO_PHOBIC :='phobic';
SCENARIO_DUST   :='dust';
SCENARIO_HEX    :='hex';
SCENARIO_LAYERS :='layers';

SCENARIO_INIT:=
  [SCENARIO_SIMPLE=>
    {begin
      absForce00:=makeAttractiveForce(1  ,1);
      absForce11:=absForce00;
      absForce01:=absForce00;
    end},
   SCENARIO_NACL=>
    {begin
      absForce00:=makeAttractiveForce(1,1);
      absForce11:=absForce00;
      absForce01:=makeAttractiveForce(sqrt(0.5),1);
    end},
  SCENARIO_POLYMER=>
    {begin
      absForce00:=makeRepulsiveForce(1/2,1);
      absForce11:=absForce00;
      absForce01:=makeAttractiveForce(0.75/2,1);
    end},
  SCENARIO_DIPOLES=>
    {begin
      absForce00:=makeAttractiveForce(1,0.5);
      absForce11:=absForce00;
      absForce01:=makeAttractiveForce(0.3,1);
    end},
  SCENARIO_PHOBIC=>
    {begin
      absForce00:=makeAttractiveForce(1,1);
      absForce11:=makeAttractiveForce(1,1);
      absForce01:=makeRepulsiveForce(0.6,1);
    end},
  SCENARIO_DUST=>
    {begin
      absForce00:=makeAttractiveForce(1,0.5);
      absForce11:=makeAttractiveForce(cos(pi/6)*2,1);
      absForce01:=makeAttractiveForce(1,1);
    end},
  SCENARIO_HEX=>
    {begin
      absForce00:=makeAttractiveForce(1  ,0.5);
      absForce11:=makeAttractiveForce(1  ,0.5);
      absForce01:=makeAttractiveForce(0.5,1);
    end},
  SCENARIO_LAYERS=>
    {begin
      absForce00:=makeAttractiveForce(0.7,1);
      absForce11:=makeAttractiveForce(0.7,1);
      absForce01:=makeAttractiveForce(1  ,1);
    end}].toMap;

SCENARIOS:=SCENARIO_INIT.getInner(0);

type SimSetup(L:List(3))->L[0].isInt AND L[0]>=0 AND
                          L[1].isInt AND L[1]>=0 AND
                          L[2] in SCENARIOS;
@Override
@SuppressUnusedWarning
//Actually used implicitly in format statements
toString(s:SimSetup)->s.join(" ");
simSetupOf(count0,count1,scenario)->[count0.toInt,count1.toInt,scenario].toSimSetup;

//Particle class config:---------------------
mutable PARTICLE_COUNT:=void;
mutable PARTICLE_CLASS:=void;
mutable PAIRS_00:=void;
mutable PAIRS_11:=void;
mutable PAIRS_01:=void;
setParticleCount(simSetup:SimSetup)->begin
  PARTICLE_COUNT:=simSetup[0]+simSetup[1];
  PARTICLE_CLASS:=ord(vanDerCorputGenerator(2).head(PARTICLE_COUNT).sortPerm<simSetup[1]);
  PAIRS_00:=cross([0..PARTICLE_COUNT-1],[0..PARTICLE_COUNT-1]).filter({$k[0]<$k[1] AND PARTICLE_CLASS[$k[0]]=0 AND PARTICLE_CLASS[$k[1]]=0});
  PAIRS_11:=cross([0..PARTICLE_COUNT-1],[0..PARTICLE_COUNT-1]).filter({$k[0]<$k[1] AND PARTICLE_CLASS[$k[0]]=1 AND PARTICLE_CLASS[$k[1]]=1});
  PAIRS_01:=cross([0..PARTICLE_COUNT-1],[0..PARTICLE_COUNT-1]).filter({                PARTICLE_CLASS[$k[0]]=0 AND PARTICLE_CLASS[$k[1]]=1});
end;
//---------------------:Particle class config

setupForces(simSetup:SimSetup)->SCENARIO_INIT[simSetup[2]]();
//------------------------------:Force config

@SuppressUnusedWarning
fp(P:NumericList)->begin
  local FIBFAK:=2*pi/sqr((sqrt(5)-1)/2);
  [cos(FIBFAK*P),sin(FIBFAK*P)].transpose*sqrt(P);
end;

centralDartThrowing(count:Int)->begin
  local result:=[[1E-6,0.0]];
  local radius:=0.3;
  while(result.size<count,begin
    local p:=2*pi*random;
    p:=radius*[cos(p),sin(p)];
    result.each(q,euklideanNorm(q-p)>1,AND)
    ? result|=[p]
    : void;
    radius+=0.001;
  end);
  result;
end;

memoized zeros(listSize>1)->[0..listSize-1].map({[0,0]});

forcesOf(points:List,pairs:List,absForce:Expression(1))->begin
  local diffs:=points[pairs.getInner(0)]-
               points[pairs.getInner(1)];
  local dists :=diffs.euklideanNorm;
  local forces:=(absForce(dists)/dists)*diffs;

  [pairs.getInner(0),-forces].transpose|
  [pairs.getInner(1), forces].transpose;
end;

attractToOrigin(points:List)->-0.01*points;
mutable globalDampingFactor:=0;

D(system:List(2))->begin
  local points:=system[0];
  [system[1],points.attractToOrigin
            +globalDampingFactor*(system [1])
            +(forcesOf(points,PAIRS_00,absForce00)
             |forcesOf(points,PAIRS_11,absForce11)
             |forcesOf(points,PAIRS_01,absForce01)
             ).group(0).getInner(1)
            .map({[$g.head.head,$g.getInner(1).agg(+)]})
            .sort(0)
            .getInner(1)];
end;

nearestNeighborDistances_recursive(points:List,splitIndex)->
  points.size<50
  ? points.pEach(p,points.each(q,q==p ? void : euklideanNorm(p-q),min))
  : begin
      local oneDim    :=points.getInner(splitIndex and 1);
      local splitValue:=oneDim.sort[points.size div 2];
      local mask      :=oneDim<splitValue;
      local part0     :=nearestNeighborDistances_recursive(points[ mask],splitIndex+1);
      local part1     :=nearestNeighborDistances_recursive(points[!mask],splitIndex+1);
      local bMask     :=abs(oneDim-splitValue)<max(part0.max,part1.max);
      local partB     :=nearestNeighborDistances_recursive(points[bMask],splitIndex+1);
      [indexOf( mask),part0].transpose.toMap.mergeMaps(
      [indexOf(!mask),part1].transpose.toMap,::min).mergeMaps(
      [indexOf(bMask),partB].transpose.toMap,::min)
      .sort(0).getInner(1);
    end;

prepareForPlot(points:List)->
  [points,points.nearestNeighborDistances_recursive(0)].transpose.pMap({[$x[0]-$x[1]/2,$x[0]+$x[1]/2]})
  .group(PARTICLE_CLASS)
  .each(groupByClass,[groupByClass[0],groupByClass[1].agg(|)])
  .toMap
  .mergeMaps([0=>[],1=>[]].toMap,::orElse);

plotPreparedSystem(balls:Map(2),addFrame:Boolean)->begin
  local y0:=void;
  local y1:=void;
  local x0:=void;
  local x1:=void;
save;
  local y0_:=0;
  local y1_:=0;
  local x0_:=0;
  local x1_:=0;
  balls.getInner(1).each(groupByClass,begin
     y0_:=min(y0_,groupByClass.getInner(1).agg(min));
     y1_:=max(y1_,groupByClass.getInner(1).agg(max));
     x0_:=min(x0_,groupByClass.getInner(0).agg(min));
     x1_:=max(x1_,groupByClass.getInner(0).agg(max));
  end);

  plot();
  balls[0].size=0 ? void : balls[0].addPlot('blue e f 0.5');
  balls[1].size=0 ? void : balls[1].addPlot('RGB1,0.5,0 e f 0.5');

  y0.isVoid ? begin
    clearAnimation;
    y0:=y0_;
    y1:=y1_;
    x0:=x0_;
    x1:=x1_;
    setOptions(
     ['autoscaleFactor'=>1,
      'autoscaleX'=>false,
      'autoscaleY'=>false,
      'axisStyleX'=>3,
      'axisStyleY'=>3,
      'y0'=>y0,
      'y1'=>y1,
      'x0'=>x0,
      'x1'=>x1,
      'logscaleX'=>false,
      'logscaleY'=>false,
      'preserveAspect'=>true]);
    postDisplay;
  end : begin
    y0:=y0*0.95+y0_*0.05;
    y1:=y1*0.95+y1_*0.05;
    x0:=x0*0.95+x0_*0.05;
    x1:=x1*0.95+x1_*0.05;
    setOptions(['y0'=>y0,
                'y1'=>y1,
                'x0'=>x0,
                'x1'=>x1]);
  end;
  addFrame ? addAnimationFrame : void;
end;

plotSystem(points:List)->points.prepareForPlot.plotPreparedSystem(true);

maxVelocity(sys:List(2))->sys[1].euklideanNorm.max;// pEach(v,v.isScalar ? v : v.euklideanNorm,max);

private datastore replays:=[].toMap;

replay(setup:SimSetup)->
  replays[setup].isVoid
  ? void
  : begin
      printf('Replaying scenario %s',setup);
      setParticleCount(setup);
      setupForces(setup);
      local frames:=replays[setup].decompress.deserialize*1E-3;
      local frameCount:=frames.size;
      frames.toIteratableExpression.pMap(::prepareForPlot)
            .each(ballFuture,printDirect("\r"&(index+1)&'/'&frameCount),
                             ballFuture.plotPreparedSystem(true));
      true;
    end;

calculate(setup:SimSetup,headless:Boolean)->begin
  PERSISTENT
  ? begin
      warn('Only one instance of this script may calculate a scenario at any time to prevent write conflicts');
      assertUniqueInstance;
    end
  : void;
  setParticleCount(setup);
  setupForces(setup);
  local sys:=centralDartThrowing(PARTICLE_COUNT); //fp([1..PARTICLE_COUNT])*0.25;
  sys:=[sys,zeros(sys.size)];
  local step:=integrator(CASH_KARP, //The Integrator
                         ::D,       //The ODE
                         0.05,      //time step size
                         local tolerance:=10); //tolerance
  local plotFuture:=future({0});
  local postPlot:=headless ? {0} : {begin
    plotFuture();
    plotFuture:=future(::plotSystem,[sys[0]]);
    void;
  end};
  postPlot();
  local replay:=[sys[0]];
  local stepCounter:=0;
  globalDampingFactor:=stepCounter*-0.002;
  local stillStepCounter:=0;
  while(stepCounter<100 OR stillStepCounter<20,
  begin
    local t0:=time;
    stepCounter mod 100=0
    ? begin
        print('Reducing integrator tolerance to ',tolerance:=max(1E-7,tolerance/=10));
        step:=integrator(CASH_KARP, //The Integrator
                         ::D,       //The ODE
                         0.05,      //time step size
                         tolerance); //tolerance
      end
    : void;
    globalDampingFactor:=stepCounter*-0.002;
    local velocity:=sys.maxVelocity;
    sys:=sys.step;
    printf('%{$2}s step %{$0}s done in %{time-$1}7.3fs%{velocity>0.02?" ":"*"}s'&
           ' vMax=%{velocity}7.5f',stepCounter+=1,t0,setup);
    postPlot();
    velocity>0.02
    ? stillStepCounter:=0
    : stillStepCounter+=1;
    replay|=[sys[0]];
  end);
  PERSISTENT
  ? replays[setup]:=replay.*(1000).round.serialize.compress(1)
  : print("//You can import this replay later:\n//begin replays[",setup,']:=',replay.*(1000).round.serialize.compress.escape,'; end;');
end;

//*Replay or calculate and display scenario
main(particleCount0,particleCount1,scenario in SCENARIOS)->begin
  assertGuiStarted;
  local setup:=simSetupOf@$params;
  replay(setup) orElse calculate(setup,false);
end;

//*Calculate scenario without displaying it
//*You can chain multiple calculations
main('headless',particleCount0,particleCount1,scenario in SCENARIOS,...)->begin
  assert(PERSISTENT,'Must be persistent');
  local setup:=simSetupOf(particleCount0,particleCount1,scenario);
  replays[setup].isVoid ? calculate(setup,true) : printf('Already calculated {setup}');
  size(...)>=3 ? begin
    writeDataStores;
    'headless'.main@...;
  end : void;
end;

//*List stored scenarios
main('list')->begin
  print('Available replays:');
  replays.size=0 ? print('  -none-')
                 : printf('  %s',replays.getInner(0).sort.sort(2).map({join($x,"\t")}));
end;

//*Delete a specific replay
main('delete',particleCount0,particleCount1,scenario in SCENARIOS)->begin
  assert(PERSISTENT,'Not in persistent mode');
  warn('Only one instance of this script may calculate a scenario at any time to prevent write conflicts');
  assertUniqueInstance;
  local setup:=simSetupOf(particleCount0,particleCount1,scenario);
  replays[setup].isVoid
  ? printf('Replay {setup} does not exist')
  : begin
      replays[setup]:=void;
      printf('Replay {setup} deleted');
    end;
end;

//*Initialize default replays
main('defaults')->main('headless',
  100,100,SCENARIO_NACL,
  100,100,SCENARIO_DIPOLES,
//  100,100,SCENARIO_DUST,
  100,100,SCENARIO_PHOBIC,
  170, 30,SCENARIO_DUST,
  100,100,SCENARIO_HEX,
  100,100,SCENARIO_LAYERS,
  100,100,SCENARIO_POLYMER,
  20 ,  0,SCENARIO_SIMPLE);

