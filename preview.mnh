//Consumer/Food model
ZERO_BOUNDARY:=true;

GROWTH_THRESHOLD :=1;
DIE_THRESHOLD    :=0.25;

CONSUMER_MOVEMENT_FACTOR  :=5;
GROWTH_SPEED              :=1;
DIE_SPEED                 :=5;
FOOD_DIFFUSION_COEFFICIENT:=0.001;
FIRE_DIFFUSION_FACTOR     :=0;
CONSUMPTION_SPEED         :=0.1;
GROW_BACK_FACTOR           :=0.01;

FOOD_CAP:=1.6;
CONSUMER_CAP:=0.7;

TOTAL_STEPS               :=6000;
FEEDBACK_LENGTH:=0;

EQUILIBRIUM_RATIO         :=GROW_BACK_FACTOR/CONSUMPTION_SPEED;
growthFactor:=
newLinearInterpolator([[0                 , -DIE_SPEED*DIE_THRESHOLD    ],
                       [DIE_THRESHOLD     ,                          0  ],
                       [GROWTH_THRESHOLD  ,                          0  ],
                       [GROWTH_THRESHOLD+1, GROWTH_SPEED]]);

consumerCapFactor:=
newLinearInterpolator([[0,0]]|map([0,0.5,1,1.5,2..10]/10*pi/2,(t)->[sin(t)*CONSUMER_CAP+CONSUMER_CAP,cos(t)-1]));
foodCapFactor:=
newLinearInterpolator(
([[0,0]]|map([0,0.5,1,1.5,2..10]/10*pi/2,(t)->[sin(t)*FOOD_CAP+FOOD_CAP,(cos(t)-1)*0.1]))
.{FEEDBACK_LENGTH=0
  ? $0.map((p)->[p[0],p[0]*GROW_BACK_FACTOR+p[1]])
  : $0});

TIME_STEP_SIZE:=1;
ERROR_TOLERANCE:=EQUILIBRIUM_RATIO*0.1;
MAX_SUB_STEPS:=96;
MIN_TIME_STEP_SIZE:=TIME_STEP_SIZE/MAX_SUB_STEPS;

//PLOT_TO_FILE:=true;
//sysWidth :=16*30+ord(ZERO_BOUNDARY);   //1,2,3,4,5,6,8,10,12,15,20,24,30,40,60,120
//sysHeight:= 9*30+ord(ZERO_BOUNDARY);
//exportResolution:=[sysWidth,sysHeight]-ord(ZERO_BOUNDARY); //[1920,1080]

PLOT_TO_FILE:=false;
sysWidth :=16*5+ord(ZERO_BOUNDARY);
sysHeight:= 9*5+ord(ZERO_BOUNDARY);

nextOutputFile->begin
  local i:=-1;
  local name:='';
  while(fileExists(name:=changeFileExt(myPath,'.out.'&(i+=1))));
  log('Writing to next output file: ',name);
  name;
end;

mutable food     :=void;
mutable consumers:=void;
mutable pendingDeltas:=void;
mutable outputFile:=void;
mutable previouslyWrittenToOutput:=void;
RESUMEABLE_RUN:=inspect['declares','food','type'].matches('datastore');

wrapIndex(i,j)->(i+sysWidth) mod sysWidth+((j+sysHeight) mod sysHeight)*sysWidth;
di10:=[0..sysWidth*sysHeight-1].map((k)->[k mod sysWidth,k div sysWidth]+[ 0,-1]).map((k)->wrapIndex@k);
di01:=[0..sysWidth*sysHeight-1].map((k)->[k mod sysWidth,k div sysWidth]+[-1, 0]).map((k)->wrapIndex@k);
di21:=[0..sysWidth*sysHeight-1].map((k)->[k mod sysWidth,k div sysWidth]+[ 1, 0]).map((k)->wrapIndex@k);
di12:=[0..sysWidth*sysHeight-1].map((k)->[k mod sysWidth,k div sysWidth]+[ 0, 1]).map((k)->wrapIndex@k);
boundaryMask:=ZERO_BOUNDARY
              ? cross([sysHeight-1..0],[sysWidth-1..0]).map((k)->ord(k[0]>0 AND k[1]>0))
              : void;

limitIndex(i,j)->max(0,i).min(sysWidth-2)+(max(0,j).min(sysHeight-2))*sysWidth;
diff_di10:=ZERO_BOUNDARY ? [0..sysWidth*sysHeight-1].map((k)->[k mod sysWidth,k div sysWidth]+[ 0,-1]).map((k)->limitIndex@k) : di10;
diff_di01:=ZERO_BOUNDARY ? [0..sysWidth*sysHeight-1].map((k)->[k mod sysWidth,k div sysWidth]+[-1, 0]).map((k)->limitIndex@k) : di01;
diff_di21:=ZERO_BOUNDARY ? [0..sysWidth*sysHeight-1].map((k)->[k mod sysWidth,k div sysWidth]+[ 1, 0]).map((k)->limitIndex@k) : di21;
diff_di12:=ZERO_BOUNDARY ? [0..sysWidth*sysHeight-1].map((k)->[k mod sysWidth,k div sysWidth]+[ 0, 1]).map((k)->limitIndex@k) : di12;

FIRE_DIFF_Xpos:=ZERO_BOUNDARY AND FIRE_DIFFUSION_FACTOR!=0 ? [0..sysWidth*sysHeight-1].map((k)->ord(k mod sysWidth<sysWidth-2 ))*FIRE_DIFFUSION_FACTOR : FIRE_DIFFUSION_FACTOR;
FIRE_DIFF_Xneg:=ZERO_BOUNDARY AND FIRE_DIFFUSION_FACTOR!=0 ? [0..sysWidth*sysHeight-1].map((k)->ord(k mod sysWidth>0          ))*FIRE_DIFFUSION_FACTOR : FIRE_DIFFUSION_FACTOR;
FIRE_DIFF_Ypos:=ZERO_BOUNDARY AND FIRE_DIFFUSION_FACTOR!=0 ? [0..sysWidth*sysHeight-1].map((k)->ord(k div sysWidth<sysHeight-2))*FIRE_DIFFUSION_FACTOR : FIRE_DIFFUSION_FACTOR;
FIRE_DIFF_Yneg:=ZERO_BOUNDARY AND FIRE_DIFFUSION_FACTOR!=0 ? [0..sysWidth*sysHeight-1].map((k)->ord(k div sysWidth>0          ))*FIRE_DIFFUSION_FACTOR : FIRE_DIFFUSION_FACTOR;

diffuse(X,diffusionCoeff<=0.0)->X;
diffuse(X,diffusionCoeff<=0.125)->(X[diff_di10]+X[diff_di12]+
                                   X[diff_di01]+X[diff_di21]-4*X)*diffusionCoeff+X;
diffuse(X,diffusionCoeff> 0.125)->X.diffuse(0.125).diffuse(diffusionCoeff-0.125);
diffusionDelta(X)->(X[diff_di10]+X[diff_di12]+X[diff_di01]+X[diff_di21]-4*X);

calculateCTransport(food,consumers)->begin
  local dx:=food[di21]-food;
  local dy:=food[di12]-food;
  begin local s:=consumers*( dx*ord(dx>0)       * CONSUMER_MOVEMENT_FACTOR+FIRE_DIFF_Xpos); s[di01]-s; end+
  begin local s:=consumers*((dx*ord(dx<0))[di01]*-CONSUMER_MOVEMENT_FACTOR+FIRE_DIFF_Xneg); s[di21]-s; end+
  begin local s:=consumers*( dy*ord(dy>0)       * CONSUMER_MOVEMENT_FACTOR+FIRE_DIFF_Ypos); s[di10]-s; end+
  begin local s:=consumers*((dy*ord(dy<0))[di10]*-CONSUMER_MOVEMENT_FACTOR+FIRE_DIFF_Yneg); s[di12]-s; end;
end;

calculateFTransport(food,consumers)->
  diffusionDelta(food*consumers*FOOD_DIFFUSION_COEFFICIENT);

mutable parallelCost:=0;
mutable serialCost  :=0;

D_parallel:=(foodConsumers,foodRegrow)->begin
  local start:=scriptTime;
  local consumerTransport:=future(::calculateCTransport,foodConsumers);
  local foodDiffusion    :=future(::calculateFTransport,foodConsumers);
  local food     :=foodConsumers[0];
  local consumers:=foodConsumers[1];
  local result:=
  [(foodRegrow+foodCapFactor(food)-CONSUMPTION_SPEED *consumers+foodDiffusion    ())*boundaryMask,
    (consumerCapFactor(consumers) +growthFactor(food)*consumers+consumerTransport())*boundaryMask];
  parallelCost:=parallelCost*0.9+0.1*(scriptTime-start);
  result;
end;

D_serial:=(foodConsumers,foodRegrow)->begin
  local start    :=scriptTime;
  local food     :=foodConsumers[0];
  local consumers:=foodConsumers[1];
  local result:=
  [(foodRegrow+foodCapFactor(food)-CONSUMPTION_SPEED *consumers+calculateFTransport@foodConsumers)*boundaryMask,
    (consumerCapFactor(consumers) +growthFactor(food)*consumers+calculateCTransport@foodConsumers)*boundaryMask];
  serialCost:=serialCost*0.9+0.1*(scriptTime-start);
  result;
end;

mutable D:=D_serial;

//TIME INTEGRATION:===============================================================
//errorMeasure(y:List(2))->max(y[0].abs.max,y[1].abs.max/EQUILIBRIUM_RATIO)/ERROR_TOLERANCE;
errorMeasure(y:List(2))->y[1].abs.max/ERROR_TOLERANCE;

//*Bogacki-Shampine step
private microTimestep(y0:List(2),inflow,dt)->begin
  local F0:=dt*D(y0        ,inflow);
  local F1:=dt*D(y0+0.5*F0 ,inflow);
  local F2:=dt*D(y0+0.75*F1,inflow);
  local F3:=dt*D(local result:=y0+0.2222222222222222*F0+
                                  0.3333333333333333*F1+
                                  0.4444444444444444*F2,inflow);
  [result,
    ((y0+0.29166666666666669*F0
        +0.25               *F1
        +0.3333333333333333 *F2
        +0.125              *F3-result).errorMeasure)^0.3333333333333333];
end;

mutable microStepCount   :=0;
mutable rejectedStepCount:=0;

timeStepRecursive(y0:List(2),inflow,dt)->begin
  microStepCount+=1;
  local y1:=microTimestep(y0,inflow,dt);
  y1[1]<=1
  ? return y1
  : rejectedStepCount+=1;
  local subSteps:=y1[1]>1E19 OR y1[1].isNan
                  ?                 max(2,ceil(dt/MIN_TIME_STEP_SIZE))
                  : ceil(y1[1]).min(max(1,ceil(dt/MIN_TIME_STEP_SIZE)));
  subSteps<=1 ? begin
    rejectedStepCount-=1;
    return y1;
  end
  : microStepCount+=subSteps;
  local y:=y0;
  local proposedSteps:=0;
  local dtSub:=dt/subSteps;
  ([0..subSteps-1]).each(t0Sub,begin
    local tmp:=microTimestep(y,inflow,dtSub);
    y:=tmp[0];
    proposedSteps:=max(proposedSteps,tmp[1]);
    void;
  end);
  [y,proposedSteps*subSteps];
end;

doTimeStep(timeStepIndex,foodRegrow)->begin
  local microStepsPerStep:=0;
  local validMacroSteps:=[MAX_SUB_STEPS..ceil(MAX_SUB_STEPS*1.1)].each(k,factorize(k).subSets.map((s)->s.agg(*) orElse 1),|).unique.filter((k)->k<=MAX_SUB_STEPS);
save;
  local y:=[food,consumers];

  local subSteps:=microStepsPerStep<MAX_SUB_STEPS/2
                  ? ceil(microStepsPerStep).max(1)
                  : validMacroSteps[validMacroSteps>microStepsPerStep].min.orElse(MAX_SUB_STEPS);

  local t0:=timeStepIndex*TIME_STEP_SIZE;
  local dtSub:=TIME_STEP_SIZE/subSteps;

  microStepsPerStep:=
  (t0+dtSub*[0..subSteps-1]).each(t0Sub,begin
    local tmp:=timeStepRecursive([y[0]*ord(y[0]>0)*boundaryMask,
                                  y[1]*ord(y[1]>0)*boundaryMask],
                                 foodRegrow,
                                 dtSub);
    y:=tmp[0];
    subSteps*tmp[1];
  end,max);

  food     :=y[0]*boundaryMask*ord(y[0]>0);
  consumers:=y[1]*boundaryMask*ord(y[1]>0);

  local foodTotal:=food.agg(+);
  local consumerTotal:=consumers.agg(+);
  local balance:=foodTotal*EQUILIBRIUM_RATIO/consumerTotal;

  printf('%4d %2d(+%2d) %7.3f %7.3f balance: %7.3f'
         &(RESUMEABLE_RUN ? void : ' remaining: %s')
        ,timeStepIndex,microStepCount-rejectedStepCount,rejectedStepCount,consumerTotal,foodTotal,balance
        ,RESUMEABLE_RUN ? void : formatTime('hh:mm:ss',(TOTAL_STEPS-timeStepIndex)/timeStepIndex*scriptTime/(24*60*60))
  );
  microStepCount:=rejectedStepCount:=0;
  void;
end;
//===============================================================:TIME INTEGRATION

//--------------------------------------------------------
WHITE_LEVEL :=GROWTH_THRESHOLD*2;
CWHITE_LEVEL:=WHITE_LEVEL*EQUILIBRIUM_RATIO;
prepareForPlot(food_,consumers_)->begin
  local F:=food_     *(2/WHITE_LEVEL );
  local C:=consumers_*(2/CWHITE_LEVEL);
  [C,(C+F)*0.5,F]
  .transpose
  .{ZERO_BOUNDARY
    ? $L.chunkMap(sysWidth,::leading).toList.leading.agg(|)
    : $L};
end;

writeToOutFile(prepared:List)->begin
  local rounded:=round(prepared*255);
  fileExists(outputFile)
  ? begin
      local delta:=rounded-previouslyWrittenToOutput;
      appendFileLines(outputFile,[delta.serialize.compress.base92encode]);
    end
  : begin
      writeFileLines(outputFile,
        [toString(sysWidth-ord(ZERO_BOUNDARY)),
         rounded.serialize.compress.base92encode]);
    end;
  previouslyWrittenToOutput:=rounded;
end;

executePlot(prepared:List)->begin
  plotRasterImage(prepared,sysWidth-ord(ZERO_BOUNDARY));
  PLOT_TO_FILE
  ? writeToOutFile(prepared)
  : void;
  isGuiStarted
  ? begin
      addAnimationFrame;
      postDisplay;
    end
  : void;
end;

USE mazeMaker;
//*Simulate
main->begin
  RESUMEABLE_RUN
  ? assertUniqueInstance
  : void;

  //SYSTEM SETUP:
  !RESUMEABLE_RUN OR pendingDeltas.isVoid OR food.size!=sysWidth*sysHeight
  ? begin
      outputFile:=nextOutputFile;
      log('Setting up...');

      food:=makeLongRangeMaze(sysWidth,sysHeight,ZERO_BOUNDARY);// makeMaze(sysWidth,sysHeight,1,ZERO_BOUNDARY);
      //food:=(1-(1-food).shrinkMaze(sysWidth))*boundaryMask*A;
      food*=boundaryMask*(FOOD_CAP);//*(0.3+0.3*random(food.size));
      //food:=boundaryMask*A;

      consumers:=food*0;

      //consumers:=random(sysWidth*sysHeight)*0;
      local seedPoint:=
      cross([0..sysHeight-1]-(sysHeight-1)/2,
            [0..sysWidth -1]-(sysWidth-1)/2)
      .euklideanNorm.each(k,food[index]>0 ? [k,index] : void).min[1];
      consumers[seedPoint]:=food[seedPoint]*EQUILIBRIUM_RATIO;


      local regrow:=food*GROW_BACK_FACTOR*boundaryMask;
      pendingDeltas:=[];
      while (pendingDeltas.size<FEEDBACK_LENGTH,pendingDeltas|=[regrow]);
      prepareForPlot(food,consumers).executePlot;
      printf('%4d %2d %7.3f %7.3f balance: %7.3f',0,0,consumers.agg(+),food.agg(+),food.agg(+)*EQUILIBRIUM_RATIO/consumers.agg(+));
    end
  : log('Resuming calculation...');

  outputFile.isVoid
  ? outputFile:=nextOutputFile
  : void;

  local averageUsedMemory:=mnhInfo['used_mem'];
  local lastCleanerCall:=60;
  local quitRequested:=false;
  RESUMEABLE_RUN
  ? localAsync({begin
      ask('Press Enter to quit');
      quitRequested:=true;
    end})
  : void;

  {begin
     local sourceGenerator:=rangeGenerator(1,RESUMEABLE_RUN ? void : TOTAL_STEPS);
   save;
     !quitRequested
     ? sourceGenerator()
     : void;
   end}.toGenerator
  .map((step)->begin
    local foodDelta:=FEEDBACK_LENGTH=0 ? 0 : pendingDeltas.head;
    pendingDeltas:=pendingDeltas.tail|[food*GROW_BACK_FACTOR];
    doTimeStep(step,foodDelta);
    (local currentlyUsedMem:=mnhInfo['used_mem'])>averageUsedMemory
    AND (scriptTime>lastCleanerCall+120)
    ? begin
        note('Cleaning memory @',currentlyUsedMem div 1024²,'MiB / ',round(averageUsedMemory / 1024²),'MiB');
        callMemoryCleaner;
        averageUsedMemory/=1.1;
        lastCleanerCall:=scriptTime;
      end
    : void;
    averageUsedMemory:=averageUsedMemory*0.9+currentlyUsedMem*0.11;


    D:=serialCost*(1+random)<parallelCost*(1+random)
      ? D_serial
      : D_parallel;

    step mod 100 = 0
    ? begin
        log('Serial/paralel cost: ',serialCost,'/',parallelCost);
      end
    : void;

    future(::prepareForPlot,[food,consumers]);
  end)
  .agg((p)->executePlot(p()));
end;

//*Replay animation
main('replay',filename)->begin
  assertGuiStarted;
  local L:=filename.fileLineIterator(10);
  local width:=L().toInt;
  local row:=L().base92decode.decompress.deserialize;
  assert(width>0);

  plotRasterImage(row*(1/255),width);
  addAnimationFrame;
  display;
  L.pMap((line)->line.base92decode.decompress.deserialize)
   .agg((delta)->begin
      row+=delta;
      plotRasterImage(row*(1/255),width);
      plotClosed ? halt : addAnimationFrame;
    end);
  callMemoryCleaner;
  print('Done replaying');
end;

//*Export to series of .png images with scaling factor of 1
main('export',filename)->main('export',filename,1);
//*Export to series of .png images with custom scaling factor
main('export',filename,scalingFactor)->begin
  local filenamePattern:=filename&'_%4.4d.png';
  local L:=filename.fileLineIterator(10);
  local width:=L().toInt;
  local row:=L().base92decode.decompress.deserialize;
  assert(width>0);
  local height:=row.size div width;
  local outputIndex:=0;

  local exportWidth :=toReal(scalingFactor)*width;
  local exportHeight:=toReal(scalingFactor)*height;

  plotRasterImage(row/255,width);
  renderToFile(filenamePattern.format(outputIndex),exportWidth,exportHeight,true);

  L.pMap((line)->line.base92decode.decompress.deserialize)
   .agg((delta)->begin
      row+=delta;
      local outFile:=filenamePattern.format(outputIndex+=1);
      fileExists(outFile) ? void : begin
        plotRasterImage(row/255,width);
        renderToFile(outFile,exportWidth,exportHeight,true);
      end;
    end);
  print('Done exporting. Wait some seconds to let background rendering finish.');
  sleep(5);
end;


