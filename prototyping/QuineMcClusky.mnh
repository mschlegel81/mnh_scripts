//*A BooleanExpression accepts booleans as input parameters and returns a boolean
type BooleanExpression(e:Expression)->e.arity=0 AND e().isBoolean OR isBoolean(e@([0..e.arity-1]=0));

//*A canonical disjunctive normal form is represented as [relevanceMask, [trueTerms]],
//*where trueTerms is a list of integers
//*In the simplest case relevanceMask = 2^arity-1
type CDNF(L:List(2))->L[0].isInt AND L[0]>=0 AND L[1].isIntList AND L[1].size<=2^L[0] AND L[1].each(i,0<=i<=L[0],AND);

booleanInputIteratorForArity(forArity)->{begin
  i:=-1;
  iStop:=2^forArity;
save;
  (i+=1) = iStop
  ? void
  : head(i.digits(2).reverseList|[1..forArity].map({0}),forArity)>0;
end}.toIterableExpression;

toVariadicExpression(e:Expression)->e and {$params.isList};

cdnfForGivenArity(b:Expression,givenArity:Int)->
  givenArity==b.arity
  ? b.toCDNF
  : begin
      safeB:=b.toVariadicExpression;
      [2^givenArity-1,givenArity.booleanInputIteratorForArity.each(p,safeB@p ? index : void)].toCDNF;
    end;

cdnfForGivenRelevanceMask(b:Expression,relevanceMask:Int)->
  [relevanceMask,unique(b.cdnfForGivenArity(relevanceMask.digits(2).size)[1] and relevanceMask)].toCDNF;


@SuppressUnusedWarning
randomCdnfForArity(givenArity:Int)->[givenArity,indexOf(random(2^givenArity)>0.5)].toCDNF;

@Override
//*Cast a Boolean expression to a CDNF
toCDNF(b:BooleanExpression)->
  [2^b.arity-1,b.arity.booleanInputIteratorForArity.each(p,b@p ? index :void)];

@Override
toCDNF(e:Expression)->e.toBooleanExpression.toCDNF;

@Override
//*Cast a CDNF to a Boolean expression
toBooleanExpression(cdnf:CDNF)->begin
  parameterIndexes:=2^indexOf(reverseList(cdnf[0].digits(2)=1));
  cdnf[1].each(term,
    ((term and parameterIndexes)=parameterIndexes).each(positive,
      (positive ? '' : '!') & '$'&index).join(' AND ')).join(" OR ").toExpression;
end;

implicantToString(e:Expression)->begin
  names:=e.parameterNames.each(n,['$'&index,n]).reverseList;
  toExpression(['implicantToString($input).replace(',names.getInner(0),',',names.getInner(1),')']);
end;

implicantToString(i:IntList(2))->i[1].digits(2).reverseList.each(d,d=0 ? void : ((2^index and i[0])=0 ? '!' : '')&'$'&index).join(" AND ");

private getPrincipalImplicants(cdnf:CDNF)->begin
  allParametersMask:=cdnf[0];
  terms:=cdnf[1].map({[$x,allParametersMask]});
  termsByHammingWeight:=terms.group(terms.map({hammingWeight($x.agg(and))}));
  primeImplicants:=[].toSet;
  merged:=termsByHammingWeight.size>0;
  while merged do begin
    merged:=false;
    mergedTerms:=[];
    newTerms:=[termsByHammingWeight.getInner(0).min .. termsByHammingWeight.getInner(0).max-1].each(weight,begin
      //find all pairs of terms of adjacent classes
      toBeMerged:=
      cross(termsByHammingWeight[weight  ] orElse [],
            termsByHammingWeight[weight+1] orElse [])
      .filter({$x[0,1]=$x[1,1] AND                      //equal don't-care-masks
               hammingWeight($x[0,0] xor $x[1,0])=1});  //hamming distance of 1
      mergedTerms:=mergedTerms.union(toBeMerged.each(x,x[0],x[1]));
      toBeMerged
      .map({begin
         merged:=true;
         dropTerm:=$x[0,0] xor $x[1,0];
         [($x[0,0] and $x[1,0]),$x[0,1] xor dropTerm];
       end});
    end,|).unique;
    primeImplicants|=terms.minus(mergedTerms);
    terms:=newTerms;
    termsByHammingWeight:=terms.group(terms.map({hammingWeight($x.agg(and))}));
  end;
  primeImplicants.sort;
end;

quineMcCluskySimplify(cdnf:CDNF)->begin
  //Step 1: get principal implicants by merging terms which differ by exactly one negation
  primeImplicants:=getPrincipalImplicants(cdnf);
  terms:=cdnf[1];
  implicantsByMaxterm:=terms.each(t,[t,primeImplicants.each(p,(t and p[1] xor p[0])=0 ? index : void)]);
  anyCrossed:=true;
  while anyCrossed do begin
    anyCrossed:=false;
    //TODO: Refactor this loop to do it faster than in O(n²)
    //Spaltendominanzprüfung
    maxtermsByImplicant:=
    implicantsByMaxterm.each(a,begin
      implicantsByMaxterm.each(b,
        b[0]!=a[0] AND b[1].isSubsetOf(a[1]) AND (!(b[1]==a[1]) OR (b[0]<a[0])),
        OR)
      ? begin anyCrossed:=true; void; end
      : a[1].each(m,[a[0],m]);
    end,|).{$x.getInner(0).group($x.getInner(1))};
    //Zeilendominanzprüfung
    implicantsByMaxterm:=
    maxtermsByImplicant.each(a,begin
      maxtermsByImplicant.each(b,
        !(b[1]==a[1]) AND a[1].isSubsetOf(b[1]) AND (!(b[1]==a[1]) OR (b[0]<a[0])),
        OR)
      ? begin anyCrossed:=true; void; end
      : a[1].each(m,[a[0],m]);
    end,|).{$x.getInner(0).group($x.getInner(1))};
  end;
  primeImplicants[implicantsByMaxterm.getInner(1).flatten.unique];

end;

implicantListToString(implicants:List)->
  (implicants.size=0
     ? 'false'
     : implicants==[[0,0]]
      ? 'true'
      : implicants.map(::implicantToString).join(" OR "));

quineMcCluskySimplifyToString(cdnf:CDNF)->
  quineMcCluskySimplify(cdnf).implicantListToString;

private replaceNamesInString(s:String,b:BooleanExpression)->begin
  names:=b.parameterNames.each(n,n=='' ? void : ['$'&index,n]).reverseList.transpose;
  names==[]
  ? s
  : s.replace(names[0],names[1]);
end;

quineMcCluskySimplifyToString(b:BooleanExpression)->
  b.toCDNF.quineMcCluskySimplifyToString[0].replaceNamesInString(b);

quineMcCluskySimplifyToString(b:Expression)->
  b.toBooleanExpression.quineMcCluskySimplifyToString;

factorizeCdnf(cdnf:CDNF)->hammingWeight(cdnf[0])<=2 ? [cdnf] : begin
  fullMask:=cdnf[0];
  bestPartition:=
  ([1..(cdnf[0] div 2)] and cdnf[0]).unique.pEach(p,begin
    q:=(p xor fullMask) ;
    cross(part1:=(cdnf[1] and p).unique,
          part2:=(cdnf[1] and q).unique).map({$x.agg(+)}).sort==cdnf[1]
    AND part1.size>=1 AND !(part1==[0,p]) AND !(part1==[0]) //each part must contain at least one maxterm and not evaluate to true or false
    AND part2.size>=1 AND !(part2==[0,q]) AND !(part2==[0])
    ? [min(p.hammingWeight,q.hammingWeight),[p,part1],[q,part2]]
    : void;
  end).sort.trailing;
  bestPartition==[]
  ? [cdnf]
  : bestPartition[1].toCDNF.factorizeCdnf |
    bestPartition[2].toCDNF.factorizeCdnf;
end;

extendedSimplify(cdnf:CDNF)->begin
  parts:=cdnf.factorizeCdnf
  .map({begin
    subexpression:=$partialCdnf.quineMcCluskySimplify;
    subexpression.size=2 AND hammingWeight(relevanceMask:=subexpression[0,1])=2
    ? begin
        xorTerm := indexOf(digits(relevanceMask,2).reverseList=1).map({[2^$k,relevanceMask]});
        subexpression.sort==xorTerm.sort
        ? return [false,join('$'&indexOf(digits(relevanceMask,2).reverseList=1),' xor ')]
        : void;
        subexpression.sort==[[0,relevanceMask],[relevanceMask,relevanceMask]]
        ? [false,'!'&join('$'&indexOf(digits(relevanceMask,2).reverseList=1),' xor ')&'']
        : [subexpression.size=1,subexpression.implicantListToString];
      end
    : [subexpression.size=1,subexpression.implicantListToString];
  end})
  .filter({!($x==[true,'true'])});
  resultText:=
  parts.size=0
  ? 'true'
  : parts.size=1
    ? parts[0,1]
    : parts.map({$p[0] ? $p[1] : '('&$p[1]&')'}).join(' AND ');
  assert(resultText.toExpression.cdnfForGivenRelevanceMask(cdnf[0])==cdnf,cdnf,' does not simplify to ',resultText);
  resultText;
end;

extendedSimplify(e:BooleanExpression)->e.toCDNF.extendedSimplify.replaceNamesInString(e);
extendedSimplify(e:Expression)->e.toBooleanExpression.extendedSimplify;

main('all',Arity)->begin
  a:=Arity.toInt;
  assert(a>0);
  relevanceMask:=2^a-1;
  print('Considering ',2^2^a,' expressions in ',a,' variables');
  all:=
  [0..2^a-1].subSets
  .pMap({begin
    result:=[relevanceMask,$x.sort].toCDNF.quineMcCluskySimplifyToString.toString;
    ext:=   [relevanceMask,$x.sort].toCDNF.extendedSimplify;
    a=2 OR ext.length<result.length
    ? print('Quine-McClusky: ',result,"\n",
            'Extended      : ',ext)
    : void;
    result;
   end});
  byAtoms:=all.group(all.map({trueCount($x.chars='$')}));
  byAtoms.sort(0).map({printf('There are %s expressions in %s atoms',$x[1].size,$x[0])});

  print('The longest expressions are: ');
  printf('  %s',byAtoms[byAtoms.getInner(0).max]);

  atomAndPrimeTermCount:=byAtoms.each(entry,
  entry[1].each(s,[entry[0],begin
    ors:=trueCount(s.tokenSplit='OR');
    ors=0
    ? entry[0]=0 ? 0 : 1
    : ors+1;
    end]),|).elementFrequency;
  primeTerms:=atomAndPrimeTermCount.getInner(0).getInner(1).sort;
  atoms     :=atomAndPrimeTermCount.getInner(0).getInner(0).sort;

  print(
  ("prime\tterms:"|primeTerms).join("\t")&"\n"&
  (atoms.each(a,(a&"\tatoms"|primeTerms.each(p,atomAndPrimeTermCount[[a,p]] orElse '')).join("\t")).join("\n")));
end;

oneOf      (...) -> trueCount(...) = 1;
oneOrZeroOf(...) -> 0 <= trueCount(...) <= 1;
enforces   (a,b) -> !a OR b;
nxor(a,b) -> !(a xor b);
@SuppressUnusedWarning
configExampleB:={oneOf($weiss,$grau,$schwarz) AND
                 oneOf($Stoff,$Leder) AND
                 $Leder.enforces($schwarz) AND

                 oneOf($Plastikfuss,$Stahlfuss) AND
                 oneOrZeroOf($fussWeiss,$fussGrau,$fussSchwarz) AND
                 oneOrZeroOf($fussPoliert,$fussGebuerstet) AND
                 oneOf($fussWeiss,$fussGrau,$fussSchwarz).nxor($Plastikfuss) AND
                 oneOf($fussPoliert,$fussGebuerstet).nxor($Stahlfuss)};
@SuppressUnusedWarning
complexityMeasure(s:String)->s.tokenSplit.lower.each(token,[ord(token='and'),
                                                            ord(token='or'),
                                                            ord(token.copy(0,1)='$')],+);

//     023456789ACEF
//    09F         07d
//    4A          18
//    5b          29
//    6C          3A
//    8E          4
//     2345689AbdEF
//    0b          05A
//    2C          16b
//    6d          27d
//    8E          38
//    AF          49
//     0235689AbCdE

memoized num(b0,b1,b2,b3)->ord(b0)+2*ord(b1)+4*ord(b2)+8*ord(b3);

f0(a0,a1,a2,a3)-> (num(a0,a1,a2,a3) in [0,2,3,5,6,7,8,9,10,12,14,15]);
f1(a0,a1,a2,a3)-> (num(a0,a1,a2,a3) in [0,4,5,6,8,9,10,11,12,14,15]);
f2(a0,a1,a2,a3)-> (num(a0,a1,a2,a3) in [0,1,2,3,4,7,8,9,10,13]);
f3(a0,a1,a2,a3)-> (num(a0,a1,a2,a3) in [2,3,4,5,6,8,9,10,11,13,14,15]);
f4(a0,a1,a2,a3)-> (num(a0,a1,a2,a3) in [0,2,6,8,10,11,12,13,14,15]);
f5(a0,a1,a2,a3)-> (num(a0,a1,a2,a3) in [0,1,3,4,5,6,7,8,9,10,11,13]);
f6(a0,a1,a2,a3)-> (num(a0,a1,a2,a3) in [0,2,3,5,6,8,9,11,12,13,14]);

print(extendedSimplify(::f0)) orElse
print(extendedSimplify(::f1)) orElse
print(extendedSimplify(::f2)) orElse
print(extendedSimplify(::f3)) orElse
print(extendedSimplify(::f4)) orElse
print(extendedSimplify(::f5)) orElse
print(extendedSimplify(::f6));
