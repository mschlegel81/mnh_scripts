ducktype Identifier(id:String)->id.matches('^\$?\D\w*$') OR id.matches('^\$\d+$');
ducktype IdentifierFreqMap(m:Map)->m.each(entry,entry[0].isIdentifier AND entry[1].isInt AND entry[1]>=0,AND);
ducktype NumericOrComplex(x)->x.isNumeric OR x.isComplex;
type Polynomial(P:Map)->P.each(entry,entry[0].isIdentifierFreqMap AND entry[1].isNumericOrComplex,AND);
INCLUDE complex;

poly(id:String)->[[id=>1].toMap=>1].toMap.toPolynomial;
poly(value:NumericOrComplex)->[[].toMap=>value].toMap.toPolynomial;

private canonicalForm(m:Iteratable)->
  m.each(entry,[entry[0].filter({$x[1]>0}).toMap,entry[1]])
   .group(0)
   .each(g,[g[0,0],g.getInner(1).agg(+)])
   .filter({$x[1]!=0})
   .toMap
   .toPolynomial;

sqr(P:Polynomial)->P*P;

OPERATOR_PLUS(P:Polynomial,Q:Polynomial)->mergeMaps(P,Q,::+).canonicalForm;
OPERATOR_MINUS(P:Polynomial,Q:Polynomial)->P.getInner(0).union(Q.getInner(0)).each(key,[key,(P[key] orElse 0)-Q[key]]).canonicalForm;
OPERATOR_MULT(P:Polynomial,Q:Polynomial)->P.cross(Q).each(pair,begin
  local p:=pair[0];
  local q:=pair[1];
  [mergeMaps(p[0],q[0],::+),p[1]*q[1]];
end).canonicalForm;
OPERATOR_MULT(P:Polynomial,x:NumericOrComplex)->P.map({[$p[0],$p[1]*x]}).canonicalForm;

//*Returns all variables in P and their max. powers
polyParameters(P:Polynomial)->P.getInner(0).each(pow,pow,|).group(0,{[$x[0],max($x[1],$y[1])]}).toMap;
//*Returns true iff P has any complex coefficients
hasComplexCoefficient(P:Polynomial)->P.getInner(1).each(coeff,coeff.isComplex,OR);

polySummandToString(powers:IdentifierFreqMap,factor:NumericOrComplex)->
  powers.size=0
    ? factor.toString
    : begin
        (factor = 1
         ? ''
         : factor = -1
           ? '-'
           : factor.isComplex
             ? format('(%s)*',factor)
             : format('%s*'  ,factor))&
        powers.each(pow,"{$0}{$1=1 ? '' : '^'&$1}".format@pow).join("*");
      end;


private collapseSyntaxTree(t:List(3))->begin
  local LHS     :=t[0];
  local operator:=t[1];
  local RHS     :=t[2];
  LHS.isList(3) ? LHS:=LHS.collapseSyntaxTree : void;
  RHS.isList(3) ? RHS:=RHS.collapseSyntaxTree : void;
  LHS.isNumericOrComplex AND (LHS=0 AND operator='+' OR
                              LHS=1 AND operator='*')
  ? RHS :
  RHS.isNumericOrComplex AND (RHS=0 AND operator='+' OR
                              RHS=1 AND operator='*')
  ? LHS :
  LHS.isNumericOrComplex AND (LHS=0 AND operator='*') OR
  RHS.isNumericOrComplex AND (RHS=0 AND operator='*')
  ? 0 :
  [LHS,operator,RHS];
end;

private syntaxTreeToString(t:List(3),forExpression:Boolean)->begin
  local LHS     :=t[0];
  local operator:=t[1];
  local RHS     :=t[2];
  format('%{$0?"(":""}s%{$1}s%{$0?")":""}s%{$2}s%{$3?"(":""}s%{$4}s%{$3?")":""}s',
         (LHS.isList(3) AND LHS[1]='+' OR LHS.isComplex AND !forExpression) AND operator='*',
         LHS.syntaxTreeToString(forExpression),
         operator,
         (RHS.isList(3) AND RHS[1]='+' OR RHS.isComplex AND !forExpression) AND operator='*',
         RHS.syntaxTreeToString(forExpression));
end;
private syntaxTreeToString(x:Complex,false)->x.toString;
private syntaxTreeToString(x:Complex,true )->x.toBuiltin.toString&'.toComplex';
private syntaxTreeToString(x,forExpression:Boolean)->x;

private simplify(P:Polynomial)->P.size=0 ? 0 : begin
  local ps:=P.polyParameters;
  ps.size=0
  ? P.getInner(1).toList[0]
  : ps.size=1
  ? begin
      local x:=ps.toList[0,0];
      local Q:=P.map({($p[0].getInner(1)[0] orElse 0)=> $p[1]}).toMap;
      local syntaxTree:=0;
      [0..Q.getInner(0).max]
        .each(k,Q[k] orElse 0)
        .reverseList
        .each(a,begin
                  syntaxTree:=[a,'+',[x,'*',syntaxTree]];
                  void;
                end);
      syntaxTree;
    end
  : begin
      local x:= ps.sort(1).trailing[0];
      local A:=[];
      local B:=[];
      P.each(p,p[0,x].isVoid ? A||=p : begin
        local p0:=p[0];
        p0[x]:=p0[x]=1 ? void : p0[x]-1;
        B||=[p0,p[1]];
      end);
      A:=A.toMap.toPolynomial;
      B:=B.toMap.toPolynomial;
      [A.simplify,'+',[x,'*',B.simplify]];
    end;
end;

simplifiedForm(P:Polynomial,forExpression:Boolean)->P.simplify.collapseSyntaxTree.syntaxTreeToString(forExpression);


toString(polynomial:Polynomial)->
  polynomial.size=0
  ? 0
  : polynomial.sort.map({polySummandToString@$p}).join("+").replace('+-','-').replace('^2','²').replace('^3','³');

//*Returns derivative of P by variable
D(P:Polynomial,variable:Identifier)->
  P.map({begin
           local powers:=$summand[0];
           local factor:=$summand[1];
           (powers[variable] orElse 0)=0
           ? void
           : begin
               factor*=powers[variable];
               powers[variable]-=1;
               [powers,factor];
             end;
         end})
   .canonicalForm;

//*Replace all occurences of variable in P by substitute
substitute(P:Polynomial,variable:Identifier,substitute:NumericOrComplex)->
  P.map({begin
           local powers:=$summand[0];
           local factor:=$summand[1];
           (powers[variable] orElse 0)=0
           ? $summand
           : begin
               factor*=substitute^powers[variable];
               powers[variable]:=void;
               [powers,factor];
             end;
         end})
   .canonicalForm;

substitute(P:Polynomial,variable:Identifier,substitute:Identifier)->
  P.map({begin
           local powers:=$summand[0];
           local factor:=$summand[1];
           (powers[variable] orElse 0)=0
           ? $summand
           : begin
               powers[substitute]+=powers[variable];
               powers[variable]:=void;
               [powers,factor];
             end;
         end})
   .canonicalForm;

memoized
mandelbrotIteration(depth>=0)->begin
  local x:=poly('x');
  local c:=poly('c');
  depth=0 ? return c : void;
  local r:=x;
  [1..depth].each(step,r:=sqr(r)+c,trailing);
end;


//[1..6].each(i,
//printf("\nStep %s\t:\t%s\nFixed point\t:\t0 = %s\ndf/dx\t:\t%s", i,
//  mandelbrotIteration(i),
//  (mandelbrotIteration(i)-poly('x')).simplifiedForm(false),
//   mandelbrotIteration(i).D('x').simplifiedForm(false)));

//mandelbrotIteration(3).toString.print orElse
//mandelbrotIteration(3).simplifiedForm(false).print;
//
[1..6].each(i,
print('0 = ',(mandelbrotIteration(i)-poly('x')).toString),
print('1 <|',(mandelbrotIteration(i).D('x')).toString,'|'));



