//colorDistance(rgb_1:NumericList(3),rgb_2:NumericList(3))->begin
//  local R_bar:=(rgb_1[0]+rgb_2[0])/2;
//  local D:=sqr(rgb_1-rgb_2);
//  (2+R_bar)*D[0]+4*D[1]+(3-R_bar)*D[2];
//end;

colorDistance(rgb_1:NumericList(3),rgb_2:NumericList(3))->euklideanNorm(rgb_1-rgb_2);

lineupSort(L:List)->begin
  local out:=[local last:=L[0]];
  local remaining:=L.tail;
  while(remaining.size>1,begin
    local k:=argMin(remaining.map((r)->colorDistance(r,last)));
    out||=(last:=remaining[k]); remaining[k]:=void;
  end);
  out.chunkMap(16).each(chunk,(index and 1)=1 ? chunk.reverseList : chunk,|)|remaining;
end;

USE downhillSimplex;

outOfBoundsPenalty(rgb:NumericList(3))->(1000*ord(rgb<0 or rgb>1)).agg(+);
limitColor(rgb:NumericList(3))->rgb.map((c)->max(0,min(1,c)));
fmtColor(rgb)->format('(%3s,%3s,%3s)')@round(rgb*255);

begin
  local colorCandidateGenerator:=zip(vanDerCorputGenerator(2),vanDerCorputGenerator(3),vanDerCorputGenerator(5));
  local colors:=[[0,0,0],[1,1,1],[0,1,0],[1,0,1]];
  while(colors.size<256,begin
    local candidate:=colorCandidateGenerator.head(1000).pMap((x)->colors.pEach(c,colorDistance(c,x),min)=>x).toList.max[1];

    local new:=downhillSimplex((x)->outOfBoundsPenalty(x)-colors.pEach(c,colorDistance(c,x),min),candidate,1/256,1E-3);
    local dist:=new[0]; new:=limitColor(new[1]);
    colors||=new;
    log(fmtColor(new),' +',fmtColor(candidate-new),' D: ',-dist);
  end);

  plot();
  colors.plotRasterImage(16);
  addAnimationFrame;

  plot();
  colors.lineupSort.plotRasterImage(16);
  addAnimationFrame;

  round(colors*255).map((r,g,b)->format('(%3d,%3d,%3d)',r,g,b)).chunkMap(16,(line)->line.join(",")&",\n").toList.join.print;
end;


