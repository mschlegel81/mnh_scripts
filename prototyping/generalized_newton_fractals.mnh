type Polynomial(L:List)->L.each(t,t.isList(2) AND t[0].isNumericList(2) AND t[1].isInt,AND);
@SuppressUnusedWarning
literalX->[[[1,0],1]].toPolynomial;
@SuppressUnusedWarning
literalI->[[[0,1],0]].toPolynomial;
@SuppressUnusedWarning
cSqr(a:List(2))           ->[a[0]*a[0]-a[1]*a[1],2*a[0]*a[1]];
cMult(a:List(2),b:List(2))->[a[0]*b[0]-a[1]*b[1],a[0]*b[1]+a[1]*b[0]];

simplify(L:List)->group(L.getInner(0),L.getInner(1),::+).map((power,factor)->[factor,power]).toPolynomial;
polySqr(p:Polynomial)->p.cross(p).map((x,y)->[cMult(x[0],y[0]),x[1]+y[1]]).simplify;
OPERATOR_POT(p:Polynomial,e:Int)->
  e=0 ? [[[1,0],0]].toPolynomial
      : e=1
        ? p
        : (e and 1)=1
          ? p*OPERATOR_POT(p,e-1)
          : polySqr(OPERATOR_POT(p,e div 2));
OPERATOR_PLUS(p:Polynomial,n:Numeric)->simplify(p|[[[n,0],0]]);
OPERATOR_PLUS(n:Numeric,p:Polynomial)->simplify(p|[[[n,0],0]]);
OPERATOR_PLUS(x:Polynomial,y:Polynomial)->simplify(x|y);
OPERATOR_MINUS(p:Polynomial,n:Numeric)->simplify(p|[[[-n,0],0]]);
OPERATOR_MINUS(n:Numeric,p:Polynomial)->simplify(p|[[[-n,0],0]]);
OPERATOR_MINUS(x:Polynomial,y:Polynomial)->simplify(x|map(y,(factor,power)->[-factor,power]));
OPERATOR_MULT(X:Polynomial,Y:Polynomial)->X.cross(Y).map((x,y)->[cMult(x[0],y[0]),x[1]+y[1]]).simplify;
parsePolynomial(s:String)->
  s.replace('i','literalI').replace('x','literalX').interpret;
OPERATOR_MULT(X:Polynomial,Y:Numeric)->X.map((factor,power)->[factor*Y,power]).toPolynomial;
OPERATOR_MULT(Y:Numeric,X:Polynomial)->X.map((factor,power)->[factor*Y,power]).toPolynomial;

//type BroadComplex(L:List(2))->L[0].isNumericList AND L[1].isNumericList(L[0].size);

derivative(poly:Polynomial)->begin
  poly.map((factor,power)->power<=0 ? void : [factor*power,power-1]).toPolynomial;
end;

@SuppressUnusedWarning
cDiv(a:List(2),b:List(2))->begin
  local tmp:=1/(sqr(b[0])+sqr(b[1]));
  [(a[0]*b[0]+a[1]*b[1])*tmp,
   (a[1]*b[0]-a[0]*b[1])*tmp];
end;

makeExpressionString(poly:Polynomial)->begin
  [poly.sort(1).map((factor,power)->
    power == 0
    ? (factor = [0,0]).agg(and)
      ? void
      : factor.toString
    : power==1
      ?(factor = [0,0]).agg(and)
        ? void
        : (factor = [1,0]).agg(and)
          ? 'x'
          : f'x.cMult({factor.toString})'
      : (factor = [0,0]).agg(and)
        ? void
        : (factor = [1,0]).agg(and)
          ? 'p'&power
          : f'p{power}.cMult({factor.toString})'
          ).join('+'),poly.getInner(1).max];
end;

makeIterationFunction(poly:Polynomial)->begin
  local A:=poly.makeExpressionString;
  local B:=poly.derivative.makeExpressionString;
  local maxPow:=max(A[1],B[1],1);
  @SuppressUnusedWarning
  local powerString:=(i:Int)->i=1 ? 'x' : f'p{i}';
  local declarations:=maxPow<=1 ? '' : [2..maxPow].each(p,format('local p%s:=%s; ',p,(p and 1)=1 ? f'cMult({powerString(p-1)},x)' : f'cSqr({powerString(p div 2)})')).join;
  format('(x)->begin %s x-cDiv(%s,%s); end',declarations,A[0],B[0]).toExpression;
end;

colorDistance(rgb_1:NumericList(3),rgb_2:NumericList(3))->begin
  local R_bar:=(rgb_1[0]+rgb_2[0])/2;
  local D:=sqr(rgb_1-rgb_2);
  sqrt((2+R_bar)*D[0]+4*D[1]+(3-R_bar)*D[2]);
end;

COLORS:=begin
  local C:=[[1,1,1],[0,0,0],[1,0,0]];
  local radius:=3;
  while(C.size<32,begin
    local candidate:=random(3);
    C.each(c,colorDistance(c,candidate)>radius,AND)
    ? C||=candidate
    : radius*=0.999;
  end);
  [[0,0,0,0]]|C.tail.each(x,x|0.9,x|0.8);
end;

NO_COLOR_INDEX:=0;

filterCloseOnes(L:List)->begin
  local result:=[L[0]];
  L.size>1
  ? L.tail.each(entry,begin
      result.each(r,euklideanNorm(r-entry)>1E-2,AND)
      ? result||=entry
      : void;
    end)
  : void;
  result;
end;

//findInitialCenters(f:Expression(1),k:Int)->begin
//  log('Generating initial centers');
//  local gen:=rangeGenerator(1,32).pMap(()->begin
//    local X:=[random(1000)*6-3,random(1000)*6-3];
//    [1..10].each(step,begin
//      X:=f(X).transpose.filter((x,y)->x²+y²<1E3).transpose;
//    end);
//    local centers:=kMeans(X.transpose,k)['centers'];
//    (0.1*0.7^[0..20]).each(tol,begin
//      X:=f(X).transpose;
//      centers:=kMeans(X,centers,20)['centers'];
//      local cx:=centers.getInner(0);
//      local cy:=centers.getInner(1);
//      cx.size<2 ? return void : void;
//      X:=X.filter((x,y)->(x²+y²<1E3) AND min(sqr(x-cx)+sqr(y-cy))<tol).transpose;
//    end);
//    X[0].size=0 ? void : [kMeans(X.transpose,k,1000)['centers'].filterCloseOnes,X[0].size];
//  end);
//  local best:=local next:=gen();
//  while(best[0].size<k AND !isVoid(next:=gen()),begin
//    next[0].size>best[0].size OR
//    next[0].size=best[0].size AND next[1]>best[1] ? best:=next : void;
//  end);
//  gen:=void;
//  best:=best[0];
//end;

circRand->begin
  local r:=[1,1];
  while(euklideanNorm(r:=2*random(2)-1)>1);
  r*1E-3;
end;

findInitialCenters(f:Expression(1),k:Int)->begin
  local X:=[random(1000)*6-3,random(1000)*6-3];
  [1..100].each(step,begin
    X:=f(X).transpose.unique;
    X:=(X.size<k*10
        ? X.each(x,[0..99].map(()->circRand*0.01+x),|)
        : X).transpose;
    void;
  end);
  local XU:=X.transpose.unique;
  XU.size=k ? return XU :
  local centers:=kMeans(X.transpose,k,1000)['centers'];
  local centersBefore:=[];
  local radius:=1;
  while(centers.size!=centersBefore.size OR abs(centers.flatten-centersBefore.flatten).max>1E-6,begin
    centersBefore:=centers;
    X:=centers.each(c,[0..99].map(()->circRand*radius+c),|).transpose.f.f.f.f.f.f.f.f.f.f;
    radius*=0.5;
    centers:=kMeans(X.transpose,centers)['centers'];
    local closer:=centers.filterCloseOnes;
    closer.size>1 ? centers:=closer : void;
  end);
  centers;
end;



USE customFormUtil;

mutable x0:=-3;
mutable x1:= 3;
mutable y0:=-3;
mutable y1:= 3;

plotQueue:=newQueue;
@SuppressUnusedWarning
plotTask:=async({plotQueue.agg((toPlot)->begin
  local resolution:=toPlot[4];
  local centers:=toPlot[5];
  local data:=COLORS.getAll(
    groupToList((toPlot[0]*2+2)| toPlot[1],
                 toPlot[2]     | toPlot[3], NO_COLOR_INDEX, ::orElse));

  plot();
  setOptions(["x0"=>x0,"x1"=>x1,"y0"=>y0,"y1"=>y1,"fontsize"=>7,"preserveAspect"=>true,"autoscaleX"=>false,"autoscaleY"=>false,"logscaleX"=>false,"logscaleY"=>false].toMap);
  data.plotRasterImage(resolution,(x1-x0)/resolution,x0,y0);
  zip(centers,COLORS[[0..COLORS.size]*2+2]).map((point,color)->
    addPlot([point],f'RGB{color[0]},{color[1]},{color[2]} .')).toList;


  postDisplay;
//  note('Plots queued: ',plotQueue.size);
end)});

//(x-2)*(x-1)*(x+i)*(x+2*i)*x

//(x-1-i)*(x-i)*(x+1)*(x+1+i)*(x+1-i)

main->begin
  local p_working:=
  local p_txt:='x³-1';
  local P:=parsePolynomial(p_txt);
  local f:=makeIterationFunction(P);
  local restartRequested:=2;

  localAsync(()->begin
    local resolution:=
    local Q:=
    local fixed_class:=
    local iQ:=
    local iQ_fixed:=
    local centers:=
    local classHistory:=
    local iterationDepth:=0;
    local calcDone:=false;
    local refinementTime:=0;
    local startOfThisRun:=scriptTime;
    while(true,restartRequested>0 ? begin
      print('Restarting calculation with: f',f);
      startOfThisRun:=scriptTime;
      resolution:=plotImageSize.min.max(200);
      restartRequested>1 ? begin
        centers:=findInitialCenters(f,P.getInner(1).max);
        x0:=-3;
        x1:= 3;
        y0:=-3;
        y1:= 3;
      end : void;
      restartRequested:=0;
      printf("\t%3.6f\t%3.6f",centers.getInner(0),centers.getInner(1));
      Q:=cross(y0+([resolution-1..0]+0.5)/resolution*(y1-y0),
               x0+([0..resolution-1]+0.5)/resolution*(x1-x0)).transpose.reverseList;
      iQ:=[0..Q[0].size-1];
      fixed_class:=
      iQ_fixed:=[];
      iterationDepth:=0;

      callMemoryCleaner;
      classHistory:=[];
      calcDone:=false;
    end : calcDone ? sleep(1) : begin
      local t0:=scriptTime;
      local class:=void;
      while(((scriptTime-t0<refinementTime) OR (classHistory.size<2)) AND restartRequested==0,begin
        Q[0].size<16000
        ? Q:=f(Q)
        : Q:=Q.transpose
              .chunkMap(2048)
              .pMap((x)->f(x.transpose).f.f.f.f.transpose)
              .agg(|)
              .transpose;
        iterationDepth+=Q[0].size<16000 ? 1 : 5;
        local km:=kMeans(Q.transpose,centers,0,1);
        class:=km['class'];
        classHistory|=[class];
        iQ_fixed.size=0 ? plotQueue.put([class,[],iQ,[],resolution,centers]) : void;
      end);
      local calcTime:=scriptTime-t0;
      restartRequested>0 ? void : begin
        refinementTime:=scriptTime;
        local timeFactor:=1;
        classHistory:=classHistory.trailing(5); //you are allowed to forget...
        local isFixed:=
        zip(classHistory.transpose,Q[0],Q[1]).pMap((history,x,y)->begin
          size(local classIndex:=history.unique)=1 AND
          euklideanNorm([x,y]-centers[classIndex[0]])<1E-6
          OR isNan(x) OR isInfinite(x)
          OR isNan(y) OR isInfinite(y);
        end).toList;
        isFixed.trueCount>0  OR iterationDepth>=iQ.size ? begin
          timeFactor:=trueCount(!isFixed)/size(iQ);
          iQ_fixed    |=                    iQ[ isFixed];
          fixed_class |=                  class[isFixed]*2+1;
          local sorting:=sortPerm(iQ_fixed);
          iQ_fixed:=iQ_fixed[sorting];
          fixed_class:=fixed_class[sorting];
          iQ          :=                 iQ[!isFixed];
          Q           :=[Q[0,!isFixed],Q[1,!isFixed]];
          classHistory:=classHistory.transpose[!isFixed].transpose;
          (calcDone:=trueCount(!isFixed)<=0 OR iterationDepth>=iQ.size)
          ? begin
              printf('Done calculating after %5.2f seconds',scriptTime-startOfThisRun);
              plotQueue.put([[],fixed_class,[],iQ_fixed,resolution,centers]);
              callMemoryCleaner;
            end
          : plotQueue.put([class[!isFixed],fixed_class,iQ,iQ_fixed,resolution,centers]);
        end : void;
        refinementTime:=(scriptTime-refinementTime)*timeFactor;
      end;
      printf('Depth: %2s; cost: %5.2f (%5.2f); pending: %6.2f%% (%s)',
             iterationDepth,
             scriptTime-t0,
             calcTime,
             iQ.size*100/sqr(resolution),
             iQ.size);

      void;
    end);

  end);

  showDialog('Newton fractals',[
    newEdit.withCaption('Formula:').bind('p_txt').withAction((new_txt)->begin
      local tmp:=try(::parsePolynomial,[new_txt],false);
      tmp==false OR tmp.getInner(1).max<2
      ? p_txt:=p_working
      : begin
          P:=tmp;
          f:=makeIterationFunction(tmp);
          restartRequested:=2;
        end;
    end),
    newPlotDock,
    newPlotLink.withMouseClicked((x,y)->begin
      log('You clicked at x=',x,' y=',y);

      local t:=0.5^([0..10]/10);
      zip(x0*(t)+x*(1-t),
          x1*(t)+x*(1-t),
          y0*(t)+y*(1-t),
          y1*(t)+y*(1-t)).map((x0_,x1_,y0_,y1_)->begin
        setOptions(["x0"=>x0_,"x1"=>x1_,"y0"=>y0_,"y1"=>y1_,"fontsize"=>7,"preserveAspect"=>true,"autoscaleX"=>false,"autoscaleY"=>false,"logscaleX"=>false,"logscaleY"=>false].toMap);
        display;
      end).toList;
      x0:=(x0+x)*0.5;
      x1:=(x1+x)*0.5;
      y0:=(y0+y)*0.5;
      y1:=(y1+y)*0.5;
      restartRequested:=1;
    end)]);
end;

