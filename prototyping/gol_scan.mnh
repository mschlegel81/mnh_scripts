SAMPLE_SIZE:=16;

//*Shifts - this returns a list of intLists, indicating adjacent cells
shifts:=begin
  [-1..1].cross([-1..1]).each(sh,0=sh[0]=sh[1] ? void :
  (([0..SAMPLE_SIZE-1]+sh[0]+SAMPLE_SIZE) mod SAMPLE_SIZE*SAMPLE_SIZE).cross
  (([0..SAMPLE_SIZE-1]+sh[1]+SAMPLE_SIZE) mod SAMPLE_SIZE                          ).map({$x[0]+$x[1]}));
end;





//*The Transision table
private TRANSITION:=[0,0,0,1,0,0,0,0,0,
                     0,0,1,1,0,0,0,0,0];

//*Computes the following generation based on current generation w
private step(w:IntList)->TRANSITION[shifts.each(sh,w[sh],+)+9*w];

F12:=begin
  local F1:=[];
  local F2:=[];
  [0..SAMPLE_SIZE-1].each(i,[0..SAMPLE_SIZE²-1][[SAMPLE_SIZE*i..SAMPLE_SIZE*(i+1)-1]])
             .transpose
             .reverseList
             .each(l,begin
                (index and 1)=0
                ? F1||=l
                : F2||=l;
              end);
  F1.each(f,[f,F2[index] orElse F2[0]]);
end;

M:=[' ','▀','▄','█'];
worldToText(world:IntList)->F12.each(f,M[world[f[0]]+world[f[1]]*2].join);

endsInSimpleState(initial:IntList)->begin
  local P0:=initial;
  local P1:=step(P0);
  local P2:=step(P1);
  [1..1000].each(_,begin
    P0:=P1; P1:=P2; P2:=P2.step;
    (P2==P1) OR (P2==P0) ? return void : void;
  end);
  P2;
end;

ultimates(initial:IntList,final:IntList)->begin
  zip(worldToText(initial),
      worldToText(final),
      worldToText(local s:=final.step),
      worldToText(s:=s.step),
      worldToText(s:=s.step),
      worldToText(s:=s.step),
      worldToText(s:=s.step),
      worldToText(s:=s.step),
      worldToText(s:=s.step),
      worldToText(s:=s.step))
  .each(L,L.head&(index=3
                  ? ' =...> '
                  : '       ')& L.tail.join(index=3 ? ' => ' : '    '))
  .join("\n");
end;


INNER_OUT:=cross([0..SAMPLE_SIZE-1]-(SAMPLE_SIZE-1)/2,
                 [0..SAMPLE_SIZE-1]-(SAMPLE_SIZE-1)/2).map(::euklideanNorm).sortPerm.sortPerm;
//begin
//  local n:=4;
//  local d:=digits(n,2).reverseList;
//  printDirect("\r",n);
//  while(d.size<SAMPLE_SIZE²,d|=0);
//  d[INNER_OUT];
//
//end.worldToText.join("\n").print;
//
//halt;

rangeGenerator(0)
  .map((n)->begin
     local d:=digits(n,2).reverseList;
     printDirect("\r",n);
     while(d.size<SAMPLE_SIZE²,d|=0);
     d[INNER_OUT];
   end)
  .pMap((initialState)->begin
     local E:=endsInSimpleState(initialState);
     E.isVoid
     ? void
     : [initialState,E];
   end)
  .agg((pair)->begin
     print(pair[0],"\n",ultimates(pair[0],pair[1]));
   end);

