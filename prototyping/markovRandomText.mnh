DATA:='C:\dev\mnh5\demos\inputs\kjv.txt'.fileLines.join(" ").replace('  ',' ').bytes;

THRESHOLD_FREQUENCY:=round(DATA.size/100);

randomFromRelativeTable(tab:List(2))->begin
  local r:=random;
  tab[0,indexOf(r<=tab[1]).min];
end;

makeRelativeTable(dat:StringCollection)->begin
  local t:=0;
  local tab:=dat.elementFrequency.filter((x)->x[1]>=THRESHOLD_FREQUENCY).each(x,[x[0],t+=x[1]]).map((x)->[x[0],x[1]/t]);
  tab.size=0
  ? void
  : tab.transpose;
end;

EMPTY_TABLE:=[].toMap;

memoized ensureTable(lookBack=0)->makeRelativeTable(DATA);
memoized ensureTable(lookBack>0)->
  mnhInfo['used_mem']/mnhInfo['configured_mem']>0.9
  ? EMPTY_TABLE
  : begin
      local tmp:=
      [0..DATA.size-1-lookBack].pMap((i)->[DATA[[0..lookBack-1]+i],DATA[lookBack+i]]).transpose;
      tmp[1].group(tmp[0]).pMap((g)->g[0]=>g[1].makeRelativeTable).filter((x)->x.size=2).toMap;
    end;

randomString->begin
  local c:=[ensureTable(0).randomFromRelativeTable];
  print(c.size,': ',c.join.escape);
  while(!isVoid(ensureTable(c.size)[c]),begin
    c|=ensureTable(c.size)[c].randomFromRelativeTable;
    print(c.size,': ',c.join.escape);
  end);
  c;
end;

rangeGenerator(1).map(()->randomString).toList;


