USE multivariate_polynomials,rationals;


//
//
//test_eq:=parsePoly('u*x');
//
////12:  "p3" => -5242879/211784403627
////11:  "p3" => -1310719/23526357525
////10:  "p3" => -327679/2612729007
//// 9:  "p3" => -81919/289975545
//// 8:  "p3" => -20479/32137587
//// 7:  "p3" => -5119/3550365
//// 6:  "p3" => -1279/389367
//// 5:  "p3" => -319/41985
//// 4:  "p3" => -79/4347
//// 3:  "p3" => -19/405
//sol:=odeTaylor(test_eq,'u','t',1,3);
//
//du(u)->test_eq.let('u',u);
//
//sol(t)->sol.let('t',t);
//
//F0:=sol( 0).du;
//F1:=sol(-1).du;
//F2:=sol(-2).du;
//F3:=sol(-3).du;
//
//aim:=sol(1);
//
////Constant step solution
//p13:= 4/9;
//p12:=-1/4 + -3/2*p13 ;
//p10:=1 + -1*p13 + -1*p12;
//p23:=5/36;
//p21:=-1/2 + -3*p23;
//p20:=1 + -1*p23 + -1*p21;
//p32:=5/12;
//p31:=-1/2 + -2*p32;
//p30:=1 + -1*p32 + -1*p31;
//
//[[p10,0,p12,p13].map(::toReal),
// [p20,p21,0,p23].map(::toReal),
// [p30,p31,p32,0].map(::toReal)].transpose;
//
//approx1:=1+p10*F0       +p12*F2+p13*F3;
//approx2:=1+p20*F0+p21*F1       +p23*F3;
//approx3:=1+p30*F0+p31*F1+p32*F2       ;
//
//// Constant step result:
////w1:=-268/27;
////w2:=-76/225 + -16/5*w1;
////w3:=1-w1-w2;
//
//w1:=polyOf('w1');
//w2:=polyOf('w2');
//w3:=1-w1-w2;
//combined:=approx1*w1+approx2*w2+approx3*w3;
//
//aim    .reorder(['x','y']).toString.print orElse
//approx1.reorder(['x','y']).toString.print orElse
//approx2.reorder(['x','y']).toString.print orElse
//approx3.reorder(['x','y']).toString.print orElse
//combined.reorder(['x','y']).toString.print;
//
//////Minimize this term to maximize stability:
//powersOfYAlone:=combined.allPowersOf(['x','y']).filter((pow)->pow.size==1 AND pow[0,0]='y');
//
//powersOfYAlone.each(powerOfY,begin
//  log(powerOfY.powerToString);
//  combined.isolate(powerOfY).{$x.toString.note orElse $x}.findRoot.map(::note);
//end);
//
////findRoot(aim    .isolate([['x',3]])
////        -approx1.isolate([['x',3]])).map(::print);
////findRoot(aim    .isolate([['x',3]])
////        -approx2.isolate([['x',3]])).map(::print);
////findRoot(aim    .isolate([['x',3]])
////        -approx3.isolate([['x',3]])).map(::print);
//
////findRoot(parsePoly('76/3*y^7 + 540*p3*y^7')).map(::print);



