USE linAlg,rationals;


prevDt := [1,1,1,1,1,1]*1.0;

t1:=(-prevDt[1]                                        )/prevDt[1];
t2:=(-prevDt[1]-prevDt[2]                              )/prevDt[1];
t3:=(-prevDt[1]-prevDt[2]-prevDt[3]                    )/prevDt[1];
t4:=(-prevDt[1]-prevDt[2]-prevDt[3]-prevDt[4]          )/prevDt[1];
t5:=(-prevDt[1]-prevDt[2]-prevDt[3]-prevDt[4]-prevDt[5])/prevDt[1];


STEPS:=6;
ORDER:=3;

//1               0                        0                        0                        0 0 | 1  []  []  []  [] []
//t1 + t2 + t3    2*t1² + 2*t2² + 2*t3²    3*t1³ + 3*t2³ + 3*t3³    4*t1^4 + 4*t2^4 + 4*t3^4 0 0 | [] t1  t2  t3  [] []
//t1² + t2² + t3² 2*t1³ + 2*t2³ + 2*t3³    3*t1^4 + 3*t2^4 + 3*t3^4 4*t1^5 + 4*t2^5 + 4*t3^5 0 0 | [] t1² t2² t3² [] []
//t1³ + t2³ + t3³ 2*t1^4 + 2*t2^4 + 2*t3^4 3*t1^5 + 3*t2^5 + 3*t3^5 4*t1^6 + 4*t2^6 + 4*t3^6 0 0 | [] t1³ t2³ t3³ [] []

//1                          0                               0                                 | 1  0        0        0
//t1 *w1 + t2 *w2 + t3 *w3   2*t1²*w1 + 2*t2²*w2 + 2*t3²*w3  3*t1³ *w1 + 3*t2³ *w2 + 3*t3³ *w3 | 0  t1 *w1 + t2 *w2 + t3 *w3
//t1²*w1 + t2²*w2 + t3²*w3   2*t1³*w1 + 2*t2³*w2 + 2*t3³*w3  3*t1^4*w1 + 3*t2^4*w2 + 3*t3^4*w3 | 0  t1²*w1 + t2²*w2 + t3²*w3



t:=[t1,t2,t3,t4,t5].head(STEPS-1);
w0:=[1/32,32,1/32,32,1/32,32].head(STEPS-1);
w1:=[32,1/32,32,1/32,32,1/32].head(STEPS-1);

t;

M0:=toMatrix([[1,0,0,0,0,0].head(ORDER)]| [1..ORDER-1].each(i, [0..ORDER-1].each(j,(t^(i+j)*w0).agg(+)*(j+1))));
M1:=toMatrix([[1,0,0,0,0,0].head(ORDER)]| [1..ORDER-1].each(i, [0..ORDER-1].each(j,(t^(i+j)*w1).agg(+)*(j+1))));
M2:=toMatrix([[1,0,0,0,0,0].head(ORDER)]| [1..ORDER-1].each(i, [0..ORDER-1].each(j,(t^(i+j)   ).agg(+)*(j+1))));

R0:=toMatrix([[1,0,0,0,0,0].head(STEPS)]|[1..ORDER-1].each(i,([0]|t)^i*(0|w0)));
R1:=toMatrix([[1,0,0,0,0,0].head(STEPS)]|[1..ORDER-1].each(i,([0]|t)^i*(0|w1)));
R2:=toMatrix([[1,0,0,0,0,0].head(STEPS)]|[1..ORDER-1].each(i,([0]|t)^i       ));


//resetRandom(5);
Y:=0.2*(0|t)^2 + 0.2*([0,1,0,1,0,1,0,1]).head(t.size+1);
//Y:=0.1*(0|t)^2;

COEFF0:=(M0.invert*R0*([Y].transpose.toMatrix)).map((x)->x[0].toReal);
COEFF1:=(M1.invert*R1*([Y].transpose.toMatrix)).map((x)->x[0].toReal);
COEFF2:=(M2.invert*R2*([Y].transpose.toMatrix)).map((x)->x[0].toReal);

f0(x)->COEFF0.each(c,x^index*c*(index+1),+);
f1(x)->COEFF1.each(c,x^index*c*(index+1),+);
f01(x)->((COEFF0+COEFF1)*0.5).each(c,x^index*c*(index+1),+);

f2(x)->COEFF2.each(c,x^index*c*(index+1),+);

errorEstimation0(x)->abs(COEFF0.trailing)*x^(COEFF0.size-1)*(COEFF0.size);
errorEstimation1(x)->abs(COEFF1.trailing)*x^(COEFF1.size-1)*(COEFF1.size);
errorEstimation2(x)->abs(COEFF2.trailing)*x^(COEFF2.size-1)*(COEFF2.size);


//setOptions(["x0"=>-1,"x1"=>1,"y0"=>-1,"y1"=>1,"fontsize"=>10,"preserveAspect"=>false,"autoscaleX"=>true,"autoscaleY"=>true,"logscaleX"=>false,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>7,"axisStyleY"=>7].toMap);
//
plot   (::f0 ,t.min,1,100,'red 1');
addPlot(::f1,t.min,1,100,'red 1');
addPlot(::f2,t.min,1,100,'blue');
addPlot((x)->(f0(x)+f1(x))/2,t.min,1,100,'black');

addPlot(0|t,Y,'. black');
//
([0..100]/100.0).each(t,[t,abs(f0(t)-f1(t))]).addPlot('f 0.5 red');

//addPlot(::errorEstimation0,0,1,100,'blue f 0.5');
//addPlot(::errorEstimation1,0,1,100,'blue f 0.5');
addPlot(::errorEstimation2,0,1,100,'green f 0.5');
//
//
//
