fibonacciTesselation->begin
  local fibonacciNumber:=[1,2];
  while(fibonacciNumber.size<45,fibonacciNumber|=fibonacciNumber.trailing(2).agg(+));

  local P:=(local validIndexes:=[0..999999]);
  local fibDelta:=fibonacciNumber.intersect(validIndexes).sort;
  fibDelta:=-fibDelta.reverseList | fibDelta;

  P:=[cos(2*pi/sqr((sqrt(5)-1)/2)*P),sin(2*pi/sqr((sqrt(5)-1)/2)*P)].transpose*sqrt(P);
  [0..P.size-1].pEach(i,begin
    local p:=P[i];
    local J:=i+fibDelta;
    [i,(J[0<=J<P.size]).each(j,[euklideanNorm(P[j]-p),j-i]).sort.head(4).getInner(1).sort];
  end)
  .group(1)
  .each(g,[g[1].getInner(0),g[0]])
  .map({[$x[0].min,$x[0].max,$x[1]]})
  .sort
  .map({join([$x[0]==$x[1] ? $x[0] &"\v\v" : $x[0]&"\v..\v"&$x[1],$x[2]],"\t:\t")})
  .join("\n")
  .print;
end;

//fibonacciTesselation;

//     0         : [1,2,3,5]
//     1         : [-1,2,3,5]
//     2         : [-2,3,5,8]
//     3         : [-3,-2,5,8]
//     4         : [-3,3,5,8]
//     5         : [-3,5,8,13]
//     6         : [-5,-3,5,8]
//     7..     9 : [-5,5,8,13]
//    10..    16 : [-8,-5,8,13]
//    17         : [-8,8,13,21]

//    18..    23 : [-13,-8,8,13]
//    39..    67 : [-21,-13,13,21]
//    92..   187 : [-34,-21,21,34]
//   226..   508 : [-55,-34,34,55]
//   570..  1360 : [-89,-55,55,89]
//  1461..  3610 : [-144,-89,89,144]
//  3772..  9530 : [-233,-144,144,233]
//  9792.. 25080 : [-377,-233,233,377]
// 25503.. 65871 : [-610,-377,377,610]
// 66554..172793 : [-987,-610,610,987]
//173897..452929 : [-1597,-987,987,1597]
//454715..997415 : [-2584,-1597,1597,2584]

memoized
  fib(i>1)->fib(i-1)+fib(i-2);
  fib(i)->1;


508*2;
