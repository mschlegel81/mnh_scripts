MAX_DIGITS:=100;
MAX_VALUE:=3^MAX_DIGITS;

@SuppressUnusedParameterWarning
type TriadicNumber(L:IntList(1))->true;


toString(n:TriadicNumber)->begin
  local dig:=n[0].digits(3);
  (dig.size>=MAX_DIGITS ? '...' : '')&(dig.trailing(MAX_DIGITS).join(''))&'_3';
end;

TN(i>=0)->[i mod MAX_VALUE].toTriadicNumber;
TN(i<0)->begin
  local allDig:=digits(i,3);
  while(allDig.size<MAX_DIGITS,allDig:=0|allDig);
  [composeDigits(2-allDig,3)+1].toTriadicNumber;
end;

OPERATOR_PLUS (x:TriadicNumber,y:TriadicNumber)->TN(x[0]+y[0]);
OPERATOR_MINUS(x:TriadicNumber,y:TriadicNumber)->TN(x[0]-y[0]);
OPERATOR_MULT (x:TriadicNumber,y:TriadicNumber)->TN(x[0]*y[0]);
OPERATOR_DIVREAL(x:TriadicNumber,y:TriadicNumber)->TN(x[0]*modularInverse(y[0],MAX_VALUE));


format('(%s + %s) / %s = %s',TN(3),TN(6),TN(4),(TN(3)+TN(6))/TN(4));


//(TN(1)+TN((2*3^[0..MAX_DIGITS]).agg(+))).toTriadicNumber.toString;
