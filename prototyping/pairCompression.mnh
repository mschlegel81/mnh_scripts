D:=myPath.fileContents;
symbols:=chars.minus([#0])
              .sort;

mostFrequentPair(T:String)->begin
  local c:=T.chars;
  [0..c.size-2].each(i,join(c[[i,i+1]]))
  .elementFrequency
  .sort(1)
  .trailing[0];
end;

pairCompress(text:String)->pairCompress(text,256);
pairCompress(text:String,maxRounds>0)->pos(#0,text)<Inf ? text : begin
  local T:=text;
  local subsTable:=#0;
  local cs:=T.charSet;
  local remainingSymbols:=symbols.filter({$x not in cs}).head(maxRounds);
  local shrinking:=true;
  while(shrinking and remainingSymbols.size>0,begin
    local nextPair:=mostFrequentPair(T);
    local nextReplacement:=remainingSymbols.head;
    local tabEntry:=nextReplacement&nextPair;
    remainingSymbols:=remainingSymbols.tail;
    local newT:=replace(T,nextPair,nextReplacement);
    (shrinking:=(subsTable&tabEntry&newT).byteLength<
                (subsTable&            T).byteLength)
    ? begin
        T:=newT;
        subsTable&=tabEntry;
      end
    : void;
  end);
  subsTable&#0&T;
end;

pairDecompress(text:String)->text.copy(0,1)=#0 ? begin
  local T:=text.split(#0);
  local subs:=T[1];
  T:=T[2];
  assert(subs.byteLength mod 3=0);
  ([subs.byteLength div 3-1..0]*3).each(k,
  T:=T.replace(subs.copy(k,1),subs.copy(k+1,2)),trailing);
end : text;

//pairCompress(D).pairDecompress;
//D.escape.length;
//D.pairCompress.escape.length;
assert(D.pairCompress.pairDecompress==D);
D.pairCompress.byteLength;
D.compress.byteLength;
//D.compress.base92encode.escape;
