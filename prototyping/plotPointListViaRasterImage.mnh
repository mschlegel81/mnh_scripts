DARTS:=begin
  P:=[random(2)-0.5];
  r:=sqrt(2);
  while P.size<8 do begin
    q:=random(2)-0.5;
    P.each(p,euklideanNorm(p-q)>r,AND)
    ? begin
        P||=q;
        d:=P.agg(+)/P.size;
        P:=P.map((p)->p-d).filter((p)->abs(p[0])<0.5>abs(p[1]));
      end
    : r*=0.9999;
  end;
  P;
end;

plotGrid->begin
  setOptions(["x0"=>-0.1,"x1"=>1.1,"y0"=>-0.1,"y1"=>1,"fontsize"=>10,"preserveAspect"=>true,
              "autoscaleX"=>false,"autoscaleY"=>false,"logscaleX"=>false,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>0,"axisStyleY"=>0].toMap);
  plot([0,0]);
  N0:=[[0,1],[1,1]];
  N0.each(n,begin
    x:=n.agg(/);
    addPlot([[x,-0],[x,1]],'black');
    drawText (x,-0,n.join("/"),10,'T');
  end);
  N1:=[N0.tail,N0.leading].transpose.map((n)->n.agg(+));
  N1.each(n,begin
    x:=n.agg(/);
    addPlot([[x,-0.01],[x,1]],'black 0.75');
    drawText(x,-0.01,n.join("/"),9,'T');
  end);
  all:=N0|N1; all:=all[sortPerm(all.getInner(0)/all.getInner(1))];
  N2:=[all.tail,all.leading].transpose.map((n)->n.agg(+));
  N2.each(n,begin
    x:=n.agg(/);
    addPlot([[x,-0.02],[x,1]],'black 0.5');
    drawText(x,-0.02,n.join("/"),8,'T');
  end);

  all:=N0|N1|N2; all:=all[sortPerm(all.getInner(0)/all.getInner(1))];
  N3:=[all.tail,all.leading].transpose.map((n)->n.agg(+));
  N3.each(n,begin
    x:=n.agg(/);
    addPlot([[x,-0.03],[x,1]],'black 0.25');
    drawText(x,-0.03,n.join("/"),7,'T');
  end);

  all:=N0|N1|N2|N3; all:=all[sortPerm(all.getInner(0)/all.getInner(1))];
  N4:=[all.tail,all.leading].transpose.map((n)->n.agg(+));
  N4.each(n,begin
    x:=n.agg(/);
    addPlot([[x,-0.04],[x,1]],'black 0.125');
    drawText(x,-0.04,n.join("/"),6,'T');
  end);



end;


pointsToRasterImage(pointList,width,height)->begin
  X:=pointList.getInner(0); x0:=min(X); x1:=max(X);
  Y:=pointList.getInner(1); y0:=min(Y); y1:=max(Y);
  X:=(X-x0)*((width -1)/(x1-x0));
  Y:=(y1-Y)*((height-1)/(y1-y0));

  log('Median frequency: ',MF:=elementFrequency(round(X)+round(Y)*width).getInner(1).sort.{$L[$L.size div 2]});

  gamma:=0.7^(2/MF);

  img:=
  DARTS.each(d,begin
    x_:=round(d[0]+X);
    y_:=round(d[1]+Y);
    mask:=0<=x_<width and 0<=y_<height;
    elementFrequency(x_[mask]+width*y_[mask])
    .toList
    .{groupToList(gamma^$L.getInner(1),$L.getInner(0),1,::fail,width*height)};
  end,+)
  .*(1/DARTS.size)
  .map((i)->[0,0,1,1-i]);


  plotRasterImage(img,width,sqrt((x1-x0)/width*(y1-y0)/height),x0,y0);
end;

samples:=
[2..2000].pMap((n)->
  begin
    N:=[0..n];
    transpose([N,N² mod n]*(1/n));
  end)
.flatMap
.toList;
samples.size;

plotGrid;
samples.addPlot('. 0.3 RGB0,0,1,0.5');
addAnimationFrame; postDisplay;

plotGrid;
samples.pointsToRasterImage(100,100);
addAnimationFrame; postDisplay;

plotGrid;
samples.pointsToRasterImage(200,200);
addAnimationFrame; postDisplay;

plotGrid;
samples.pointsToRasterImage(400,400);
addAnimationFrame; postDisplay;

plotGrid;
samples.pointsToRasterImage(800,800);
addAnimationFrame; postDisplay;

//primes(2000).pMap((n)->
//  begin
//    N:=[0..n];
//    transpose([N,N² mod n]*(1/n));
//  end)
//.flatMap
//.toList.addPlot('. 0.3 RGB1,0,0,0.5');


