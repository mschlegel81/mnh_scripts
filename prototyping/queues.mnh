//*Queue
type Queue(E:StatefulExpression(2))->E('CHECK','VALIDITY');

newQueue->toQueue((method in ['put','putEnd','next','hasEnded','size','CHECK'],value)->begin
  local queued:=[];
  local hasEndMarker:=false;
save;
  method=='CHECK' AND value=='VALIDITY' ? true :
  method=='put'    ? queued|=[value] :
  method=='putEnd' ? hasEndMarker:=true :
  method=='size'   ? queued.size :
  method=='next'   ? begin
    local r:=queued[0];
    queued:=queued.tail;
    r;
  end : hasEndMarker;
end);

put   (Q:Queue,value)->Q('put'       ,value);
putEnd(Q:Queue)      ->Q('putEnd'    ,false);
next  (Q:Queue)      ->Q('next'      ,false);
hasEnd(Q:Queue)      ->Q('hasEnded'  ,false);
size  (Q:Queue)      ->Q('size'      ,false);

queueIterator(Q:Queue)->{begin
  local result:=void;
save;
  while((result:=Q.next).isVoid AND !Q.hasEnd,sleep(0.1));
  result;
end}.toIteratableExpression;

begin
  local queue:=newQueue;
  local iterator:=queueIterator(queue);


  localAsync({iterator.pMap(::factorize).agg((x)->print(x))});
  [1..1000].map((i)->begin queue.put(i); sleep(1E-2); end);
  log(queue.size);
  queue.putEnd;
  while(queue.size>0,sleep(1));

end;


