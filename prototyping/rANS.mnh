
//p:=random(256);

p:=[2]|1/[1 .. 255];
m:=2^32-2^16;
l:=begin
  local x:=round(p/p.agg(+)*m);
  while(x.agg(+)>m,x[x.argMax]-=1);
  while(x.agg(+)<m,x[x.argMin]+=1);
  x;
end;
b:=begin
  local r:=2^16;
  (2^16)|l.each(delta,r+=delta);
end;

symbol(i)->begin
  indexOf(b<=i).max;
end;

C(s,x)->m*(x div l[s])+b[s]+(x mod l[s]);
D(x:Int)->begin
  note(x mod m);
  local s:=symbol(x mod m);
  [s,l[s]*(x div m)+(x mod m)-b[s]];
end;

encode(S:IntList)->begin
  local x:=0;
  S.reverseList.each(s,x:=C(s,x),trailing);
end;

decode(x0:Int)->begin
  local x:=x0;
  local result:=[];
  while(x>0,begin
    local d:=D(x);
    result|=d[0];
    x:=d[1];
  end);
  result;
end;

INPUT:=[14,0,13,0,12,0,1,1,2,0,255];
ENCODED:=encode(INPUT);
ENCODED.digits(256);
ENCODED.decode==INPUT;
ENCODED.digits(2^16);
ENCODED.digits(2).size;
ENCODED.digits(2).size/(INPUT.size*8);

