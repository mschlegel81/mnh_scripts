t0(i,j)->begin
 local Q:=0.8660254037844387;
 [[[Q*( 1+(j and 1)+i*2),0.5*( 1+j*3)],
   [Q*(   (j and 1)+i*2),0.5*(-2+j*3)],
   [Q*(-1+(j and 1)+i*2),0.5*( 1+j*3)]],
  [[Q*( 1+(j and 1)+i*2),0.5*( 1+j*3)],
   [Q*( 2+(j and 1)+i*2),0.5*(-2+j*3)],
   [Q*(   (j and 1)+i*2),0.5*(-2+j*3)]]];
end;

t1(i,j)->
  [[[i  ,j  ],
    [i  ,j+1],
    [i+1,j+1],
    [i+1,j  ]]];

t2(i,j)->begin
  local Q:=2.3660254037844384;
  local P:=0.8660254037844388;
  local R:=-0.6339745962155607;
  local shift:=[i*2*Q+(j and 1)*Q,j*Q];
  [[shift+[-P  , -1.5],
    shift+[-Q  ,  R],
    shift+[-1.5,  P],
    shift+[ 0  ,  0]],
   [shift+[ P  , -1.5],
    shift+[ 0  ,  0],
    shift+[ 1.5,  P],
    shift+[ Q  ,  R]],
   [shift+[ 0  ,  0],
    shift+[ P  , -1.5],
    shift+[-P  , -1.5]],
   [shift+[ 0  ,  0],
    shift+[ 0  ,2*P],
    shift+[ 1.5,  P]],
   [shift+[ 0  ,  0],
    shift+[-1.5,  P],
    shift+[ 0  ,2*P]],
   [shift+[-Q   ,R],
    shift+[-Q-P ,R+1.5],
    shift+[-Q+P,R+1.5]]];
end;

t3(i,j)->begin
  local COS_60:=0.8660254037844386;
  local shift:=[(1+COS_60)*(2*i+(j and 1)),(1.5+2*COS_60)*j];
  [[
    shift+[1,0],
    shift+[0,0],
    shift+[0.5,COS_60]],
   [
    shift+[ 0.5,COS_60],
    shift+[ 0,0],
    shift+[-0.5,COS_60]],
   [
    shift+[-0.5,COS_60],
    shift+[0,0],
    shift+[-1,0]],
   [
    shift+[-1,0],
    shift+[0,0],
    shift+[-0.5,-COS_60]],
   [
    shift+[-0.5,-COS_60],
    shift+[0,0],
    shift+[ 0.5,-COS_60]],
   [
    shift+[ 0.5,-COS_60],
    shift+[0,0],
    shift+[ 1,0]],
   [
    shift+[ 0.5,COS_60+1],
    shift+[-0.5,COS_60+1],
    shift+[  0 ,2*COS_60+1]],
   [
    shift+[-0.5,COS_60+1    ],
    shift+[-0.5,COS_60],
    shift+[-0.5-COS_60,COS_60+0.5]],
   [
    shift+[ 0.5  ,-COS_60-1    ],
    shift+[ 0.5  ,-COS_60],
    shift+[ 0.5+COS_60,-COS_60-0.5]],
   [
    shift+[ 0.5+COS_60,COS_60+0.5],
    shift+[ 0.5  ,COS_60],
    shift+[ 0.5  ,COS_60+1    ]],
   [
    shift+[-0.5-COS_60,-COS_60-0.5],
    shift+[-0.5  ,-COS_60],
    shift+[-0.5  ,-COS_60-1    ]],
   [
    shift+[1+COS_60,-0.5],
    shift+[1,0     ],
    shift+[1+COS_60, 0.5]],
   [
    shift+[-1-COS_60, 0.5],
    shift+[-1  , 0],
    shift+[-1-COS_60,-0.5]],
   [
    shift+[1.5+COS_60,0.5+COS_60],
    shift+[1  +COS_60,0.5  ],
    shift+[0.5+COS_60,0.5+COS_60]],
   [
    shift+[-0.5,COS_60],
    shift+[-0.5,COS_60+1],
    shift+[ 0.5,COS_60+1],
    shift+[ 0.5,COS_60]],
   [
    shift+[-0.5,-COS_60-1],
    shift+[-0.5,-COS_60],
    shift+[ 0.5,-COS_60],
    shift+[ 0.5,-COS_60-1]],
   [
    shift+[0.5+COS_60,0.5+COS_60],
    shift+[1  +COS_60,0.5  ],
    shift+[1    ,0    ],
    shift+[0.5  ,    COS_60]],
   [
    shift+[-0.5-COS_60,-0.5-COS_60],
    shift+[-1  -COS_60,-0.5  ],
    shift+[-1    , 0    ],
    shift+[-0.5  ,    -COS_60]],
   [
    shift+[-1  -COS_60,0.5  ],
    shift+[-0.5-COS_60,0.5+COS_60],
    shift+[-0.5  ,    COS_60],
    shift+[-1    ,0    ]],
   [
    shift+[1  +COS_60,-0.5  ],
    shift+[0.5+COS_60,-0.5-COS_60],
    shift+[0.5  ,    -COS_60],
    shift+[1    , 0    ]]
    ];
end;

t4(i,j)->begin
  local COS_60:=0.8660254037844386;
  local shift:=[(COS_60+1.5)*i,(1+2*COS_60)*j+(i and 1)*(COS_60+0.5)];
  [[
    shift+[1,0],
    shift+[0,0],
    shift+[0.5,COS_60]],
   [
    shift+[ 0.5,COS_60],
    shift+[ 0,0],
    shift+[-0.5,COS_60]],
   [
    shift+[-0.5,COS_60],
    shift+[0,0],
    shift+[-1,0]],
   [
    shift+[-1,0],
    shift+[0,0],
    shift+[-0.5,-COS_60]],
   [
    shift+[-0.5,-COS_60],
    shift+[0,0],
    shift+[ 0.5,-COS_60]],
   [
    shift+[ 0.5,-COS_60],
    shift+[0,0],
    shift+[ 1,0]],
   [
    shift+[-0.5,COS_60+1    ],
    shift+[-0.5,COS_60],
    shift+[-0.5-COS_60,COS_60+0.5]],
   [
    shift+[ 0.5+COS_60,COS_60+0.5],
    shift+[ 0.5  ,COS_60],
    shift+[ 0.5  ,COS_60+1    ]],
   [
    shift+[-0.5,COS_60],
    shift+[-0.5,COS_60+1],
    shift+[ 0.5,COS_60+1],
    shift+[ 0.5,COS_60]],
   [
    shift+[0.5+COS_60,0.5+COS_60],
    shift+[1  +COS_60,0.5  ],
    shift+[1    ,0    ],
    shift+[0.5  ,    COS_60]],
   [
    shift+[-1  -COS_60,0.5  ],
    shift+[-0.5-COS_60,0.5+COS_60],
    shift+[-0.5  ,    COS_60],
    shift+[-1    ,0    ]]];
end;

t5(i,j)->begin
  local Q:=0.8660254037844386;
  local shift:=[(1.5)*i,(2*Q)*j+(i and 1)*(Q)];
  [[shift+[1,0],
    shift+[ 0.5,-Q],
    shift+[-0.5,-Q],
    shift+[-1,0],
    shift+[-0.5,Q],
    shift+[ 0.5,Q]]];
end;

fishbone(i,j)->begin
  //local H_SQRT:=sqrt(0.5);
//  [[[ 0,0],
//    [ 0,4],
//    [ 1,4],
//    [ 1,0]],
//   [[-4,0],
//    [-4,1],
//    [ 0,1],
//    [ 0,0]]];

  local dx:=i*8;
  local dy:=j*2;

  [[[dx  ,dy  ],
    [dx+4,dy+4],
    [dx+5,dy+3],
    [dx+1,dy-1]],
   [[dx-4,dy+4],
    [dx-3,dy+5],
    [dx+1,dy+1],
    [dx  ,dy  ]]];
end;

drawTesselation(f:Expression(2))->cross([-1..1],[-1..1]).map({(f@$ij).each(x,x,[Nan,Nan],|).addPlot('polygon f')});

checkTriangle(a,b,c)->begin
  local ca:=c-a;
  local ba:=b-a;
  ba[0]*ca[1]-ba[1]*ca[0]<0;
end;

checkPolygon(L:List)->begin
  L.size=3
  ? checkTriangle@L
  : [0..L.size-1].each(i0,checkTriangle@(L[[i0..i0+2] mod L.size]),and);
end;

checkTesselation(f:Expression(2))->begin
  f(0,0).each(polygon,
    checkPolygon(polygon)
    ? true
    : (warn('polygon #',index,' is not oriented correctly') orElse false),and)
  ? print(nameOf f,' is okay')
  : fail (nameOf f,' is not okay');
end;

fibonacciTesselation->begin
  local fibonacciNumber:=[1,2];
  while(fibonacciNumber.size<45,fibonacciNumber|=fibonacciNumber.trailing(2).agg(+));
  print(fibonacciNumber);
  local P:=[0..1004180];
  P:=[cos(2*pi/sqr((sqrt(5)-1)/2)*P),
      sin(2*pi/sqr((sqrt(5)-1)/2)*P)].transpose*sqrt(P);

  local polygons:=[];
  local addPoly:={polygons||=P[ $i]};

  addPoly([1, 2, 3]);
  addPoly([1, 4, 2]);
  addPoly([2,10, 5]);
  addPoly([5,13, 8]);
  addPoly([1, 9, 4]);

  addPoly([2, 4,12,7]);
  addPoly([2, 5, 8,3]);
  addPoly([1, 3,11,6]);
  addPoly([1, 6,14,9]);

  polygons.map(::checkPolygon).agg(and).assert;
  polygons.each(p,p,[[Nan,Nan]],|).addPlot('green f polygon');
  polygons:=[];


  [     1+1..      1+   8].map({addPoly($k+[0,  13,   5].reverseList)});
  [    18+1 ..    18+  13].map({addPoly($k+[0,  21,   8])});
  [    67+1 ..    67+  21].map({addPoly($k+[0,  34,  13].reverseList)});
  [   187+1 ..   187+  34].map({addPoly($k+[0,  55,  21])});
  [   508+1 ..   508+  55].map({addPoly($k+[0,  89,  34].reverseList)});
  [  1360+1 ..  1360+  89].map({addPoly($k+[0, 144,  55])});
  [  3610+1 ..  3610+ 144].map({addPoly($k+[0, 233,  89].reverseList)});
  [  9530+1 ..  9530+ 233].map({addPoly($k+[0, 377, 144])});
  [ 25080+1 .. 25080+ 377].map({addPoly($k+[0, 610, 233].reverseList)});
//[ 65871+1 .. 65871+ 610].map({addPoly($k+[0, 987, 377])});
//[172793+1 ..172793+ 987].map({addPoly($k+[0,1597, 610].reverseList)});
//[452929+1 ..452929+1597].map({addPoly($k+[0,2584, 987])});
//[997415+1 ..997415+2584].map({addPoly($k+[0,4181,1597].reverseList)});

  polygons.each(p,p,[[Nan,Nan]],|).addPlot('red f polygon');
  polygons.map(::checkPolygon).agg(and).assert;
  polygons:=[];

  [     1+1 ..    18].map({addPoly($k+[0,   8,  21,  13].reverseList)});
  [    18+1 ..    67].map({addPoly($k+[0,  13,  34,  21])});
  [    67+1 ..   187].map({addPoly($k+[0,  21,  55,  34].reverseList)});
  [   187+1 ..   508].map({addPoly($k+[0,  34,  89,  55])});
  [   508+1 ..  1360].map({addPoly($k+[0,  55, 144,  89].reverseList)});
  [  1360+1 ..  3610].map({addPoly($k+[0,  89, 233, 144])});
  [  3610+1 ..  9530].map({addPoly($k+[0, 144, 377, 233].reverseList)});
  [  9530+1 .. 25080].map({addPoly($k+[0, 233, 610, 377])});
//[ 25080+1 .. 65871].map({addPoly($k+[0, 377, 987, 610].reverseList)});
//[ 65871+1 ..172793].map({addPoly($k+[0, 610,1597, 987])});
//[172793+1 ..452929].map({addPoly($k+[0, 987,2584,1597].reverseList)});
//[452929+1 ..997415].map({addPoly($k+[0,1597,4181,2584])});


  polygons.map(::checkPolygon).agg(and).assert;
  polygons.each(p,p,[[Nan,Nan]],|).addPlot('blue f polygon');

  P.head(60).each(p,index=0 ? void : drawText(p[0],p[1],index.toString));
end;


[::t0,::t1,::t2,::t3,::t4,::t5,::fishbone].each(f,plot(),drawTesselation(f),addAnimationFrame).flatten;
[::t0,::t1,::t2,::t3,::t4,::t5,::fishbone].map(::checkTesselation);
//
//clearAnimation;


