phi:=(sqrt(5)+1)/2;

ICOSAHEDRON :=[[[ 0, phi, 1],[ 1, 0, phi],[ phi, 1, 0],[-1, 0, phi],[-phi, 1, 0],[ 0,-phi, 1],[ phi,-1, 0],[-phi,-1, 0],[ 0, phi,-1],[ 1, 0,-phi],[-1, 0,-phi],[ 0,-phi,-1]]
               .map((n)->n/n.euklideanNorm),
               [[1,2,0],[0,4,3],[5,6,1],[3,7,5],[2,9,8],[8,10,4],[11,9,6],[7,10,11],[0,3,1],[1,3,5],[9,10,8],[11,10,9],[2,8,0],[0,8,4],[5,11,6],[7,11,5],[1,6,2],[4,7,3],[2,6,9],[10,7,4]]];
USE plot3d;

splitTriangles(geometry)->begin
  nodes:=geometry[0];
  faces:=geometry[1];

  newNodes:=[].toMap;

  faces:=
  faces.each(face,begin
    between:=[[face[0],face[1]].sort,
                    [face[1],face[2]].sort,
                    [face[2],face[0]].sort]
    .each(edge,newNodes[edge] orElse newNodes[edge]:=begin
       i:=nodes.size;
       p:=nodes[edge[0]]+nodes[edge[1]]; p/=p.euklideanNorm;
       nodes||=p;
       i;
     end);
   //      a
   //     / \
   //    c'--a'
   //   / \ / \
   //  c---b'--b
     [between,
      [face[0],between[0],between[2]],
      [face[1],between[1],between[0]],
      [face[2],between[2],between[1]]];
  end,|);

  [nodes,faces];

end;


begin
  assertGuiStarted;
  material:=[materialOf([0.5,0,0,0.5],[1,1,0],[0,0,0],1)];
  icosahedron  := ICOSAHEDRON.splitTriangles |material;
  light:=[-1,1,-1]/sqrt(3);
  clearAnimation;
  ([0..-49]/100*2*pi).each(angle,begin
    plot();
    plotBackground(-3,[1,1,1]*0.5,1,[1,1,1]*0.99);
    icosahedron .rotateY(angle).rotateX(-0.5).illuminateAndProject(light,0.5);
    addAnimationFrame;
    void;
  end);
end;
