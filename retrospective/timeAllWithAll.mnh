#/usr/bin/mnh -GUI
memoized allScripts     ->files('x\*.mnh').map(::systemSpecificFilename);
memoized allInterpreters->files('mnh_B*_light.exe');
memoized exeToBuildNumber(exe:String)->exe.copy(5,3).toInt;

curry timeRun(parameter:String,runner:String)->
  begin
    local timingResult:=time({exec(runner,[parameter])});
    [runner,
      timingResult['result'].trailing==0
      ? timingResult['time']
      : Nan];
  end;

scrambleList(L:List)->L[sortPerm(L.size.random)];
symmetricTrim(L:List,targetLength:Int)->begin
  (local oversize:=L.size-targetLength)<0
  ? L
  : L.tail(oversize div 2).leading(oversize-oversize div 2);
end;

datastore lastTiming:=[].toMap;

timeScript(script:String)->begin
  print('Testing ',script);
  local times:=allInterpreters.scrambleList.map(timeRun(script));
  local skips          :=times.map({isNan($x[1]) ? $x[0] : void}).toSet;
  times:=times.filter({!isNan($x[1])});
  local totalTestTime:=times.getInner(1).agg(+);
  print('  Total test time is ',totalTestTime,'s');
  local additionalTests:=max(2,round(20/totalTestTime)*2);

  print('  Executing ',additionalTests,' additional tests per exe');
  times|=cross([1.. additionalTests],allInterpreters.minus(skips))
    .getInner(1)
    .scrambleList
    .map(timeRun(script));
  times.group(0).each(g,[exeToBuildNumber(g.head.head),g.getInner(1).sort.symmetricTrim(9)]).sort;
end;

plotTiming(title:String,L:List)->begin
  local X:=L.getInner(0);
  local YL:=L.getInner(1).transpose;
  local km:=YL.size div 2;
  local range:=[0..km-1];
  ['autoscaleFactor'=>1.0,
    'autoscaleX'=>true,
    'autoscaleY'=>true,
    'axisStyleX'=>3,
    'axisStyleY'=>3,
    'fontsize'=>8,
    'logscaleX'=>false,
    'logscaleY'=>false,
    'preserveAspect'=>false].toMap.setOptions;
  plot();
  [range,YL.size-1-range].transpose.each(r,
    begin
      local Y0:=YL[r[0]];
      local Y1:=YL[r[1]];
      X.each(x,[x,Y0[index]],[x,Y1[index]]).addPlot('red tube f 0');
    end);
  addPlot(X,YL[km],'black l .');
  drawTextAbsolute(1,1,extractFileName(title),8,'TR');
end;

//*Run specified test or all tests if none is specified
main('run',...)->begin
  assertUniqueInstance;
  clearAnimation;
  (size(...)=0 ? allScripts : map(...,::systemSpecificFilename)).each(script,begin
    local timing:=timeScript(script);
    lastTiming[script]:=timing;
    plotTiming(script,timing);
    addAnimationFrame;
    postDisplay;
  end);
end;

//*Show graph for last stored test run
main('replay')->begin
  assertUniqueInstance;
  clearAnimation;
  lastTiming.sort.each(entry,plotTiming(entry[0],entry[1]),addAnimationFrame);
  display;
end;
