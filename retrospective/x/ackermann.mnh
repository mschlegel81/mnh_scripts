//@demo_for=memoization
//@AllowOnly=pure
memoized
private ackermann(  0,n>0)->n+1;
//Possible extensions (instead of memoization)
//      ackermann(  1,n>0)->2+n;//=2^(n+3)-3
//      ackermann(  2,n>0)->       2*(n+3)-3;
//      ackermann(  3,n>0)->       2^(n+3)-3;
private ackermann(m>0,n=0)->ackermann(m-1,1);
private ackermann(m>0,n>0)->ackermann(m-1,ackermann(m,n-1));

//*Solves the "Ackermann" task from http://rosettacode.org/wiki/Ackermann_function
main->print('See http://rosettacode.org/wiki/Ackermann_function') and
      [0..14].each(n,print('ackermann(3,',n,')=',ackermann(3,n)));

main(a,b)->print(ackermann(a.toInt,b.toInt));
