//Solves the "Queens puzzle"
//Queens are represented as lists of integers where the position in
//the list indicates the row and the value represents the column

//*Always true (first queen)
isValid([],newQueen:Int)->true;
//*For n+1 Queens, test Queens [n-1..0] if they threaten Queen [n]
isValid(oldQueens:IntList,newQueen:Int)->(abs(oldQueens-newQueen)!=[oldQueens.size..1]).agg(AND);

//*No candiates left: return H
queens(H:IntList,[].toSet)->[H];
//*Try to elongate H by each element in C, testing if it is valid. Recurse.
queens(H:IntList,C:IntCollection)->C.pEach(c,isValid(H,c)
                                             ? queens(H|c,C.minus([c]))
                                             : void,|);
queens(numberOfQueens>1)->sort(queens([],[1..numberOfQueens]) orElse []);

fmtSolution(solution:IntList)->solution.each(k,['A'..'Z'][index],k,' ',&);

inform(numberOfQueens:Int,allSolutions:Boolean)->begin
  local solutions:=queens(numberOfQueens);
  print('The ',numberOfQueens,'-queens puzzle has ',solutions.size,' solutions');
  allSolutions
  ? solutions.each(s,print('  ',fmtSolution(s)))
  : solutions.size>0
    ? print('  e.g. ',fmtSolution(solutions.head))
    : void;
end;

@demo_for=textbook problems, recursion
//*Print out the solutions for the queens puzzle
main(numberOfQueens)->inform(numberOfQueens.toInt,true);

//*Print out the numbers of solutions for the 2..8 queens puzzle
main->[2..8].each(q,inform(q,false));
