private memoized
  fib(i>=1)->fib(i-1)+fib(i-2);
  fib(i<=0)->1;
  fib(I:IntList)->I.map(::fib);

//*Encodes i
zeckendorfEncode(i:Int)->begin
  local k:=0;
  while(fib(k)<i,k+=1);
  local j:=i;
  fib([k..0]).each(f,j>=f ? begin j-=f; 1; end : 0).composeDigits(2);
end;
zeckendorfEncode(I:IntList)->I.pMap(::zeckendorfEncode);

//*Decodes i
zeckendorfDecode(i:Int)->i.digits(2).reverseList.each(b,b*fib(index),+);
zeckendorfDecode(I:IntList)->I.pMap(::zeckendorfDecode);

private examples:=[1,2,3,4,5,17,100,255];
//*Returns string of i in binary representation
private binString(i:Int)->i.digits(2).join;

private memoized avgLen(bits)->zeckendorfEncode([2^(bits-1)..2^bits-1]).pEach(i,i.digits(2).size,+)/(2^(bits-1));

//*Displays examples for Zeckendorf-encoding
//*and average lengths compared to binary representation
@demo_for=transcoding
main->
printf('%8d %8d %12d',
  'decimal'|examples,
  'binary'|(examples.map(::binString)),
  'Zeckendorf'|examples.map(::zeckendorfEncode).map(::binString))|
print("\n    bits rel. overhead") |
printf('%2d %5.2f     %9.4f',
       [1..12],
       [1..12].each(i,avgLen(i)),
       [1..12].each(i,avgLen(i))/[1..12]);
