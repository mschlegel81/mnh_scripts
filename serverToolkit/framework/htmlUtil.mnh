

tag(content,t)->format('<%s>%s</%s>',t,content,t);
bold(content)->tag(content,'b');
code(content)->tag(content,'code');
htmlLink(linkText:String,linkTarget:String)->'<a href="'&linkTarget&'">'&linkText&'</a>';
htmlTable(L:List)->'<table>'&join('<tr class = "hoverCol">'&L.map({join('<td>'&$row&'</td>')})&'</tr>')&'</table>';

htmlClean(text:String)->
text.replace(['&'  ,'"'   ,"'"   ,'<' ,'>'],
         '&'&['amp','quot','apos','lt','gt']&';');

mutable headLinks:=[];
addHeadLink(caption:String,target:String)->headLinks|=htmlLink(htmlClean(caption),target);

apiCall(id)->['/api/'&id,['jsFunction'=>...,
                          'apiFunction'=>()->httpError].toMap];

lazy(E:Expression,...)->
begin
  assert(E.arity==size(...));
  {begin
    local e:=E;
    local result:=void;
  save;
    result orElse result:=e@...;
  end};
end;

mutable pageMap:=[].toMap;
type HtmlPage(M:Map(4))->M.getInner(0)==['title','head','body','script'].toSet;

CRLF:="\r\n";

BASIC_SUPPORT_IMPORT:='<script type="text/javascript" src="basicSupport.js"></script>';
INCLUDE_HTML_CALL:='includeHTML();';

htmlPage(title:String)->[
  'title'=>title,
  'head'=>['<meta content="text/html; charset=UTF-8" http-equiv="content-type">',
           '<title>'&htmlClean(title)&'</title>',
           '<link rel="stylesheet" type="text/css" href="style.css">'],
  'body'=>[headLinks.join("&nbsp;&nbsp;").tag('div')],
  'script'=>[]].toMap.toHtmlPage;

addStaticHtmlElement(page:HtmlPage,element:String)->begin
  local newPage:=page;
  newPage['body']|=element;
  newPage.toHtmlPage;
end;

addLazyLoadedElement(page:HtmlPage,apiPath:String)->begin
  local newPage:=page;
  newPage['body']|=format('<span w3-include-html="%s"></span>',apiPath);
  BASIC_SUPPORT_IMPORT in page['head']
  ? void
  : newPage['head']|=BASIC_SUPPORT_IMPORT;

  newPage.toHtmlPage;
end;

addRefreshingElement(page:HtmlPage,apiPath:String,refreshIntervalInMilliseconds:Int)->begin
  local newPage:=page;
  newPage['body']|=format('<span w3-include-html="%s" include-interval=%s></span>',apiPath,refreshIntervalInMilliseconds);
  BASIC_SUPPORT_IMPORT in page['head']
  ? void
  : newPage['head']|=BASIC_SUPPORT_IMPORT;
  newPage.toHtmlPage;
end;

build(page:HtmlPage)->begin
  ['<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">',
   '<head>',
   page['head'],
   '</head>',
   '<body>',
   page['body'],
   '<script>',
   page['script'],
   BASIC_SUPPORT_IMPORT in page['head'] ? INCLUDE_HTML_CALL : void,
   '</script>',
   '</body>']
   .flatten.join(CRLF);
end;

registerPage(page:HtmlPage,path:String)->begin
  addHeadLink(page,path);
  pageMap[path]:=lazy({$0.build.wrapTextInHttp},page);
end;

MIME_TYPE:=['.wav'=>'audio/wav','.xla'=>'application/msexcel','.ppm'=>'image/x-portable-pixmap','.mbd'=>'application/mbedlet','.mp2'=>'audio/x-mpeg','.rpm'=>'audio/x-pn-realaudio-plugin','.mp3'=>'audio/mpeg','.txt'=>'text/plain','.asd'=>'application/astound','.pdf'=>'application/pdf','.movie'=>'video/x-sgi-movie','.pps'=>'application/mspowerpoint','.ppt'=>'application/mspowerpoint','.xpm'=>'image/x-xpixmap','.talk'=>'text/x-speech','.vivo'=>'video/vnd.vivo','.rtx'=>'text/richtext','.bcpio'=>'application/x-bcpio','.wbmp'=>'image/vnd.wap.wbmp','.csh'=>'application/x-csh','.php'=>'application/x-httpd-php','.cod'=>'image/cis-cod','.ppz'=>'application/mspowerpoint','.asn'=>'application/astound','.gz'=>'application/gzip','.xls'=>'application/msexcel','.com'=>'application/octet-stream','.swf'=>'application/x-shockwave-flash','.dus'=>'audio/x-dspeeh','.fif'=>'image/fif','.css'=>'text/css','.roff'=>'application/x-troff','.csv'=>'text/comma-separated-values','.stream'=>'audio/x-qt-stream','.sv4cpio'=>'application/x-sv4cpio','.docx'=>'application/vnd.openxmlformats-officedocument.wordprocessingml.document','.tr'=>'application/x-troff','.ustar'=>'application/x-ustar','.sv4crc'=>'application/x-sv4crc','.vmd'=>'application/vocaltec-media-desc','.dir'=>'application/x-director','.ps'=>'application/postscript','.hqx'=>'application/mac-binhex40','.vmf'=>'application/vocaltec-media-file','.shar'=>'application/x-shar','.mcf'=>'image/vasa','.sca'=>'application/x-supercard','.tif'=>'image/tiff','.reg'=>'application/force-download','.mov'=>'video/quicktime','.ico'=>'image/x-icon','.wmlc'=>'application/vnd.wap.wmlc','.dvi'=>'application/x-dvi','.sgm'=>'text/x-sgml','.cpio'=>'application/x-cpio','.ram'=>'audio/x-pn-realaudio','.ogv'=>'video/ogg','.zip'=>'application/zip','.xlsx'=>'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet','.mpe'=>'video/mpeg','.viv'=>'video/vnd.vivo','.ras'=>'image/cmu-raster','.mpg'=>'video/mpeg','.cdf'=>'application/x-netcdf','.tar'=>'application/x-tar','.wmls'=>'text/vnd.wap.wmlscript','.spc'=>'text/x-speech','.gtar'=>'application/x-gtar','.tex'=>'application/x-tex','.chm'=>'application/mshelp','.eps'=>'application/postscript','.png'=>'image/png','.etx'=>'text/x-setext','.oda'=>'application/oda','.aifc'=>'audio/x-aiff','.qt'=>'video/quicktime','.spl'=>'application/futuresplash','.cht'=>'audio/x-dspeeh','.pnm'=>'image/x-portable-anymap','.json'=>'application/json','.aiff'=>'audio/x-aiff','.jpeg'=>'image/jpeg','.t'=>'application/x-troff','.fh4'=>'image/x-freehand','.ai'=>'application/postscript','.fh5'=>'image/x-freehand','.dwg'=>'application/acad','.spr'=>'application/x-sprite','.doc'=>'application/msword','.z'=>'application/x-compress','.es'=>'audio/echospeech','.class'=>'application/octet-stream','.ra'=>'audio/x-pn-realaudio','.pbm'=>'image/x-portable-bitmap','.sgml'=>'text/x-sgml','.tbk'=>'application/toolbook','.nsc'=>'application/x-nschat','.aif'=>'audio/x-aiff','.tiff'=>'image/tiff','.au'=>'audio/basic','.nc'=>'application/x-netcdf','.xbm'=>'image/x-xbitmap','.cab'=>'application/x-shockwave-flash','.gif'=>'image/gif','.file'=>'application/octet-stream','.xwd'=>'image/x-windowdump','.mid'=>'audio/x-midi','.dot'=>'application/msword','.tsi'=>'audio/tsplayer','.ief'=>'image/ief','.ptlk'=>'application/listenup','.sprite'=>'application/x-sprite','.rgb'=>'image/x-rgb','.mpeg'=>'video/mpeg','.tsp'=>'application/dsptype','.dxf'=>'application/dxf','.dcr'=>'application/x-director','.latex'=>'application/x-latex','.avi'=>'video/x-msvideo','.pot'=>'application/mspowerpoint','.smp'=>'application/studiom','.pgm'=>'image/x-portable-graymap','.wml'=>'text/vnd.wap.wml','.tsv'=>'text/tab-separated-values','.texinfo'=>'application/x-texinfo','.man'=>'application/x-troff-man','.phtml'=>'application/x-httpd-php','.tcl'=>'application/x-tcl','.dxr'=>'application/x-director','.sit'=>'application/x-stuffit','.vox'=>'audio/voxware','.jpe'=>'image/jpeg','.sh'=>'application/x-sh','.rtc'=>'application/rtc','.jpg'=>'image/jpeg','.fhc'=>'image/x-freehand','.webm'=>'video/webm','.ini'=>'application/octet-stream','.src'=>'application/x-wais-source','.svg'=>'image/svg+xml',
'.html'=>'',
'.js'=>'application/javascript'].toMap;

@SuppressUnusedWarning
SETUP_DEFAULTS:=
files(myPath.extractFileDirectory&'/*')
  .filter((n)->!isVoid(MIME_TYPE[n.extractFileExt.lower]))
  .map((n)->begin
    pageMap['/'&n.extractFileName]:=
     lazy({fileContents($path).wrapTextInHttp(200,
           ['Content-type:' =>MIME_TYPE[$path.extractFileExt.lower],
            'Cache-Control:'=>'max-age=3600'].toMap)},n);
  end);

mutable killRequested:=false;

TEST_PATH:='/api/simpleMethod';
@restGet={TEST_PATH}
@produces=application/javascript
binaryMethod(parameters,body:Map)->[].toMap.formatJson;

TEST_PATH2:='/api/simpleMethod2';
@restGet={TEST_PATH2}
binaryMethod->[].toMap.formatJson;

private mutable callables;

ensureCallables->callables orElse callables:=
inspectAll
  .getInner(1)
  .each(m,m['declares'].getInner(1)
  .each(rule,begin
     rule['subrules'].orElse([]).map((subrule)->begin
       subrule['attributes'].getInner(0).intersect(['restGet','restPut','restPost','restDelete']).size>0
       ? subrule.mergeMaps(['function'=>rule['function']].toMap,::orElse)
       : void;
     end);
   end,|),|)
  .map((apiCall)->begin
     local method:=apiCall['attributes'].getInner(0).filter((c)->c.matches('^rest')).toList[0];
     local path:=apiCall['attributes',method];
     method:=method.copy(4).upper;
     local produces:=apiCall['attributes','produces'] orElse 'Text/Html';
     local function:=apiCall['function'];
     local pattern:=apiCall['pattern'].unbrace.split(',').trim.split(':').getInner(0);
     [method,path]=>[function,pattern,produces];
   end).toMap;


doServe(Request:Map)->begin
  local key:=[Request['request','method'],Request['request','path'].extractPath];
  local F:=callables[key];
end;

callables;

//
//inspect['declares']
//  .getInner(1)
//  .map((rule)->rule['subrules'].orElse([])
//  .filter((subrule)->subrule['attributes'].getInner(0).intersect(['restGet','restPut','restPost','restDelete']).size>0));





//wrapTextInHttp('',200,[].toMap);






//serve(R:Map)->serve(R['request','method'],
//                    R['request','path'].extractPath,
//                    R['request','path'].extractParameters,
//                    R['body'].parseJson);


//  startHttpServer(IP_AND_PORT,(R)->log(R) orElse serve(R['request','method'],
//                                                       extractPath(R['request','path']),
//                                                       extractParameters(R['request','path']),
//                                                       R['body']),-1);
//


//@after
//restart->begin
//  log('Performing restart');
//  local ipcIsUpAgain:=false;
//  local numberOfTries:=0;
//  while(!ipcIsUpAgain,begin
//    execAsync(executor,[myPath]);
//    sleep(5);
//    ipcIsUpAgain:=isLoggingRunnerIpcServerRunning;
//    assert((numberOfTries+=1)<60); //try for about 1 minute, then fail
//  end);
//end;
