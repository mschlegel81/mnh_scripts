//*Returns the distinct bases for palindromes in base [digitBase]
private palindromeBase(digitBase>=2,digitCount=1)->[1];
private palindromeBase(digitBase>=2,digitCount>1)->
  (digitCount and 1)=1
  ? digitBase^[digitCount-1..digitCount div 2+1]+
    digitBase^[0..           digitCount div 2-1]|digitBase^(digitCount div 2)
  : digitBase^[digitCount-1..digitCount div 2  ]+
    digitBase^[0..           digitCount div 2-1];

//*Returns a generator returning all palindrome numbers in the given base in ascending order
//*Note: The first returned element is 0
@SuppressUnusedWarning
palindromeNumberGenerator(base>=2)->{
  begin
    local digitBase:=base;
    local digitCount:=0;
    local pBase:=[0];
    local digitGen:=rangeGenerator(0,0);
  save;
    local next:=digitGen();
    next.isVoid
    ? begin
        pBase:=palindromeBase(digitBase,digitCount+=1);
        digitGen:=rangeGenerator(digitBase^(pBase.size-1),
                                 digitBase^ pBase.size-1);
        next:=digitGen();
      end
    : void;
    (next.digits(digitBase)*pBase).agg(+);
  end}.toIteratableExpression;

//*Returns a generator returning elements both returned in G1 and G2
//*Note: This requires both generators to return values in increasing order
@SuppressUnusedWarning
intersector(G1:IteratableExpression,G2:IteratableExpression)->{
  begin
    local gen1:=G1;
    local gen2:=G2;
    local next1:=gen1();
    local next2:=gen2();
  save;
    while(isNumeric(next1) AND isNumeric(next2) AND next1!=next2,
      next1<next2
      ? next1:=gen1()
      : next2:=gen2());
    //here: next1 = next2
    local r:=isVoid(next2) ? void : next1;
    next1:=gen1();
    next2:=gen2();
    r;
  end}.toIteratableExpression;

palindromesOfLength(digitBase>=2,digitCount>=1)->begin
  local B:=palindromeBase(digitBase,digitCount);
  rangeGenerator(digitBase^(B.size-1), digitBase^B.size-1)
  .pMap({($x.digits(digitBase)*B).agg(+)});
end;

memoized palindromesSmallerThan(digitsBase>=2,upperThreshold>1)->begin
  local result:=[];
  local upperDigits:=ceil(ln(upperThreshold)/ln(digitsBase));
  [1..upperDigits].each(digitCount,begin
    local part:=digitsBase.palindromesOfLength(digitCount);
    result|= digitCount==upperDigits
             ? part[part<upperThreshold]
             : part;
    void;
  end);
  result;
end;

getPalindromeBases(i:Int)->begin
  [2..16].filter({begin
    local d:=digits(i,$base);
    d.reverseList==d;
  end});
end;

@SuppressUnusedWarning
commomPalindromes(base1,base2,maxVal)->
  intersect(base1.palindromesSmallerThan(maxVal),
            base2.palindromesSmallerThan(maxVal));

@SuppressUnusedWarning
formatInBase(i:Int,base in [2..9])->format('%s_%s',i.digits(base).join,base);
formatInBase(i:Int,base=10)->i.toString;
LONG_DIGITS:=['0'..'9','A'..'Z'];
formatInBase(i:Int,base>10)->format('%s_%s',LONG_DIGITS.get(i.digits(base)).join,base);

//begin
//  local i:=1;
//  local maxS:=0;
//  while(true,begin
//    local b:=getPalindromeBases(i+=1).filter({$b<i});
//    b.size>maxS
//    ? begin
//        print(i,' = ',b.map({formatInBase(i,$base)}).join(" = "));
//        maxS:=b.size;
//      end
//    : void;
//  end);
//end;


digits(121,3);
digits(121,7);
digits(121,8);
digits(121,10);
factorize(121);
//
//formatInBase(121,3);
//formatInBase(121,7);
//formatInBase(121,8);
//formatInBase(121,10);



//palindromeNumberGenerator(2).head(50);
//palindromeNumberGenerator(3).head(50);
//
//intersector(palindromeNumberGenerator(2),
//            palindromeNumberGenerator(3)).map({print($x,' = ',$x.formatInBase(2),' = ',$x.formatInBase(3))});


primeGenerator.pMap({begin
  local b:=getPalindromeBases($p);
  b.size<2 ? void : [$p,b];
end}).map(::print);
