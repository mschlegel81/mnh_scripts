private memoized getSamples(k,scale)->begin
  local Y:=([0..k-1]+0.5)*scale-16;
  local X:=([0..k-1]+0.5)*scale-16;
  Y.cross(X).transpose;
end;

plotInterference(S0,S1,S2,samples)->begin
  local k:=round(sqrt(samples));
  local scale:=32/k;
  local P:=getSamples(k,scale);
  local t0:=scriptTime;
  local d0:=(P-S0).transpose.euklideanNorm;
  local d1:=(P-S1).transpose.euklideanNorm;
  local d2:=(P-S2).transpose.euklideanNorm;

  local plotData:=
  [(sqr(sin(d0)+sin(d1)+sin(d2))+
    sqr(cos(d0)+cos(d1)+cos(d2)))/9,k,scale,-16,-16];

  ['time'=>scriptTime-t0,
   'plot'=>plotData].toMap;
end;

smoothRandomPos(dt)->{begin
  local p0:=2*(random(2)-0.5);
  local p1:=2*(random(2)-0.5);
  local v:=2*(random(2)-0.5);
  local a:=p1-p0-v;
  local t:=0;
save;
  (t+=dt)>1 ? begin
    p0:=p1;
    v :=v + 2*a;
    p1:=2*(random(2)-0.5);
    a:=p1-p0-v;
    t-=1;
  end : void;
  p0+t*(v+t*a);
end}.toGenerator;


begin
  callMemoryCleaner;
  local samples:=100Â²;
  local nextResampling:=scriptTime+10;
  clearAnimation(true);
  setOptions(["x0"=>-1,"x1"=>1,"y0"=>-1,"y1"=>1,"fontsize"=>10,"preserveAspect"=>true,"autoscaleX"=>true,"autoscaleY"=>true,"logscaleX"=>false,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>0,"axisStyleY"=>0].toMap);
  plot();
  postDisplay;
  zip(smoothRandomPos(0.01),
      smoothRandomPos(0.01),
      smoothRandomPos(0.01))
  .map((x)->x*16)
  .pMap((par)->plotInterference@(par|samples))
  .agg((next)->begin
     plot();
     plotRasterImage@(next['plot']);
     local framesAhead:=addAnimationFrame['frameCount'];
     note('samples: ',samples,' ',framesAhead);
     scriptTime>nextResampling
     ? begin
         nextResampling:=scriptTime+10;
         framesAhead>100
         ? samples:=sqr(sqrt(samples)+1)
         : samples:=sqr(sqrt(samples)-1);
       end
     : void;
   end);
end;
