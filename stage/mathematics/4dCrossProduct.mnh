

M:=[['a','b','c','d'],
    ['e','f','g','h'],
    ['i','j','k','l'],
    ['m','n','o','p']];

embrace(s:String)->copy(s,[0,s.length-1])==['(',')'] ? s : format('(%s)',s);

det(M:List(2))->format('%s*%s-%s*%s',M[0,0],M[1,1],M[0,1],M[1,0]);
det(M:List   )->M.head.each(m,
              begin
                local filter:=[0..M.size-1]!=index;
                format('%s%s*%{embrace($2)}s',(index and 1)=1 ? '-' : '+', m,det(M.tail.map((j)->j[filter])));
              end,&);

//det([['A','B'],['X','Y']]);

det([['e[0]','e[1]','e[2]','e[3]'],
     ['x[0]','x[1]','x[2]','x[3]'],
     ['y[0]','y[1]','y[2]','y[3]'],
     ['z[0]','z[1]','z[2]','z[3]']]);

cross(x:NumericList(4),
      y:NumericList(4),
      z:NumericList(4))->
begin
  [(x[1]*(y[2]*z[3]-y[3]*z[2])-x[2]*(y[1]*z[3]-y[3]*z[1])+x[3]*(y[1]*z[2]-y[2]*z[1])),
  -(x[0]*(y[2]*z[3]-y[3]*z[2])-x[2]*(y[0]*z[3]-y[3]*z[0])+x[3]*(y[0]*z[2]-y[2]*z[0])),
   (x[0]*(y[1]*z[3]-y[3]*z[1])-x[1]*(y[0]*z[3]-y[3]*z[0])+x[3]*(y[0]*z[1]-y[1]*z[0])),
  -(x[0]*(y[1]*z[2]-y[2]*z[1])-x[1]*(y[0]*z[2]-y[2]*z[0])+x[2]*(y[0]*z[1]-y[1]*z[0]))];
end;

begin
  local X:=random(4);
  local Y:=random(4);
  local Z:=random(4);
  local Q:=cross(X,Y,Z);

  print(Q);
  print((Q*X).agg(+));
  print((Q*Y).agg(+));
  print((Q*Z).agg(+));
end;
