squares:=[1..100].sqr.toSet;
//squares:=primes(100).toSet;

arrangeToSquares(i:IntList(1))->i;
arrangeToSquares(i:IntList(2))->i.agg(+) in squares ? i : void;

arrangeToSquares(i:IntList)->begin
  local first:=i[0];
  i.tail.each(second,(first+second) in squares ? begin
    local rest:=i.tail[[0..i.size-2]!=index];
    local arrangedRest:=arrangeToSquares(second|rest);
    arrangedRest.isVoid
    ? void
    : first|arrangedRest;
  end : void,orElse);
end;

arrangeToSquaresPerm(i:IntList)->begin
  local result:=void;
  local gen:=
  rangeGenerator(0,i.size-1)
  .map((offset)->arrangeToSquares(i[(offset+[0..i.size-1]) mod i.size]));

  local next:=void;
  while(!isVoid(next:=gen()),begin
    result:=result orElse next;
    next.head+next.trailing in squares
    ? (gen:=void) orElse return next
    : void;
  end);
  gen:=void;
  result;
end;

//rangeGenerator(1,35)
//.pMap((iMax)->begin
//  local r:=arrangeToSquaresPerm([1..iMax]);
//  r.isVoid ? void : [iMax,r];
//end)
//.agg((p)->print(p[0],': ',p[1],(p[1].head+p[1].trailing) in squares ? ' *' : ''));
//




