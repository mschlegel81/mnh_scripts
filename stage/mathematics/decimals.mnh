DECIMAL_DIGITS:=100;
DIG_FACTOR:=10^DECIMAL_DIGITS;

@SuppressUnusedParameterWarning
type Decimal(x:IntList(1))->true;

@Override
toDecimal(i:Int)->[i*DIG_FACTOR];
@Override
toDecimal(r:Real)->[round(r*DIG_FACTOR)];

@Override
OPERATOR_PLUS(x:Decimal,y:Decimal)->[x[0]+y[0]].toDecimal;
@Override
OPERATOR_MINUS(x:Decimal,y:Decimal)->[x[0]-y[0]].toDecimal;
@Override
OPERATOR_MULT(x:Decimal,y:Decimal)->[x[0]*y[0] div DIG_FACTOR].toDecimal;
@Override
OPERATOR_DIVREAL(x:Decimal,y:Decimal)->[x[0]*DIG_FACTOR div y[0]].toDecimal;
@Override
toString(x:Decimal)->begin
  local s:=toString(abs(x[0]))&'#'; //append marker for trailing zeros
  while(s.length<2+DECIMAL_DIGITS,s:='0'&s);
  local preComma:=length(s)-DECIMAL_DIGITS-1;
  s:=copy(s,0,preComma)&'.'&copy(s,preComma,length(s));
  (x[0]<0 ? '-' : '')&replace(s,['0#','#'],['#','']);
end;

euler->begin
  local ONE   :=toDecimal(1);
  local fak   :=ONE;
  local result:=ONE;
  local prevResult:=toDecimal(0);
  local i:=toDecimal(0);
  while(!(prevResult==result),begin
    prevResult:=result;
    fak*=i+=ONE;
    result+=ONE/fak;
  end);
  result;
end;

phi->begin
  local fib:=[1,1];
  local prevResult:=0;
  local result:=1;
  while(!(result==prevResult),begin
    prevResult:=result;
    fib:=fib.agg(+)|fib.head;
    result:=toDecimal(fib[1])/toDecimal(fib[0]);
  end);
  result;
end;

euler.toString;
phi.toString;
