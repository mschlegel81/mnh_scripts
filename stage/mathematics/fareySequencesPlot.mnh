plain script;

memoized farey(1)->[[0,1],[1,1]];
memoized farey(k)->begin
  local S:=farey(k-1);
  S|=S.tail+S.leading;
  S:=S[S.getInner(1)<=k];
  S[sortPerm(S.getInner(0)/S.getInner(1))];
end;

plottable(level)->begin
  local f:=farey(level).transpose;
  [f[0]/f[1],
   f[1]/level].transpose;
end;

plotFrame->
  cross([1..7],
        [1..7])
  .filter((i)->i.agg(<))
  .filter((i)->gcd@i=1)
  .each(frac,
    addPlot([[frac.agg(/),0],[frac.agg(/), -extraSpacing],[Nan,Nan],
             [frac.agg(/),1],[frac.agg(/),1+extraSpacing],[Nan,Nan],
             [0,frac.agg(/)],[ -extraSpacing,frac.agg(/)],[Nan,Nan],
             [1,frac.agg(/)],[1+extraSpacing,frac.agg(/)]],'black');
    drawText(frac.agg(/), -extraSpacing,frac.join('/'),6,'B','Times New Roman',[0,0,0],[1,1,1]),
    drawText(frac.agg(/),1+extraSpacing,frac.join('/'),6,'T','Times New Roman',[0,0,0],[1,1,1]),
    drawText( -extraSpacing,frac.agg(/),frac.join('/'),6,'L','Times New Roman',[0,0,0],[1,1,1]),
    drawText(1+extraSpacing,frac.agg(/),frac.join('/'),6,'R','Times New Roman',[0,0,0],[1,1,1]));

extraSpacing:=0.03;
setOptions(["x0"=>-extraSpacing,
            "x1"=>1+extraSpacing,
            "y0"=>-extraSpacing,
            "y1"=>1+extraSpacing,
            "preserveAspect"=>false,
            "autoscaleX"=>false,
            "autoscaleY"=>false,
            "axisStyleX"=>0,
            "axisStyleY"=>0].toMap);

begin
  clearAnimation;
  local recent:=map([1..8],()->plottable(1));
  local old:=[];
  local maxPointSize:=3;
  [1..300].each(k,begin
    local new:=plottable(k);
    old|=recent.head;
    recent:=recent.tail|[new];
    plot(old,'. 0.2 black');
    recent.each(r,addPlot(r,'. black '&(index*maxPointSize/7*0.1+0.2)));
    plotFrame;
    addAnimationFrame;
    maxPointSize*=0.99;
  end);
end;
halt;

//curveHierarchies(n>=1)->
//[1..n].map((k)->
//[farey(k),
// farey(k).tail+
// farey(k).leading].transpose
// .filter((l)->l.size=2)
// .map((x)->[x[0].agg(/),x[1].agg(/)])
// .filter((l)->l[0]<=1/2));
//
//begin
//  local P:=[300..1].pEach(k,plottable(k),|);
////  addPlot((x)->    1/(x+1),0,1,100);
////  addPlot((x)->    2/(x+2),0,1,100);
////  addPlot((x)-> [1/2+1/2*x, 1/(x+1)],0,1,100);
////  addPlot((x)-> [1/2+1/2*x, 2/(x+2)],0,1,100);
////  addPlot((x)-> [1/2+1/2*x,1/2/(x+1/2)],0,1,100);
////
////  addPlot((x)-> [1/3+2/3*x, 1/(x+1)],0,1,100);
//
//
//
//  // x = a+(1-a)*t
//  // y = b/(b+t)
//  // -> b = c/(1-c)
//  // y/(c/(1-c)) * (1+t*(1-c)/c) = 1
//
////  local H:=curveHierarchies(10);
////  H.each(level,begin
////    local style:='red '&1-(index/H.size);
////    level.each(yx,begin
////      local a:=yx[0];
////      local b:=yx[1]/(1-yx[1]);
////      addPlot((t)->[  a+(1-a)*t,b/(b+t)],0,1,100,style);
////      addPlot((t)->[1-a-(1-a)*t,b/(b+t)],0,1,100,style);
////    end);
////  end);
//
//
//
////  addPlot((x)-> [1-x, 1/(x+1)],0,1,100);
////  addPlot((x)-> [1/3+2/3*x, 1/(x+1)],0,1,100);
//
//  P.addPlot('0.2 . black');
//  plotFrame;
//  //  x
//  //[ 0  ,  1  , 1/2]
//  //[ 1  , 1/2 ,  1 ]
//  //[1/2 , 2/3 , 2/3]
//  //[1/3 , 3/4 , 3/5]
//  //[2/3 , 3/5 , 3/4]
//  //[1/4 , 4/5 ,
//  //[3/4 ,     , 4/5
//
//
//
//
////  local h:=P.size.sqrt;
////  local DELTA:=cross([-1..1],[-1..1]);
////
////  local m:=P.group(round((P-0.5)*h));
////
////
////  P.each(p,begin
////    local i:=round((p-0.5)*h);
////    getAll(m,DELTA.each(di,i+di))
////    .agg(|)
////    .map((q)->[euklideanNorm(q-p),q])
////    .sort
////    .tail
////    .head(4)
////    .each(q,p,q[1],[Nan,Nan]);
////  end,|).addPlot;
//
//end;



