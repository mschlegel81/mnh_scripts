//*Sorts s by length
private sortByLength(s:StringList)->s[s.map(::length).sortPerm];

//*Converts formats to expressions, removing duplicates detected by trial execution with random numbers
private formatsToExpressions(formats:StringList,numberOfArguments:Int)->begin
  note('Filtering duplicates from ',formats.size,' expressions in ',numberOfArguments,' parameters');
  local patterns:=('$'&[0..numberOfArguments-1]).{[$L]};
  //These are test parameters
  local A:=random(numberOfArguments)*10.0;
  local B:=random(numberOfArguments)*10.0;
  local C:=random(numberOfArguments)*10.0;
  local X:=
  formats//.pFilter({$x.matches('\^|\*|/')})
         .cross(patterns)
         .pMap({format@($x.flatten)})
         .sortByLength
         .pEach(e,begin
           local f:=e.toExpression;
           [f,[f@A,f@B,f@C]];
         end)
         .group(1,::orElse)
         .getInner(0)
         .sort;
  note('Found ',X.size,' expressions in ',numberOfArguments,' parameters');
  X;
end;

//*Converts an expression to a simple format
expressionToSimpleFormat(ex:Expression)->regex.replace(ex.toString.unbrace,'\$\d+',"%d");

EXPRESSIONS:=begin
  local result:=[[],[{$0}]];
  [2..5].each(k,
  result|=[[1..k-1].each(j,
    cross(result[k-j].pMap(::expressionToSimpleFormat),
          ['-','+','*','/','^'],
          result[  j].pMap(::expressionToSimpleFormat)),|)
  .pEach(xoy,xoy,['-'&xoy[0]    ,xoy[1],    xoy[2]    ])
  .pEach(xoy,xoy,[    xoy[0]    ,xoy[1],'-'&xoy[2]    ])
  .pEach(xoy,xoy,['('&xoy[0]&')',xoy[1],    xoy[2]    ])
  .pEach(xoy,xoy,[    xoy[0]    ,xoy[1],'('&xoy[2]&')'])
  .pMap(::join)
  .replace("(%d)",'%d')
  .unique.formatsToExpressions(k)]);
  result:=result.each(eList,eList.pFilter({$e.toString.charSet.intersect(['*','^','/']).size>0}));
  note('Working with ',result[2].size,' binary expressions');
  note('Working with ',result[3].size,' ternary expressions');
  note('Working with ',result[4].size,' 4-ary expressions');
  note('Working with ',result[5].size,' 5-ary expressions');
  result;
end;


//*Converts an expression to the exact corresponding format
expressionToOrderedFormat(ex:Expression)->ex.toString.unbrace.replace('$'&[0..9],'%{$'&[0..9]&'}d');

//*Returns partitioning masks for lists of the given size
memoized
partitioningList(1)->[[0]];
partitioningList(listSize>1)->begin
  partitioningList(listSize-1).each(part,
    [0..listSize-1].each(suffix,part|suffix),|)
  .filter({$p.unique==[0..$p.unique.size-1]})
  .filter({($L.tail>=$L.leading).agg(AND)});
end;

//*Returns all partitionings of i into separate numbers
numbersIn(i:Int)->begin
  local D:=i.digits;
  local P:=partitioningList(D.size);
  D.permutations.each(d,
    P.each(p,p.unique.each(m,d[p=m])
              .{$L.each(k,k==[0] OR k.head>0,AND)
                ? $L.map(::composeDigits)
                : void}),|)
     .unique
     .filter({$x.size>1});
end;

mutable checkCountAndTime:=[0,time];
synchronized logCheck(i:Int)->begin
  checkCountAndTime[0]+=1;
  time>checkCountAndTime[1]+60
  ? begin
      note('Checking ',i,' ',(time-checkCountAndTime[1])/checkCountAndTime[0],'s/check');
      checkCountAndTime:=[0,time];
    end
  : void;
end;

Friedman(i:Int)->begin
  logCheck(i);
  local j0:=i-0.5;
  local j1:=i+0.5;
  local representations:=
  numbersIn(i).map({[$x,$x.size]}).group(1).map({$g.getInner(0).transpose})
  .pEach(parameterSet,EXPRESSIONS[parameterSet.size].pEach(f,begin
    local mask:=j0<=f@(parameterSet*1.0)<=j1;
    mask.trueCount=0
    ? void
    : begin
        local P:=parameterSet.transpose[mask].transpose;
        mask:=f@P=i;
        mask.trueCount=0
        ? void
        : format@(expressionToOrderedFormat(f)|(P.transpose[mask].transpose));
      end;
  end)).flatten;
  representations.size>=1
  ? i&' = '&representations.join(" = ")&
    (representations.each(r,r.clean(['0'..'9'],'').softCast==i,OR)
      ? ' [NICE]'
      : '')
  : void;
end;

printIfNotVoid->void;
printIfNotVoid(s:String)->print(s);

//*Tries to find Friedman numbers >= startAt
main(startAt)->rangeGenerator(toInt(startAt),2^30).map({Friedman($k).printIfNotVoid});
//*Tries to find all positive Friedman numbers
main->main(25);

@SuppressUnusedWarning
NICE_ONES:= [127,343,736,1285,2187,2502,2592,2737,3125,3685,3864,3972,4096,6455,11264,11664,12850,13825,14641,15552,15585,15612,15613,15617,15618,15621,15622,15623,15624,15626,15632,15633,15642,15645,15655,15656,29282];

//NICE_ONES.map({$x.Friedman.print});
