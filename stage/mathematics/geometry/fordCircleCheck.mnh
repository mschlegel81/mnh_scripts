plain script;
fordCirclesTouch(p1:Int,q1:Int,p2:Int,q2:Int)->
//((p1/q1)-(p2/q2))^2                       + (1/(2*q1^2)-1/(2*q2^2))^2
//                                          = (1/(2*q1^2)+1/(2*q2^2))^2;
//(p1*q2-p2*q1)^2/(q1*q2)^2                 + (q2/2-q1/2)^2/ 4/(q1*q2)^4
//                                          = (q2/2+q1/2)^2/ 4/(q1*q2)^4;
//(p1*q2-p2*q1)^2*(q1*q2)^2*4 / 4/(q1*q2)^4 + (q2/2-q1/2)^2/ 4/(q1*q2)^4
//                                          = (q2/2+q1/2)^2/ 4/(q1*q2)^4;
//(p1*q2-p2*q1)^2*(q1*q2)^2*4               = (q2/2+q1/2)^2 - (q2/2-q1/2)^2;
  (p1*q2-p2*q1)^2*(q1*q2)^2                 = q1^2*q2^2;
tPrint(...)->print@(formatTime('hh:nn:ss.zzz ',systime)|...);

maxDenominator:=$1.toInt orElse 10;

tPrint('Constructing rational numbers...');
//Construct sorted list of rational numbers, without duplicates
rationals:=[[0,1],[1,1]].|([2..maxDenominator].pEach(enumerator,[1..enumerator-1].each(denominator,gcd(enumerator,denominator)=1 ? [denominator,enumerator] : void),|)).sort(0).sort(1);
tPrint('    ',rationals.size,' rational numbers created');

tPrint('Constructing touching circles...');
//Create adjacency lists
touchingCircles:=rationals
  .pEach(a,rationals.head(index)
                    .each(b,fordCirclesTouch(a[0],a[1],b[0],b[1]) ? [b,a] : void)
          ,|)
  .{begin
      local M:=[].toMap;
      $adjacencyList.each(pair,begin
        M[pair[0]]|=[pair[1]];
        M[pair[1]]|=[pair[0]];
        void;
      end);
      M.map({[$entry[0],$entry[1]]}).toMap;
    end};
tPrint('    ',touchingCircles.size,' circles are touching');
tPrint('    ',touchingCircles.getInner(1).map(::size).agg(+)/2,' touches in total');

tPrint('Calculating triplets...');
//Calculate triangles from adjacency lists;
curvatureTriplets:=touchingCircles.pEach(pair,begin
  local C0:=pair[0];
  pair[1].each(C1,
    touchingCircles[C1].each(C2,
      C0 in touchingCircles[C2]
      ? [C0,C1,C2].getInner(1).sort
      : void),|);end,|)
.toSet;
tPrint('    ',curvatureTriplets.size,' distinct triplets found');

curvatureTriplets.toString.replace(["[",',',"]\v,\v"],["[\v","\v,\v","\v],\n"]).replaceOne("[\v","[").replaceOne("]]","\v]]"). print;
curvatureTriplets2:=
cross(curvatureTriplets.getInner(0).unique,
      curvatureTriplets.getInner(1).unique)
.pMap({[$x[0],$x[1],$x[0]+$x[1]].sort})
.pFilter({$x[2]<=maxDenominator})
.pFilter({gcd@$x==1})
.toSet;

tPrint('validation result=',curvatureTriplets2.toSet==curvatureTriplets.toSet);
