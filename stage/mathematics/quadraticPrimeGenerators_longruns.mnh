#!C:\bin\mnh.exe -quiet -silent -convertPrintToLog -logDateFmt hh:mm:ss -logLocationLength 15 +log stdOut(2)
datastore scanDiameter:=2;
datastore best:=[];
mutable previouslySeenBaseForms:=[].toSet;

T:=[-3..-1,1..3].map((n)->n^[0..2]).transpose;
T1:=[-1,1].map((n)->n^[0..2]).transpose;

nextCoefficientCandidates->begin
  scanDiameter+=1;
  local result:=
  primes(scanDiameter-1)
  .pEach(p,transpose([[p],
           [0..scanDiameter-p-1],
           [scanDiameter-p..1]],p),|)
  .pEach(x,x,x*[1,-1,1])
  .pFilter((q)->(T1*q).agg(+).isPrime.agg(or))
  .minus(previouslySeenBaseForms)
  .pFilter((q)->(T*q).agg(+).isPrime.trueCount>=3)
  .toList;
  callMemoryCleaner;
  result;
end;

shiftedForm(abc:IntList(3),k)->[abc[0]+abc[1]*k+abc[2]*k², abc[1]+2*abc[2]*k , abc[2]];

private longX:=[0..99999];
private longX2:=longX²;

longRunPrimes(a,b,c)->begin
  local p:=isPrime(a+b*longX+c*longX2);
  [p.head(100).trueCount,
   p.head(1000).trueCount,
   p.head(10000).trueCount,
   p.trueCount];
end;

POLYNOMIAL_FORMAT:='{$0}{$1<=0?"":"+"}{$1=-1 ? "-" : $1 in [0,1] ? "" : $1}{$1=0 ? "" : "n"}'&
                       '{$2<=0?"":"+"}{$2=-1 ? "-" : $2 in [0,1] ? "" : $2}{$2=0 ? "" : "n²"}';
PERCENTS_FORMAT:='%{$3/longX.size*100}5.3f%% (%{$2/longX.size*1000}4.2f%%/%{$1/longX.size*10000}3.1f%%/{$0}%%)';
formatResult(polynomial:IntList(3),succesivePrimes,longRunPrimes:IntList(4))->
  format("[%s]\t%s\tproduces\t%s\tprimes in a row and\t%s\tprimes in the long(er) run",
     polynomial.abs.agg(+),
     POLYNOMIAL_FORMAT.format@polynomial,
     succesivePrimes,
     PERCENTS_FORMAT.format@longRunPrimes);

calcCutoff([])->0;
calcCutoff(list:NumericList)->list.agg(+)/list.size;//Average of arithmetic mean and median

successivePrimesInPolynomial       (a,b,c)->rangeGenerator(1       ).filter({!isPrime(a+$i*(b+$i*c))})();
successivePrimesInPolynomialReverse(a,b,c)->rangeGenerator(0,-10000).filter({!isPrime(a+$i*(b+$i*c))})();

main->begin
  assertUniqueInstance;
  best.sort(1).map((q)->formatResult@q).join("\n").print;
  scanDiameter:=max(0,scanDiameter-1);
  previouslySeenBaseForms:=best.pEach(q,[0..q[1]-1].each(k,shiftedForm(q[0],k)),|).toSet;
  log('previouslySeenBaseForms: ',typeOf(previouslySeenBaseForms));
  print('-'.repeat(120));
  local basisForThresholds:=best.getInner(1);
  while(true,begin
    local threshold:=calcCutoff(basisForThresholds);
    local candidates:=nextCoefficientCandidates;
    printf('[{scanDiameter+1}] threshold = {threshold.ceil} ({threshold}) - {candidates.size} candidates');
    candidates
    .pMap((x)->begin
       local primesAhead:=successivePrimesInPolynomial@x;
       local indexShift :=successivePrimesInPolynomialReverse@x+1;
       [shiftedForm(x,indexShift),primesAhead-indexShift];
     end)
    .unique
    .filter((q)->begin
       q[1]>=threshold
       ? begin
           basisForThresholds|=q[1];
           true;
         end
       : false;
     end)
    .pMap((q)->[q[0],q[1],longRunPrimes@(q[0])])
    .agg((q)->begin
       best|=[q];
       print(formatResult@q);
       previouslySeenBaseForms|=[0..q[1]-1].each(k,shiftedForm(q[0],k));
     end);
    writeDataStores;
  end);
end;

main('list')->best.sort(1).map((q)->formatResult@q).join("\n").print;

primeHitRating(q)->begin
  local x:=[0..99999];
  x:=q[0,0]+x*(q[0,1]+x*q[0,2]);
  trueCount(x<=1)>0
  ? begin
      x:=x[x>1];
      round(q[2,3]/(1/ln(x)).agg(+)/x.size*100000,4);
    end
  : round(q[2,3]/(1/ln(x)).agg(+),4);
end;

distinctPrimesIn(q)->begin
  local n:=[0..q[1]-1];
  unique(q[0,0]+n*(q[0,1]+n*q[0,2])).size;
end;

main('table')->begin
  assertGuiStarted;
  showTable(
  [['diam.','polynomial','successive','distinct','of 100','of 1000','of 10000','of 100000','Hit rating','Poly_B','n_0 for Poly_B']]|
  best.pMap((q)->q[0].abs.agg(+) | POLYNOMIAL_FORMAT.format@(q[0]) | q[1] | distinctPrimesIn(q) | q[2] | primeHitRating(q) |
    begin
      local k:=round(-q[0,1] / (2*q[0,2]));
      q[0,1]+2*q[0,2]*k < 0
      ? k+=sign(q[0,2])
      : void;
      POLYNOMIAL_FORMAT.format@shiftedForm(q[0],k) | k;
    end
  ),'Prime generating polynomials',true);
  callMemoryCleaner;
end;
