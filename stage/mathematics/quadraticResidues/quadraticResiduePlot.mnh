#!C:\bin\mnh.exe -headless
f(k,xRes:Int,yRes:Int)->begin
  local X:=[1..k-1];
//  [round(X/k*xRes) ,round(powMod(X,2,k)/k*yRes)].transpose;
  round(X/k*(xRes-1))+xRes*
  round(powMod(X,2,k)/k*(yRes-1));
end;



main(xres,yres,quality)->begin
  local xRes:=xres.toInt;    assert(0<xRes<9999);
  local yRes:=yres.toInt;    assert(0<yRes<9999);
  local maxK:=quality.toInt; assert(2<maxK     );

  local sampleCount:=[0..xRes*yRes-1]*0;

  print('Computing samples');
  setOptions(["preserveAspect"=>false,"axisStyleX"=>0,"axisStyleY"=>0].toMap);
  rangeGenerator(2,maxK).pMap({f($k,xRes,yRes)}).each(sampleGroup,sampleGroup.each(i,sampleCount[i]+=1));
  sampleCount:=sampleCount.pEach(s,s=0 ? void : divMod(index,xRes)|s);
  print('Sample density: ');
  local maxDens:=sampleCount.getInner(2).elementFrequency;
  maxDens.sort.map(::print);
  maxDens:=maxDens.getInner(0).max;
  plot();
  [maxDens..1].each(cutoff,sampleCount.each(s,s[2]>cutoff ? s[[0,1]] : void)).addPlot('. 0.1 RGB0,0,0,0.2');
end;

main(1920,1080,1000);
