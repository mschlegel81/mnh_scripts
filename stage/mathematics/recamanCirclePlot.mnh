recamanGenerator->{begin
  local visited:=[].toSet;
  local i:= 0;
  local k:=-1;
save;
  k+=1;
  i-k>0 AND !((i-k) in visited) ? i:=i-k : i:=i+k;
  visited|=i;
  i;
end}.toGenerator;

memoized recamanPoint(index>=0)->begin
  local generated:=[0];
save;
  while(index>=generated.size,begin
    local step:=generated.size;
    local prev:=generated.trailing;
    prev-step>0 AND !(prev-step in generated)
    ? generated|=prev-step
    : generated|=prev+step;
  end);
  generated[index];
end;

recamanFunc(t:Real)->begin
  local k:=floor(t);
  local tau:=(t-k)*pi;
  local p0:=recamanPoint(k);
  local p1:=recamanPoint(k+1);
  local radius:=(p1-p0)/2;
  local center:=(p1+p0)/2;
  [                    center-radius *cos(tau),
   ((k and 1)=0 ? 1 : -1)*abs(radius)*sin(tau)];
end;

recamanAnimation(fileOutput:Boolean)->begin
  local STYLE:=map([1..60]/20,{'black '&$x});

  clearAnimation;
  local rows:=STYLE.map({[]});
  rows[rows.size-1]:=[[0,0]];
  local tEnd:=0;
  local dt:=0.01;
  local lastTime:=time;
  local x1:=0;
  local y1:=0;
  local plotRow:=fileOutput
  ? {begin
    local filename:=format("recaman_%4.4d.png",$f);
    fileExists(filename)
    ? print(filename,' already exists')
    : begin
        setOptions(['fontsize'=>6,
                    'autoscaleY'=>false,
                    'autoscaleX'=>false,
                    'x0'=>0,
                    'x1'=>(x1:=max(x1,rows.trailing.getInner(0).max    ).max),
                    'y1'=>(y1:=max(y1,rows.trailing.getInner(1).abs.max).max),
                    'y0'=>-y1]);
        plot();
        rows.each(row,row==[] ? void : row.addPlot(STYLE[index]));
        addPlot([rows.trailing.trailing],'2 . red');
        renderToFile(filename,1920,1080,1);
        print('File ',filename,' created in ',time-lastTime);
      end;
    lastTime:=time;
  end}
  : {begin
        setOptions(['fontsize'=>6,
                    'autoscaleY'=>false,
                    'autoscaleX'=>false,
                    'x0'=>0,
                    'x1'=>(x1:=max(x1,rows.trailing.getInner(0).max    ).max),
                    'y1'=>(y1:=max(y1,rows.trailing.getInner(1).abs.max).max),
                    'y0'=>-y1]);
        plot();
        rows.each(row,row==[] ? void : row.addPlot(STYLE[index]));
        addPlot([rows.trailing.trailing],'2 . red');
    print('Frame ',$f,' prepared in ',time-lastTime);
    lastTime:=time;
    addAnimationFrame;
  end};

  local simpleStep:={begin
    local t:=tEnd+(dt*=1.01);
    local steps:=ceil((t-tEnd)*20);
    local h:=(t-tEnd)/steps;
//    local oldHead:=rows.head;
    rows:=rows.tail|[[rows.trailing.trailing]|pMap(tEnd+[1..steps]*h,::recamanFunc)];
//    rows[0]|=oldHead;
    tEnd:=t;
    plotRow($f);
  end};
  [0..1000].each(frame,simpleStep(frame));
end;

main->recamanAnimation(true);


recamanAnimation(false);
//getOptions;



//halfCircle(startAt:Int,endAt:Int,up:Boolean)->begin
//  local C:=cos([1..6]/6*pi);
//  local S:=sin([1..6]/6*pi);
//save;
//  local radius:=(endAt-startAt)/2;
//  local center:=(endAt+startAt)/2;
//  transpose([center-C*radius,(up ? abs(radius) : -abs(radius))*S]);
//end;



//circleAnimation(generator:Iteratable)->begin
//  local up:=false;
//  local last:=0;
//  local previous:=[];
//  local row:=[[0,0]];
//  ['autoscaleFactor'=>1.0,
//   'autoscaleX'=>false,
//   'autoscaleY'=>false,
//   'axisStyleX'=>3,
//   'axisStyleY'=>3,
//   'fontsize'=>5,
//   'logscaleX'=>false,
//   'logscaleY'=>false,
//   'preserveAspect'=>true].toMap.setOptions;
//  clearAnimation;
//  generator.each(next,begin
//    local frameStart:=time;
//    next=last ? void : row|=halfCircle(last,next,up:=!up);
//    previous|=next;
//    ['x0'=>previous.min,
//     'x1'=>previous.max,
//     'y0'=>-abs(last-next)/2,
//     'y1'=> abs(last-next)/2].toMap.setOptions;
//    plot(row,'black c');
//    addPlot(previous,previous*0,'red .');
//    addAnimationFrame;
//    print(index,' ',next,' ',round((time-frameStart)*1000),'ms/frame');
//    index=0 ? postDisplay : void;
//    last:=next;
//  end);
//end;
//

