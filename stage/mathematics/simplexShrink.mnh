fitParameters(x:List,y:List)->begin
  local mx:=x.agg(+)/x.size;
  local my:=y.agg(+)/y.size;
  local linearTerm:=
  [0..x.size-1].each(i,(x[i]-mx)*(y[i]-my),+)/
  x.map((q)->(q-mx).sqr).agg(+);
  [my-(linearTerm*mx).agg(+),linearTerm]/linearTerm.euklideanNorm;
end;

cross(x:NumericList(4),
      y:NumericList(4),
      z:NumericList(4))->
begin
  [(x[1]*(y[2]*z[3]-y[3]*z[2])-x[2]*(y[1]*z[3]-y[3]*z[1])+x[3]*(y[1]*z[2]-y[2]*z[1])),
  -(x[0]*(y[2]*z[3]-y[3]*z[2])-x[2]*(y[0]*z[3]-y[3]*z[0])+x[3]*(y[0]*z[2]-y[2]*z[0])),
   (x[0]*(y[1]*z[3]-y[3]*z[1])-x[1]*(y[0]*z[3]-y[3]*z[0])+x[3]*(y[0]*z[1]-y[1]*z[0])),
  -(x[0]*(y[1]*z[2]-y[2]*z[1])-x[1]*(y[0]*z[2]-y[2]*z[0])+x[2]*(y[0]*z[1]-y[1]*z[0]))];
end;

//fitParameters([[0,0,0],[0,0,0.5],[0,0,1]],[0,5,10]);

P:=cross([0..2],[0..2],[0..2],[0..2]);

//P:=[0..4].map(()->10*(random(4)-0.5));
f(i:NumericList(4))->0.5+i[0]-2*i[1];
g(i:NumericList(4))->-10+i.trailing(2).agg(+);
h(i:NumericList(4))->2-2*i[3]+i[0];

P.map(::f).map(::sqr).agg(+);

parallelPart(x,y)->begin
  (local n:=x/x.euklideanNorm)*(n*y).agg(*);
end;
perpendicularPart    (x,y)->y-parallelPart(x,y);

moveTowards(v:NumericList(4),plane:List(2),relStep)->begin
  local offset:=plane.agg(*);
  local s:=v+offset;
  s:=(plane[1]*s).agg(*)*plane[1]*relStep+s*(1-relStep);
  s-offset;
end;


//FITTING INPUT
//[-1.9403492899360279E-002,-1.8274358647052638E+000, 8.2656410658973756E-001, 1.2455923997631406E+000]
//[ 1.9403492899360279E-002,-1.8274358647052638E+000, 8.2656410658973756E-001, 1.2455923997631406E+000]
//[ 0.0000000000000000E+000,-1.7938280291592699E+000, 8.2656410658973756E-001, 1.2455923997631406E+000]
//[ 0.0000000000000000E+000,-1.8162332528565992E+000, 8.5824987466994263E-001, 1.2455923997631406E+000]
//[ 0.0000000000000000E+000,-1.8162332528565992E+000, 8.3448554860978885E-001, 1.2762720155208533E+000]
// 3.9791076221202148E-002
// 1.4718694313873293E-003
//-1.2452596511626113E-002
// 1.0833910279213210E-002
// 3.9262863848930296E-002
//FITTING OUTPUT
//offset = -1.7748987377642074E+000
//linear = [-5.8378671665366888E-001,-5.8200402617364577E-001, 2.2958899696470209E-002, 5.6562997790173974E-001]
//FITTING INPUT
//[-1.9403492899360279E-002,-1.8274358647052638E+000, 8.2656410658973756E-001, 1.2455923997631406E+000]
//[ 1.9403492899360279E-002,-1.8274358647052638E+000, 8.2656410658973756E-001, 1.2455923997631406E+000]
//[ 0.0000000000000000E+000,-1.7938280291592699E+000, 8.2656410658973756E-001, 1.2455923997631406E+000]
//[ 0.0000000000000000E+000,-1.8162332528565992E+000, 8.5824987466994263E-001, 1.2455923997631406E+000]
//[ 0.0000000000000000E+000,-1.8162332528565992E+000, 8.3448554860978885E-001, 1.2762720155208533E+000]
// 9.8395114265217035E-005
//-3.8950148568640916E-002
//-1.9892233612783517E-002
//-6.2596641385131824E-002
//-3.6070820112324750E-002
//FITTING OUTPUT
//offset =  7.7062218614927447E-001
//linear = [-5.9183542458776528E-001,-8.1617610648643830E-003,-7.9848151858625782E-001,-1.0996126743323528E-001]
//FITTING INPUT
//[-1.9403492899360279E-002,-1.8274358647052638E+000, 8.2656410658973756E-001, 1.2455923997631406E+000]
//[ 1.9403492899360279E-002,-1.8274358647052638E+000, 8.2656410658973756E-001, 1.2455923997631406E+000]
//[ 0.0000000000000000E+000,-1.7938280291592699E+000, 8.2656410658973756E-001, 1.2455923997631406E+000]
//[ 0.0000000000000000E+000,-1.8162332528565992E+000, 8.5824987466994263E-001, 1.2455923997631406E+000]
//[ 0.0000000000000000E+000,-1.8162332528565992E+000, 8.3448554860978885E-001, 1.2762720155208533E+000]
//-2.3257849785826536E-002
//-1.8486633331141696E-002
//-1.6378056233217284E-002
// 1.9139002969586494E-003
// 1.5202331785379237E-002
//FITTING OUTPUT
//offset = -1.2871912841183217E+000
//linear = [ 1.0414651436194081E-001, 1.1327549414007067E-001, 5.6911205840182388E-001, 8.0773363861809033E-001]
//originVec: [-4.3417527547661122E-001,-1.5473757052021047E+000, 1.1580524268470753E+000, 1.0506276232102465E+000]
//Simplex center: [ 0.0000000000000000E+000,-1.8162332528565992E+000, 8.3448554860978885E-001, 1.2517283229146834E+000]
//Contract towards: [-3.8392006333725809E-001,-1.5742608874517783E+000, 1.1175181031722505E+000, 1.0764778521913894E+000]



USE linAlg;

begin
  local ffp:=fitParameters([[-1.9403492899360279E-002,-1.8274358647052638E+000, 8.2656410658973756E-001, 1.2455923997631406E+000],[ 1.9403492899360279E-002,-1.8274358647052638E+000, 8.2656410658973756E-001, 1.2455923997631406E+000],[ 0.0000000000000000E+000,-1.7938280291592699E+000, 8.2656410658973756E-001, 1.2455923997631406E+000],[ 0.0000000000000000E+000,-1.8162332528565992E+000, 8.5824987466994263E-001, 1.2455923997631406E+000],[ 0.0000000000000000E+000,-1.8162332528565992E+000, 8.3448554860978885E-001, 1.2762720155208533E+000]],
                           [ 3.9791076221202148E-002, 1.4718694313873293E-003,-1.2452596511626113E-002, 1.0833910279213210E-002, 3.9262863848930296E-002]);

  local gfp:=fitParameters([[-1.9403492899360279E-002,-1.8274358647052638E+000, 8.2656410658973756E-001, 1.2455923997631406E+000],[ 1.9403492899360279E-002,-1.8274358647052638E+000, 8.2656410658973756E-001, 1.2455923997631406E+000],[ 0.0000000000000000E+000,-1.7938280291592699E+000, 8.2656410658973756E-001, 1.2455923997631406E+000],[ 0.0000000000000000E+000,-1.8162332528565992E+000, 8.5824987466994263E-001, 1.2455923997631406E+000],[ 0.0000000000000000E+000,-1.8162332528565992E+000, 8.3448554860978885E-001, 1.2762720155208533E+000]],
                           [ 9.8395114265217035E-005,-3.8950148568640916E-002,-1.9892233612783517E-002,-6.2596641385131824E-002,-3.6070820112324750E-002]);

  local hfp:=fitParameters([[-1.9403492899360279E-002,-1.8274358647052638E+000, 8.2656410658973756E-001, 1.2455923997631406E+000],[ 1.9403492899360279E-002,-1.8274358647052638E+000, 8.2656410658973756E-001, 1.2455923997631406E+000],[ 0.0000000000000000E+000,-1.7938280291592699E+000, 8.2656410658973756E-001, 1.2455923997631406E+000],[ 0.0000000000000000E+000,-1.8162332528565992E+000, 8.5824987466994263E-001, 1.2455923997631406E+000],[ 0.0000000000000000E+000,-1.8162332528565992E+000, 8.3448554860978885E-001, 1.2762720155208533E+000]],
                           [-2.3257849785826536E-002,-1.8486633331141696E-002,-1.6378056233217284E-002, 1.9139002969586494E-003, 1.5202331785379237E-002]);
  printf('ffp={ffp}');
  printf('gfp={gfp}');
  printf('hfp={hfp}');

  local N:=cross(ffp[1],gfp[1],hfp[1]);
  printf('N={N}');

//  print([ffp[1],gfp[1],hfp[1],N].toMatrix.invert*[ffp[0],gfp[0],hfp[0],0]);



  local s:=flatten([ffp[1],gfp[1],hfp[1],N].toMatrix.invert*[-ffp[0],-gfp[0],-hfp[0],0]);
  printf('s={s} - err: {[f(s),g(s),h(s)]}');
  //move s towards gg without

  [f(s),g(s),h(s)];
end;

