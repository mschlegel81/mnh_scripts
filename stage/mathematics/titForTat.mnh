ducktype Probability(p:Numeric)->0<=p<=1;

convexHull(points:List)->begin
  local rest:=points.sort;
  local P:=rest.head(1);

  while(rest.size>0,begin
    local dp:=P.size==1 ? [0,1] : -P.trailing(2).agg(-); dp/=dp.euklideanNorm;
    local q:=P.trailing;
    local i:=rest.map((p)->begin local delta:=p-q; (delta/delta.euklideanNorm*dp).agg(+); end).argMax;
    P||=rest[i];
    i==0
    ? return P
    : rest[i]:=void;
  end);
  P;
end;

memoized
modifiedTitForTat(pTitForTat:Probability, pNice:Probability)->{
    random<=pTitForTat
    ? $params[0] orElse true
    : random<=pNice};

modelToString(p:NumericList(2))->p[0]=1 ? "p[tft]=\t1\t\t\t" :
                                 p[0]=0 ? format("\t\tp[nice]=\t%0.3f\t",p[1]) :
                                 format("p[tft]=\t%0.3f\tp[nice]=\t%0.3f\t",p[0],p[1]);

SCORE:=[[true , true]=>[-1,-1]+3/2,
        [false,false]=>[-2,-2]+3/2,
        [true ,false]=>[-3, 0]+3/2,
        [false, true]=>[ 0,-3]+3/2].toMap;
//titForTat->true;
//titForTat(previous)->previous;
//
//antiTitForTat->true;
//antiTitForTat(prev)->begin
//  local res:=true;
//save;
//  res:=!res;
//end;

score(alg0:Expression,alg1:Expression,rounds>=1)->begin
  local res0:=void;
  local res1:=void;
  [0..rounds-1].each(r,SCORE[
    [res0:=alg0(res1),
     res1:=alg1(res0)]],+)/rounds;
end;

score(model0:NumericList(2),model1:NumericList(2),rounds>=1)->begin
  local res0:=void;
  local res1:=void;
  [0..rounds-1].each(r,SCORE[
    [res0:=random<=model0[0] ? res1 orElse true : random<=model0[1],
     res1:=random<=model1[0] ? res0 orElse true : random<=model1[1]]],+)/rounds;
end;


roundRobin(models:List,rounds>=1,doPrintout:Boolean)->begin
  local pairs:=cross([0..models.size-1],[0..models.size-1]).filter({$x[0]<=$x[1]});
  local progressDot:=doPrintout
                     ? print(repeat("------------------------|",4)) orElse round([1..100]*pairs.size/100)-1
                     : [];
  pairs
    .pEach(pair,begin
       index in progressDot ? printDirect('.') : void;
       local s :=score@(models[pair]|rounds);
       [[pair[0],s[0]],
        [pair[1],s[1]]];
     end,|)
    .group(0,::+)
    .map({[models[ $g[0]],$g[1,1]]})
    .sort(1)
    .{doPrintout
      ? $L.map({format("score: \t%5.3f\t  ",$x[1])&$x[0].modelToString}).join("\n").{print("\n",$x)} orElse $L
      : $L};
end;

DEFAULT_POOL:=([0..20].cross([0..20])/20).filter({$x[0]<1 or $x[1]=1});

roundRobin(rounds>=1,doPrintout:Boolean)->DEFAULT_POOL.roundRobin(rounds,doPrintout);

randomPlay(pool:List)->begin
  [0..pool.size-1]
    .each(i,intRandom(pool.size,3).each(j,[i,j]),|)
    .pEach(pair, begin
      local s :=score@(pool[pair]|100);
      [[pair[0],s[0]],
       [pair[1],s[1]]];
     end,|)
    .group(0)
    .each(g,[pool[g[0]],g[1].getInner(1).agg(+)/g[1].size])
    .sort(1);
end;

average(x:List)->x.agg(+)/x.size;
variance(x:List)->sqr(x.map({$x}-average(x))).average;

evolutionGame(poolSize>=10                                 ,generations,poolDisplay:Expression(1))->
evolutionGame([random(poolSize),random(poolSize)].transpose,generations,poolDisplay);

evolutionGame(initialPool:List,generations,poolDisplay:Expression(1))->begin
  local pool:=initialPool;
  local K:=pool.size-1;
  print('Starting evolution game');
  local toCross:=sqrt(K/3).ceil;
  print('  The best ',toCross+1,' individuals will procreate each round, ');
  toCross:=[K..K-toCross].cross([K..K-toCross]).filter({$x[0]<$x[1]});
  print('  replacing the ',toCross.size,' worst individuals');
  pool[toCross.size]:=[1,random]; //Force pure Tit-For-Tat once
  [1..generations].each(generation,begin
    poolDisplay(pool);
    pool:=pool.randomPlay.getInner(0);
    assert(pool.size=K+1);
    toCross
    .each(parent,(pool[parent[0]]+pool[parent[1]])*0.5+0.05*(random(2)*2-1))
    .each(offspring,pool[index]:=[max(0,min(1,offspring[0])),
                                  max(0,min(1,offspring[1]))]);
  end);
  pool;
end;

plotSingleRun->begin
  resetOptions;
  local initialPool:=[random(50),random(50)].transpose;
  [0..20].each(run,begin
    plot();
    local counter:=-1;
    evolutionGame(initialPool,local steps:=100,{begin
      local hull:=convexHull($x);
      addPlot(hull,'polygon f HUE'&(counter+=1)/steps*2/3);
//      print($x);
//      halt;

//      local boxes:=[$x.getInner(0).sort[round([0.2,0.4,0.6,0.8]*($x.size-1))],
//                    $x.getInner(1).sort[round([0.2,0.4,0.6,0.8]*($x.size-1))]].transpose;
//      addPlot(boxes[[0,3]],'box 1 HUE'&(counter+=1)/steps*2/3);
//      addPlot(boxes[[1,2]],'box f 0 HUE'&counter/steps*2/3);

      //local a:=average($x);
      //local s:=variance($x).sqrt/2;
      //addPlot([a+s,a-s],'ellipse f 0 HUE'&(counter+=1)/steps*2/3);
    end});
    addAnimationFrame;
    postDisplay;
  end);
end;

plotOutcomes->begin
  resetOptions;
  local steps:=100;
  plot();
  [0..steps-1].pEach(counter,begin
    print('Run #',counter);
    local pool:=evolutionGame(20,100,{$x});
    local a:=average(pool);
    local s:=variance(pool).sqrt/2;
    addPlot([a+s,a-s],'ellipse f 0 HUE'&counter/steps*2/3);
    //pool.addPlot('. 0.7 HUE'&counter/steps*2/3);
    postDisplay;
  end);
end;

main->plotSingleRun;

begin
  local P:=roundRobin(50,true);

  local h:=0.5*P.getInner(0).transpose.map(::unique).map({max($x.tail-$x.leading)}).max;
  local highScore:=P.getInner(1).max;
  local lowScore:=P.getInner(1).min;

  P.each(entry,addPlot([entry[0]-h,entry[0]+h],'box fs 0 HUE'&(2/3*(entry[1]-lowScore)/(highScore-lowScore))));



end;
