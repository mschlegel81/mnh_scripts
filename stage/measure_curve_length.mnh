circle(t)->[cos(t),sin(t)];


f(t)->begin
  local S:=sin(t*2^[0..50]);
  local C:=cos(t*2^[0..50]);
  local A:=    0.5^[0..50];
  [(S*A).agg(+),
   (C*A).agg(+)];
end;


g2(t)->begin
  local S:=sin(t*2^[0..2]);
  local C:=cos(t*2^[0..2]);
  local A:=    0.666^[0..2];
  [(S*A).agg(+),
   (C*A).agg(+)];
end;

g(t)->begin
  local S:=sin(t*2^[0..50]);
  local C:=cos(t*2^[0..50]);
  local A:=    0.666^[0..50];
  [(S*A).agg(+),
   (C*A).agg(+)];
end;

measureLength(F:Expression(1),t0:Numeric,t1>t0)->begin

  local P:=map(0.25*(t1-t0)*[0..4]+t0,(t)->t=>F(t));

  local result:=0;
  while(P.size<1000000,begin

    local ref_times:=(P.getInner(0).tail+P.getInner(0).leading)*0.5;
    ref_times:=ref_times[sortPerm(local distances:=euklideanNorm(P.getInner(1).tail-P.getInner(1).leading))].trailing(P.size div 2);
    distances:=distances.agg(+);
    note(P.size,' ',distances);
    abs(ln(result/distances))<1E-3
    ? return distances
    : result:=distances;
    P:=sort(P|ref_times.pMap((t)->t=>F(t)));



//    plot(P.getInner(1),'. l 0.5');
//    drawTextAbsolute(0,1,'N='&(P.size-1)&"\nL="&distances,'TL');
//    addAnimationFrame;
 //
 end);

end;

measureLength(::g,0,2*pi);

//curveLength(F:Expression(1),t0:Numeric,t1>t0,samples>1)->begin
//  local S:=pMap([0..samples-1]/(samples-1)*(t1-t0)+t0,F);
//  local prev:=S[0];
//  local L:=0;
//  S.tail.each(q,L+=euklideanNorm(prev-(prev:=q)),trailing);
//end;
//
//SAMPLES:=2^[2..14];
//
//setOptions(["x0"=>1E-100,"x1"=>1,"y0"=>-1,"y1"=>1,"fontsize"=>10,"preserveAspect"=>true,"autoscaleX"=>true,"autoscaleY"=>true,"logscaleX"=>true,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>7,"axisStyleY"=>7].toMap);
//SAMPLES.map((s)->[s,curveLength(::circle,0,2*pi,s)]).plot('. l');
//SAMPLES.map((s)->[s,curveLength(::f,0,2*pi,s)]).addPlot('. l');
//SAMPLES.map((s)->[s,curveLength(::g,0,2*pi,s)]).addPlot('. l');
