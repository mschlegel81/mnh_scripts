#!/usr/bin/mnh -GUI
plain script;
USE rungeKutta;

//$0 is the script name
$params.size<2 ? fail(
//!~Expected parameters:
  1) number of particles (mandatory)
  2) wall height (optional, default to 4)
  3) marker 'phobic' for alternative wall interaction~) : void;
phobic:=('phobic' in $params);
SAMPLE_COUNT:=$1.toInt;

//*IMPORTANT: This Function must return an expression that allows vectorization!
makeForceFunction(range,strength)->[strength*16,'*(1-',range*0.5,'/$x)*(',range*0.5,'/$x-0.5)*ord($x<',range,')'].toExpression;
makeForceFunctionRepulsiveOnly(range,strength)->[strength*10,'*(1-',range,'/$x)*ord($x<',range,')'].toExpression;

//Physics configuration:---------------------
WALL_POINT_SPACING:=0.2;


WALL_FORCE_RANGE:=phobic ? 0.5 : 1;
wallForce:=phobic
           ? makeForceFunctionRepulsiveOnly(WALL_FORCE_RANGE,5*WALL_POINT_SPACING)
           : makeForceFunction(WALL_FORCE_RANGE,5*WALL_POINT_SPACING);

WALL_HEIGHT:=($2 orElse 4).toReal;
absForce   :=makeForceFunction(1,1);
DAMPING:=0.5;
GRAVITY:=1;
WIDTH_PARAM:=2;
//---------------------:Physics configuration

WALL_POINTS:=begin
  union(
    WALL_HEIGHT>0.5*WALL_POINT_SPACING
    ? cross([-WIDTH_PARAM,WIDTH_PARAM],([1..ceil(WALL_HEIGHT/WALL_POINT_SPACING)])*WALL_POINT_SPACING)
    : [],
  ([floor(-WIDTH_PARAM/WALL_POINT_SPACING)..ceil(WIDTH_PARAM/WALL_POINT_SPACING)]*WALL_POINT_SPACING).map({[$x,0]})).toList;
end;

memoized pairIndexes(listSize>1)->[0..listSize-2].each(i,[i+1..listSize-1].each(j,[i,j]),|);
         pairIndexes(0)->[];
memoized zeros(listSize>1)->[0..listSize-1]*0;
memoized gravAccel(listSize>1)->[0..listSize-1].map({[0,-GRAVITY]});

allWallForces(pointList:List)->pointList.pEach(p,begin
  local dirDist:=
  WALL_POINTS.each(q,begin
    (local n:=euklideanNorm(local d:=q-p))>WALL_FORCE_RANGE
    ? void
    : [d/n,n];
  end);
  dirDist.size=0
  ? [0,0]
  : (wallForce(dirDist.getInner(1))*dirDist.getInner(0)).agg(+);
end);

D(system:List(2))->begin
  local points:=system[0];
  local sysSize:=points.size;
  local nn:=pairIndexes(sysSize);
  local diffs:=points[nn.getInner(0)]-
               points[nn.getInner(1)];
  local dists :=diffs.map(::euklideanNorm);
  local forces:=absForce(dists)/dists*diffs;
  local A:=allWallForces(points)
           -DAMPING*system[1]
           +gravAccel(sysSize)
           +
  [nn.getInner(0),-forces].transpose.|(
  [nn.getInner(1), forces].transpose)
  .group(0)
  .getInner(1)
  .map({[$g.head.head,$g.getInner(1).agg(+)]})
  .sort(0)
  .getInner(1);
  [system[1],A];
end;

timeStepForward:=integrator(CASH_KARP, //The Integrator
                            ::D,       //The ODE
                            0.05,      //time step size
                            1E-4);     //tolerance

plotSystem(points:List)->begin
  local y1:=void;
  local x0:=void;
  local x1:=void;
save;
  local y1_:= (WALL_HEIGHT+WALL_POINT_SPACING/2)*1.01;
  local x0_:=-(WIDTH_PARAM+WALL_POINT_SPACING/2)*1.01;
  local x1_:=-x0_;
  local balls:=
  points.each(p,begin
    local i:=index;
    local r:=points.each(q,i=index ? void : (q-p).euklideanNorm,min).min(
        WALL_POINTS.each(q,                 (q-p).euklideanNorm,min))/2;
    y1_:=max(y1_,p[1]+r);
    x0_:=min(x0_,p[0]-r);
    x1_:=max(x1_,p[0]+r);
    [p-r,p+r];
  end,|);
  plot();
  balls.addPlot('RGB0.8,0.8,1 e fs 0.5');
  balls.addPlot('blue e 0.5');
  balls:=WALL_POINTS.each(p,begin
    local r:=min(WALL_POINT_SPACING,points.each(q,(q-p).euklideanNorm,min))/2;
    [p-r,p+r];
  end,|);
  balls.addPlot('RGB1,0.8,0.8 e fs 0.5');
  balls.addPlot('red e 0.5');

  y1.isVoid ? y1:=y1_: y1:=y1*0.95+y1_*0.05;
  x0.isVoid ? x0:=x0_: x0:=x0*0.95+x0_*0.05;
  x1.isVoid ? x1:=x1_: x1:=x1*0.95+x1_*0.05;
  setOptions(['y1'=>y1,
              'x0'=>x0,
              'x1'=>x1]);
  addAnimationFrame;
end;

begin
  resetRandom(1);
  local sys:=[0..toInt(SAMPLE_COUNT)-1].map({[random-0.5,1+0.5*$x]});
  sys:=[sys,zeros(sys.size)];


  setOptions(
   ['autoscaleFactor'=>1,
    'autoscaleX'=>false,
    'autoscaleY'=>false,
    'axisStyleX'=>3,
    'axisStyleY'=>3,
    'y0'=>-1.0,
    'y1'=> 2.0,
    'logscaleX'=>false,
    'logscaleY'=>false,
    'preserveAspect'=>true]);

  clearAnimation;
  plotSystem(sys[0]);
  display;
  //while(true,
  [1..999].each(step,
  begin
    sys:=sys.timeStepForward;
    //handle dropout
    local keepMask:=(sys[0].getInner(1)>-3);
    keepMask.agg(AND) ? void : begin
      sys[0]:=sys[0][keepMask];
      sys[1]:=sys[1][keepMask];
    end;

    printf('Time step done in %{time-t0}7.3fs');
    plotSystem(sys[0]);
  end);
  print('Done for ',SAMPLE_COUNT,' ',WALL_HEIGHT,' ',phobic ? 'phobic' : void);
end;
