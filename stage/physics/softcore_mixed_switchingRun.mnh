USE softcore_mixed,rungeKutta;

private datastore state;
private datastore positionHistory;

private mutable quitPosted:=false;

P_COUNT:=100;
INTERPOLATING_FRAMES:=300;

FORCE_FUNCTIONS:=begin
  setParticleCount(simSetupOf(P_COUNT,P_COUNT,SCENARIO_PHOBIC));
  simSetupOf(P_COUNT,P_COUNT,SCENARIO_POLYMER).setupForces; local result:=[[absForce00,absForce01,absForce11]];
  simSetupOf(P_COUNT,P_COUNT,SCENARIO_POLYMER).setupForces;       result|=[[absForce00,absForce01,absForce11]];
  simSetupOf(P_COUNT,P_COUNT,SCENARIO_PHOBIC ).setupForces;       result|=[[absForce00,absForce01,absForce11]];
  simSetupOf(P_COUNT,P_COUNT,SCENARIO_PHOBIC ).setupForces;       result|=[[absForce00,absForce01,absForce11]];
  simSetupOf(P_COUNT,P_COUNT,SCENARIO_DUST   ).setupForces;       result|=[[absForce00,absForce01,absForce11]];
  simSetupOf(P_COUNT,P_COUNT,SCENARIO_DUST   ).setupForces;       result|=[[absForce00,absForce01,absForce11]];
  simSetupOf(P_COUNT,P_COUNT,SCENARIO_NACL   ).setupForces;       result|=[[absForce00,absForce01,absForce11]];
  simSetupOf(P_COUNT,P_COUNT,SCENARIO_NACL   ).setupForces;       result|=[[absForce00,absForce01,absForce11]];
  simSetupOf(P_COUNT,P_COUNT,SCENARIO_LAYERS ).setupForces;       result|=[[absForce00,absForce01,absForce11]];
  simSetupOf(P_COUNT,P_COUNT,SCENARIO_LAYERS ).setupForces;       result|=[[absForce00,absForce01,absForce11]];
  simSetupOf(P_COUNT,P_COUNT,SCENARIO_HEX    ).setupForces;       result|=[[absForce00,absForce01,absForce11]];
  simSetupOf(P_COUNT,P_COUNT,SCENARIO_HEX    ).setupForces;       result|=[[absForce00,absForce01,absForce11]];
  simSetupOf(P_COUNT,P_COUNT,SCENARIO_SIMPLE ).setupForces;       result|=[[absForce00,absForce01,absForce11]];
  simSetupOf(P_COUNT,P_COUNT,SCENARIO_DIPOLES).setupForces;       result|=[[absForce00,absForce01,absForce11]];
  result;
end;
FRAMES_TOTAL:=round(INTERPOLATING_FRAMES*(FORCE_FUNCTIONS.size));

switchSetup(frameIndex)->begin
  local k0:=min(FORCE_FUNCTIONS.size-1,frameIndex div INTERPOLATING_FRAMES); local w0:=cos((frameIndex mod INTERPOLATING_FRAMES)/INTERPOLATING_FRAMES*pi)*0.5+0.5;
  local k1:=min(FORCE_FUNCTIONS.size-1,k0+1              ); local w1:=1-w0;
  absForce00:=FORCE_FUNCTIONS[k0,0]*w0+FORCE_FUNCTIONS[k1,0]*w1;
  absForce01:=FORCE_FUNCTIONS[k0,1]*w0+FORCE_FUNCTIONS[k1,1]*w1;
  absForce11:=FORCE_FUNCTIONS[k0,2]*w0+FORCE_FUNCTIONS[k1,2]*w1;
  [k0,k1];
end;

main->begin
  async({begin
           ask('Press enter to abort calculation');
           quitPosted:=true;
         end});

  state.isVoid
  ? begin
      state:=centralDartThrowing(PARTICLE_COUNT)*0.7;
      state:=[state,zeros(state.size)];
      positionHistory:=[];
    end
  : void;

  local step:=integrator(CASH_KARP, //The Integrator
                         ::D,       //The ODE
                         0.05,      //time step size
                         1E-5);     //tolerance
  isGuiStarted ? setOptions(["fontsize"=>6.8301345536507059,"autoscaleX"=>false,"autoscaleY"=>false,"axisStyleX"=>3,"axisStyleY"=>3].toMap) : void;
  while(!quitPosted AND positionHistory.size<=FRAMES_TOTAL,begin
    switchSetup(positionHistory.size);
    positionHistory|=[state[0]];
    state:=step(state);
    print(formatTime(systime),' ',positionHistory.size);
    isGuiStarted ? state[0].prepareForPlot.plotPreparedSystem(true) : void;
  end);
  writeDataStores;
end;

main('replay')->begin
  setOptions(["fontsize"=>6.8301345536507059,"autoscaleX"=>false,"autoscaleY"=>false,"axisStyleX"=>3,"axisStyleY"=>3].toMap);
  assertGuiStarted;
  positionHistory.each(frame,
  future({printDirect($0) orElse prepareForPlot($1)},["\r"&(index+1)&'/'&positionHistory.size,frame]))
  .each(ballFuture,ballFuture().plotPreparedSystem(true));
end;

////Uncomment the following lines to reset the datastores
//positionHistory.size;
//begin positionHistory:=void; state:=void; end;
//writeDataStores;


