
collect(i)->begin
  local collected:=[];
save;
  i.isInt
  ? begin
      collected ||= [i,scriptTime];
      void;
    end
  : begin
      local result:=collected;
      collected:=[];
      local t0:=result[0,1];
      result.map((pt)->[pt[0],pt[1]-t0]);
    end;
end;

M(i)->begin
  collect(i);
  sleep(0.1*(1+random));
  collect(i);
  i;
end;

A(i)->begin
  collect(i);
  sleep(0.02);
  collect(i);
end;

visualize(caption:String)->begin
  local data:=collect('flush');
  local tasks:=data.getInner(1).group(data.getInner(0));
  tasks.each(chunk,[chunk[1,0],(chunk[0]  )*0.1],
                   [chunk[1,1],(chunk[0]+1)*0.1]).plot('box f 1');
  tasks.each(chunk,[chunk[1,2],(chunk[0]  )*0.1],
                   [chunk[1,3],(chunk[0]+1)*0.1]).addPlot('box f 1');

  local txt:=caption&"\nStart of aggregation: "&(tasks.getInner(1).getInner(2).min)
                    &"\nEnd of mapping: "&(tasks.getInner(1).getInner(1).max)
                    &"\nFinished at: "&(tasks.getInner(1).getInner(3).max);
  drawTextAbsolute(0,1,txt,14,'TL',[0,0,0],[1,1,1]);
  addAnimationFrame;
end;

showtimes(taskCount:Int)->begin
  [1..taskCount].map(::M).agg(::A);
  visualize('List, serial processing');
  rangeGenerator(1,taskCount).map(::M).agg(::A);
  visualize('Iteratable, serial processing');
  [1..taskCount].pMap(::M).agg(::A);
  visualize('List, parallel processing');
  rangeGenerator(1,taskCount).pMap(::M).agg(::A);
  visualize('Iteratable, parallel processing');
end;

showtimes(30);
