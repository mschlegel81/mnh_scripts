parseUses(filename:String)->
begin
  local hasUses:=false;
  local hasSemicolon:=false;
  fileContents(filename)
  .tokenSplit('pascal')
  .each(token,token.upper=='USES'
              ? begin hasUses:=true; void; end
              : hasUses
                ? token=';'
                  ? begin hasSemicolon:=true; void; end
                  : hasSemicolon ? void : token
                : void)
  .trim
  .filter({$token.matches('^\w+.*$')});
end;

datastore uses;
synchronized logUses(using:String,used:String)->uses|=[[using,used]];

main('update')->begin
  uses:=[];
  //collect imports
  local filesInFocus:=allFiles('.',['*.pas','*.lpr'])
  .pEach(file,
    begin
      local id:=extractFileNameOnly(file);
      file.parseUses.each(imported,logUses(id,imported));
      id;
    end).toSet;
  print(uses.typeOf);
  uses:=uses.filter({$u[0] in filesInFocus AND $u[1] in filesInFocus}).toSet;
  print(uses.typeOf);
end;

main('tgf')->begin
  local indexMap:=uses.flatten.unique.each(f,print(index,' ',f),[f,index]).toMap;
  print('#');
  uses.each(pair,print(indexMap[pair[0]],' ',indexMap[pair[1]]));
end;

main('hierarchy')->begin
  local u:=uses;
  while(u.size>0,begin
    local n:=u.flatten.toSet.each(i,i in u.getInner(0) ? void : i);
    n.size=0 ? n:=u : void;
    u:=u.filter({!($u[1] in n)});
    print(n.join(", "));
  end);
end;

main('uses',id)->print(id," is used by\n  ",uses.map({$u[1]==id ? $u[0] : void}).join("\n  "));
