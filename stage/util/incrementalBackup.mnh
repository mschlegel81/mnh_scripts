#!C:\bin\mnh.exe -quiet -convertPrintToLog -logDateFmt hh:mm:ss -logLocationLength 10 +log stdOut(2)
ducktype Fingerprint(L:NumericList(3))->L[0]>=-1 AND
                         L[1].isInt AND L[1]>=-1 AND
                         L[2].isInt AND L[2]>=-1;
ducktype FingerprintMap       (M:Map)->M.getInner(0).isStringSet AND M.getInner(1).each(e,e.isFingerprint ,AND);
ducktype FingerprintContentMap(M:Map)->M.getInner(0).isStringSet AND M.getInner(1).each(e,e.isList(2) and e[0].isFingerprint and e[1].isExpression(0),AND);
ducktype ContentMap(M:Map)->M.getInner(0).isStringSet AND M.getInner(1).isStringCollection;

ducktype BackupConfig(M:Map(4))->M['backupNameBase'].isString  AND
                                (M['basePattern']   .isString OR
                                 M['basePattern']   .isStringList)  AND
                                 M['recurse']       .isBoolean AND
                                 M['matcher']       .isExpression(1);
FILE_EXTENSION:='.ib';
MAX_CHUNK_SIZE:=500*1024Â²;//=500MiB
MAX_NUMBER_OF_DELTAS:=50;
DELETED:=[-1,-1,-1].toFingerprint;
sortableSystime->formatTime('yyyymmddhhnnss',systime);

private getInfo(filename:String)->begin
  local info:=filename.fileInfo;
  filename=>(info['time']| fileStats(info['path']).trailing(2)).toFingerprint;
end;

private doWrite(filename:String,fingerprintMap:FingerprintMap,contentMap:ContentMap)->begin
  log('Writing ',filename);
  writeFile(filename,[fingerprintMap,contentMap.serialize].serialize).assert(filename,' could not be written');
end;

private writeState(getNextFilename:Expression,rootPath:String,state:FingerprintMap)->begin
  local fingerprintMap:=[].toMap;
  local contentMap    :=[].toMap;
  local sizeTally:=0;
  state.sort.sort((a,b)->a[0].extractFileExt<=b[0].extractFileExt)
  .each(entry,begin
     local relativeName:=relativeFileName(rootPath,entry[0]);
     entry[1]==DELETED
     ? log('    ',relativeName,' is deleted')
     : begin
         assert(entry[1]==getInfo(entry[0])[1],entry[0],' has changed');
         log('    ',relativeName,' is new or modified');
         contentMap    [relativeName]:=fileContents(entry[0]);
       end;
     fingerprintMap[relativeName]:=entry[1];
     (sizeTally+=entry[1,1]) > MAX_CHUNK_SIZE
     ? begin
         assert(fingerprintMap.isFingerprintMap);
         assert(contentMap.isContentMap);
         doWrite(getNextFilename(),fingerprintMap,contentMap);
         fingerprintMap:=[].toMap;
         contentMap    :=[].toMap;
         sizeTally:=0;
       end
     : void;
   end);
  fingerprintMap.size>0
  ? doWrite(getNextFilename(),fingerprintMap,contentMap)
  : void;
end;

private contentMapWrapper(s:String)->(key)->begin
  local contentMap:=s.deserialize;
save;
  contentMap[key];
end;
private apply(e:Expression,key:String)->{e(key)};

private readState(backupFileName:String)->begin
  local data:=backupFileName.fileContents.deserialize;
  local getContent:=contentMapWrapper(data[1]);
  data[0].each(entry,begin
    entry[0]=>[entry[1],apply(getContent,entry[0])];
  end).toMap;
end;

fileState(rootPath:String,basePattern:String,recurse:Boolean,matcher:Expression(1))->
  allFiles(rootPath,basePattern,recurse)
    .filter(matcher)
    .pMap(::getInfo)
    .toMap
    .toFingerprintMap;

stateDelta(previous:FingerprintContentMap,current:FingerprintMap,rootPath:String)->begin
  local M:=previous                                      //Deleted entries:
    .map((entry)->entry[1,0]==DELETED ? void : entry[0]) // - not previously deleted
    .minus(relativeFileName(rootPath,current.getInner(0)))   // - not contained in current state
    .map((filename)->(rootPath&'/'&filename)=>DELETED)
    .toMap;

  current.each(entry,
    begin
      (previous[relativeFileName(rootPath,entry[0]),0] orElse DELETED)==entry[1]
      ? void
      : M[entry[0]]:=entry[1];
    end);
  M;
end;

stateDelta(previous:FingerprintMap,current:FingerprintContentMap,rootPath:String)->begin
  local M:=previous                                      //Deleted entries:
    .map((entry)->entry[1,0]==DELETED ? void : entry[0]) // - not previously deleted
    .minus((rootPath&'/'&current.getInner(0)))   // - not contained in current state
    .map((filename)->filename=>[DELETED,{''}])
    .toMap;
  current.each(entry,
    begin
      (previous[rootPath&'/'&entry[0]] orElse DELETED)==entry[1,0]
      ? void
      : M[rootPath&'/'&entry[0]]:=entry[1];
    end);
  M;
end;

doBackup(rootPath:String,config:BackupConfig)->begin
  log('Looking for changes in ',rootPath);
  local backupPattern:=format('%s_%%s%s',config['backupNameBase'],FILE_EXTENSION);
  local previousBackups:=backupPattern.format('*').files().sort;
  local nextBackup:=rangeGenerator(sortableSystime.toInt).map((k)->backupPattern.format(k));
  local currentState:=fileState(rootPath,
                                config['basePattern'],
                                config['recurse'],
                                config['matcher']);
  local allWriteFutures:=[];
  log('  Computed state: ',currentState.size,' (',currentState.typeOf,')');
  previousBackups.size=0
  ? begin
      log('  Creating initial backup');
      allWriteFutures|=writeState(nextBackup,rootPath,currentState);
    end
  : begin
      local previousDeltas:=previousBackups.map({$b.readState});

      local allMerged:=begin
        local s:=[].toMap;
        previousDeltas.each(delta,s:=delta.mergeMaps(s,::orElse));
      end;
      local increment:=allMerged.each(prev,stateDelta(prev,currentState,rootPath));

      while(increment.size>1 AND
            increment[increment.size-1]==increment[increment.size-2],
            increment:=increment.leading);
      local obsoleteBackups:=previousBackups.tail(increment.size);
      previousBackups      :=previousBackups.head(increment.size);
      increment:=increment.trailing;
      log('  Delta ready');
      increment.size=0
      ? return log('  Not writing zero increment')
      : void;

      obsoleteBackups.map({log('  ',$f,' is obsolete') orElse deleteFile($f)});

      previousBackups.size>MAX_NUMBER_OF_DELTAS
      ? begin
          log('  Max number of deltas exceeded. Consolidating to single backup ',nextBackup);
          previousBackups.each(f,f.deleteFile);
          allWriteFutures|=nextBackup.writeState(rootPath,currentState);
        end
      : allWriteFutures|nextBackup.writeState(rootPath,increment);
    end;
  allWriteFutures;
end;

doRestore(targetFolder:String,config:BackupConfig)->begin
  local allBackups:=files(format('%s_*%s',config['backupNameBase'],FILE_EXTENSION)).sort;
  assert(allBackups.size>0,'No backups to restore found!');
  log('Restoring to ',targetFolder);
  local deltaToApply:=
  fileState(targetFolder,
            config['basePattern'],
            config['recurse'],
            config['matcher'])
  .stateDelta(
    allBackups
      .each(backupFile,
             backupFile.readState,
             aggregator({$1.mergeMaps($0,::orElse)}))
      .filter({config['matcher']($x[0])})
      .toFingerprintContentMap,targetFolder);
  deltaToApply.each(entry,begin
    local filename:=expandedFileName(targetFolder&'/'&entry[0]);
    entry[1,0]==DELETED
    ? log('  Deleting ',filename,' ',deleteFile(filename) ? 'o.k.' : 'FAILED')
    : begin
        local fileAge:=entry[1,0,0];
        local fileContents:=entry[1,1]();
        log('  Writing ',filename,' ',writeFile(filename,fileContents) AND setFileDate(filename,fileAge) ? 'o.k.' : 'FAILED');
      end;
  end);
end;

@SuppressUnusedParameterWarning
matchAll(filename:String)->true;
dropPascalCompilates(x)->!(x.matches('\.(exe|log|o|ppu|a)$|\.git'));

DEV_CONFIG:=
  ['backupNameBase'=>'ib/dev',
   'basePattern'   =>'*.*',
   'recurse'       =>false,
   'matcher'       =>{!($x.matches('(\.(ib|log|7z))|(checkstyle\.datastore0)|(smart7z\.datastore.)$'))}].toMap;
MNH_CONFIG:=
  ['backupNameBase'=>'ib/mnh5',
   'basePattern'   =>'*.*',
   'recurse'       =>true,
   'matcher'       =>{!($x.matches('\.(exe|log|png)$|\.git|/consoles/lib|/ide/compilates|/backup/'))}].toMap;
MNH_RESTORE_CONFIG:=
  ['matcher'       =>{!($x.matches('\.(exe|log|png)$|\.git|(testExpectation\.datastore1)|/consoles/lib|/ide/compilates|/backup/'))}].toMap
  .mergeMaps(MNH_CONFIG,::orElse);
GIT_CONFIG:=
  ['backupNameBase'=>'ib/git',
   'basePattern'   =>'*.*',
   'recurse'       =>true,
   'matcher'       =>::matchAll].toMap;
SCRIPTS_CONFIG:=
  ['backupNameBase'=>'ib/mnh_scripts',
   'basePattern'   =>'*.*',
   'recurse'       =>true,
   'matcher'       =>{!($x.matches('(\.git)|(/oeis/.*datastore)'))}].toMap;
ART_SRC_CONFIG:=
  ['backupNameBase'=>'ib/art_source',
   'basePattern'   =>'*.*',
   'recurse'       =>true,
   'matcher'       =>::dropPascalCompilates].toMap;
ART_BIN_CONFIG:=
  ['backupNameBase'=>'ib/art_bin',
   'basePattern'   =>'*.*',
   'recurse'       =>true,
   'matcher'       =>::matchAll].toMap;
RETROSPECTIVE_CONFIG:=
  ['backupNameBase'=>'ib/retrospective',
   'basePattern'   =>'*.*',
   'recurse'       =>true,
   'matcher'       =>{!($x.matches('\.datastore'))}].toMap;
SUDOKU_CONFIG:=
  ['backupNameBase'=>'ib/sudoku',
   'basePattern'   =>'*.*',
   'recurse'       =>true,
   'matcher'       =>::dropPascalCompilates].toMap;
GRAVEYARD_CONFIG:=
  ['backupNameBase'=>'ib/graveyard',
   'basePattern'   =>'*.*',
   'recurse'       =>true,
   'matcher'       =>::matchAll].toMap;
WEB_CONFIG:=
  ['backupNameBase'=>'ib/web',
   'basePattern'   =>'*.*',
   'recurse'       =>true,
   'matcher'       =>::dropPascalCompilates].toMap;
TP_CONFIG:=
  ['backupNameBase'=>'ib/3rd_party',
   'basePattern'   =>'*.*',
   'recurse'       =>true,
   'matcher'       =>::dropPascalCompilates].toMap;
KEYLOGGER_CONFIG:=
  ['backupNameBase'=>'ib/keylogger',
   'basePattern'   =>'*.*',
   'recurse'       =>true,
   'matcher'       =>::dropPascalCompilates].toMap;

doBackup->begin
  doBackup('.'            ,DEV_CONFIG);
  doBackup('mnh5'         ,MNH_CONFIG);
  doBackup('art.source'   ,ART_SRC_CONFIG);
  doBackup('art.bin'      ,ART_BIN_CONFIG);
  doBackup('git'          ,GIT_CONFIG);
  doBackup('mnh_scripts'  ,SCRIPTS_CONFIG);
  doBackup('data/retrospective',RETROSPECTIVE_CONFIG);
  doBackup('Sudoku3'      ,SUDOKU_CONFIG);
  doBackup('graveyard'    ,GRAVEYARD_CONFIG);
  doBackup('web'          ,WEB_CONFIG);
  doBackup('3rd_party'    ,TP_CONFIG);
  doBackup('keylogger'    ,KEYLOGGER_CONFIG);
end;

main->fail;

doBackup;

main('restore')->begin
  doRestore('.'            ,DEV_CONFIG);
  doRestore('mnh5'         ,MNH_RESTORE_CONFIG);
  doRestore('art.source'   ,ART_SRC_CONFIG);
  doRestore('art.bin'      ,ART_BIN_CONFIG);
  doRestore('git'          ,GIT_CONFIG);
  doRestore('mnh_scripts'  ,SCRIPTS_CONFIG);
  doRestore('retrospective',RETROSPECTIVE_CONFIG);
  doRestore('Sudoku3'      ,SUDOKU_CONFIG);
  doRestore('graveyard'    ,GRAVEYARD_CONFIG);
  doRestore('web'          ,WEB_CONFIG);
  doRestore('3rd_party'    ,TP_CONFIG);
  doRestore('keylogger'    ,KEYLOGGER_CONFIG);
end;
