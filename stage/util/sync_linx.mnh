#!/usr/bin/mnh_light
syncFilePair(sourceFile:String,targetFile:String)->begin
  local sourceExists:=fileExists(sourceFile);
  local destExists:=fileExists(targetFile);

  sourceExists
  ? destExists AND ((fileInfo(sourceFile).getAll(['time','size']))-(fileInfo(targetFile).getAll(['time','size']))<0.01).agg(AND)
    ? void
    : print(sourceFile,' -> ',targetFile, destExists? '' : ' *') orElse copyFile(sourceFile,targetFile) ? void : fail('Copy failed')
  : destExists
    ? deleteFile(targetFile) ? void : fail('Delete failed')
    : void;
end;

normalizePath(path:String)->regex.replace(path.expandedFileName,'/$','');

noObjectsFilter(filename:String)->!filename.matches('(\.(o)|(ppu)|(exe)$)|(\.git)');
checkstyleOnlyFilter(filename:String)->filename.matches('checkstyle\.');

sync(sourceFolder:String,targetFolder:String,filterEx:Expression(1),recursive:Boolean)->begin
  local source:=sourceFolder.normalizePath;
  local dest  :=targetFolder.normalizePath;
  union(allFiles(source,'',recursive).filter(filterEx).map({[$x,$x.replace(source,dest)]}),
        allFiles(dest  ,'',recursive).filter(filterEx).map({[$x.replace(dest,source),$x]}))
  .map({syncFilePair@$pair});
  void;
end;

SHARED_ROOT_PREFIX:='/media/dev';
LOCAL_ROOT_PREFIX :='~/dev';
TGT:='/mnh5/target';
TEST:='/mnh5/regTest';
MNH_ROOT:='/mnh5';
ROOT_SUFFIXES:=[
  (MNH_ROOT)           =>false,
  '/mnh5/3rd_party'    =>true,
  '/mnh5/common'       =>true,
  '/mnh5/consoles'     =>true,
  '/mnh5/core'         =>true,
  '/mnh5/demos'        =>true,
  '/mnh5/igSrc'        =>true,
  '/mnh5/ide'          =>true,
  '/mnh5/packages'     =>true,
  (TEST)               =>true,
  '/mnh5/resources'    =>true,
  (TGT)                =>true];

main()->begin
  print('Starting sync ',SHARED_ROOT_PREFIX,' -> ',LOCAL_ROOT_PREFIX);
  ROOT_SUFFIXES.each(s,sync(SHARED_ROOT_PREFIX&s[0],LOCAL_ROOT_PREFIX&s[0],::noObjectsFilter,s[1]));
  sync(SHARED_ROOT_PREFIX,LOCAL_ROOT_PREFIX,::checkstyleOnlyFilter,false);
  print('Done');
end;

main('r')->begin
  print('Starting sync ',LOCAL_ROOT_PREFIX,' -> ',SHARED_ROOT_PREFIX);
  ROOT_SUFFIXES.each(s,sync(LOCAL_ROOT_PREFIX&s[0],SHARED_ROOT_PREFIX&s[0],::noObjectsFilter,s[1]));
  print('Done');
end;

