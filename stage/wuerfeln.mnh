

ONES:=[1,1,1,1,1,1];
roll(i:Int,numberOfDice)->begin
  local d:=i.digits(6);
  while(d.size<numberOfDice,d|=0);
  groupToList(ONES.head(numberOfDice),d,0,::+,6);
end;

allRolls(numberOfDice in [1..6])->rangeGenerator(0,6^numberOfDice-1).map((i)->roll(i,numberOfDice));

LONG_STRAIGHT   :=ONES;
SHORT_STRAIGHT_1:=[1,1,1,1,1,0];
SHORT_STRAIGHT_2:=[0,1,1,1,1,1];

BASE_SCORE:=[1000,200,300,400,500,600];

score(f:IntList(6))->begin
  f==LONG_STRAIGHT               ? [5000,f] :
  (f>=SHORT_STRAIGHT_1).agg(and) ? [2000,SHORT_STRAIGHT_1]+score(f-SHORT_STRAIGHT_1) :
  (f>=SHORT_STRAIGHT_2).agg(and) ? [2000,SHORT_STRAIGHT_2]+score(f-SHORT_STRAIGHT_2) :
  begin
    local I:=indexOf(f>=3);
    I==[]
    ? (f[0]>0 ? [f[0]*100,f*[1,0,0,0,0,0]] + score(f*[0,1,1,1,1,1])
     : f[4]>0 ? [f[4]* 50,f*[0,0,0,0,1,0]] + score(f*[1,1,1,1,0,1]) : [0,[0,0,0,0,0,0]])
    : [(BASE_SCORE[I]*2^(f[I]-3)).agg(+),f.each(k,k>=3 ? k : 0)]+
                                   score(f.each(k,k>=3 ? 0 : k));
  end;
end;

statistics(g:Iteratable)->begin
  local L:=g.pMap((e)->e[0]=>e[1].agg(+)).toList.transpose;
  L[0].group(L[1]).map((e)->[e[0],e[1].size/L[0].size,e[1].agg(+)/e[1].size]).sort;




//  [trueCount(L=0)/L.size,L.agg(+)/L.size];
end;


allRolls(6).pMap(::score).statistics;
allRolls(5).pMap(::score).statistics;
allRolls(4).pMap(::score).statistics;
allRolls(3).pMap(::score).statistics;
allRolls(2).pMap(::score).statistics;
allRolls(1).pMap(::score).statistics;

