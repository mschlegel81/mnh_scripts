x0:=0;
x1:=6*pi;

testEq(x=0.0)->1;
testEq(x>0.0)->sin(x)/x;


getError(f:Expression(1))->integrate((x)->sqr(f(x)-testEq(x)),x0,x1,2000);


testApproximations1(pointCount>=3)->begin
  local S:=map([0..pointCount-1]/(pointCount-1)*(x1-x0)+x0,(x)->[x,testEq(x)]);

  local out:=
  [pointCount,
   getError(local f0:=newLinearInterpolator(S)),
   getError(local f1:=newLocalInterpolator(S)),
   getError(local f2:=newBSpline(S)),
   getError(local f3:=newSplineInterpolator(S))];

  setOptions(["x0"=>-1,"x1"=>1,"y0"=>-1,"y1"=>1,"fontsize"=>10,"preserveAspect"=>false,"autoscaleX"=>true,"autoscaleY"=>true,"logscaleX"=>false,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>7,"axisStyleY"=>7].toMap);
  plot(::testEq,x0,x1,500);
  addPlot(f0,x0,x1,500);
  addPlot(f1,x0,x1,500);
  addPlot(f2,x0,x1,500);
  addPlot(f3,x0,x1,500);
  addPlot(S,'black .');
  addAnimationFrame;
  postDisplay;

  out;
end;

testApproximations2(pointCount>=3)->begin
  local S:=map(sort(random(pointCount-2)|[0,1])*(x1-x0)+x0,(x)->[x,testEq(x)]);

  local out:=
  [pointCount,
   getError(local f0:=newLinearInterpolator(S)),
   getError(local f1:=newLocalInterpolator(S)),
   getError(local f2:=newBSpline(S)),
   getError(local f3:=newSplineInterpolator(S))];

  setOptions(["x0"=>-1,"x1"=>1,"y0"=>-1,"y1"=>1,"fontsize"=>10,"preserveAspect"=>false,"autoscaleX"=>true,"autoscaleY"=>true,"logscaleX"=>false,"logscaleY"=>false,"autoscaleFactor"=>1,"axisStyleX"=>7,"axisStyleY"=>7].toMap);
  plot(::testEq,x0,x1,500);
  addPlot(f0,x0,x1,500);
  addPlot(f1,x0,x1,500);
  addPlot(f2,x0,x1,500);
  addPlot(f3,x0,x1,500);
  addPlot(S,'black .');
  addAnimationFrame;
  postDisplay;

  out;
end;


round(3*sqrt(2)^[0..12]).map(::testApproximations1).{begin
  setOptions(["logscaleX"=>true,"logscaleY"=>true].toMap);
  plot([0]); //dummy; to get matching colors later on
  addPlot($L.getInner(0),$L.getInner(1));
  addPlot($L.getInner(0),$L.getInner(2));
  addPlot($L.getInner(0),$L.getInner(3));
  addPlot($L.getInner(0),$L.getInner(4));
  addAnimationFrame;

end};


