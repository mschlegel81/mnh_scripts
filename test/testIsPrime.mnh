



//begin
//  local k:=10000;
//  local B:=2^k-1;
//  local P:=2^k-4;
//  [2..ceil(sqrt(k))].each(i,begin
//    (P and 2^i)>0
//    ? begin
//        local mask:=B xor (2^([i..floor(k/i)]*i)).agg(or);
//        P:=P and mask;
//      end
//    : void;
//  end);
//  indexOf(P.digits(2).reverseList>0);
//end;

myPrimeGen->rangeGenerator(2).filter({
  begin
    local p:=[];
  save;
    0 in $i mod p
    ? false
    : (p|=$i) orElse true;
  end});

myPrimeGen2->rangeGenerator(2).filter(::isPrime);

main->begin
  local g1:=myPrimeGen2;
  local g2:=primeGenerator;
  local k:=0;
  local stepsize:=10000;
  while(time<3600,begin
    local t0:=time;
    local a:=g1.head(stepsize);
    local t1:=time;
    local b:=g2.head(stepsize);
    local t2:=time;
    assert(a==b,'Expected ',b,"\n but got ",a,"\nexpected but not found:",b.minus(a),"\nfound but not expected:",a.minus(b));
    print(k+=stepsize,' ',t1-t0,' ',t2-t1);
  end);
end;

testChunk(n0,n1:Int)->begin
  local L:=rangeGenerator(n0,n1).toList;
  local P:=future(::isPrime,[L]);
  local F:=L.pMap(::factorize);
  P:=P();
  L.each(n,[n,P[index],F[index]])
   .filter({$x[1] AND $x[2].size>1 OR !$x[1] AND $x[2].size=1})
   .map({print($x[0],'; isPrime=',$x[1],'; factors=',$x[2].join('*')) orElse $x[0]});
end;

randomChunkSize->intRandom(900)+100;
randomIncrement->intRandom(2^20);

main('fak')->begin
  local n0:=2^32;
  while(time<3600,begin
    local n1:=n0+randomChunkSize;
    print('Testing chunk ',n0,'..',n1);
    assert(testChunk(n0,n1)==[]);
    n0:=n1+randomIncrement;
  end);
end;

