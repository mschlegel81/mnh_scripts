USE processUtil;
private IPC_ID:=myPath.extractFileNameOnly;
private HEARTBEAT_INTERVAL:=1;
private boxPrint->print('+'&repeat('-',92)&' - - -');
private boxPrint(s:String)->printf('| %s',s);
private niceInterval(timeInDays<0.00069444444444444447)->format('%0.3f',timeInDays*86400);
private niceInterval(timeInDays)->formatTime('hh:nn:ss.zzz',timeInDays);
private KILL_SIGNAL:=['KILL',197512];
private FINAL_LINE:='### - DONE - ###';

private ensureServer->isIpcServerRunning(IPC_ID) ? void :
  begin
    startIpcServer(IPC_ID,{scriptRunning('post',$X)});
    while(!isIpcServerRunning(IPC_ID),sleep(1E-3));
  end;

mutable runners:=[].toMap;
mutable logState:=[].toMap;
mutable killRequests:=[].toSet;

//*Returns list of ids (log names) for scripts that are currently running
synchronized scriptRunning('query')->begin
  ensureServer;
  runners.getInner(0).each(id,begin
    time>runners[id]
    ? begin
        runners[id]:=void;
        killRequests>>id;
      end
    : void;
  end);
  runners.getInner(0);
end;

isLogComplete(name:String)->begin
  ((logState[name].isVoid) OR (logState[name,0]!=fileInfo(name)['time'])
  ? logState[name]:=[fileInfo(name)['time'],fileExists(name) AND fileLines(name).trailing==FINAL_LINE]
  : logState[name])[1];
end;

private synchronized scriptRunning('post',id)->begin
  runners[id]:=time+3*HEARTBEAT_INTERVAL;
  (id in killRequests
  ? KILL_SIGNAL
  : false);
end;

private
splitCommandLineParameters(s:String)->
  regex.matchComposite(s,'("[^"]+"|[^\s"]+)').getInner(0).map({
    $x.copy(0,1)='"'=$x.copy($x.length-1,1)
    ? $x.copy(1,$x.length-2)
    : $x});

startExecution(logname,scriptName,parameters:String)->begin
  local programAndScript:=
    scriptName.extractFileExt.lower=='.bat'
    ? ['cmd','/C',scriptName]
    : scriptName.extractFileExt.lower=='.mnh'
    ? [executor,'-v(1)','-headless',scriptName]
    : return void;
  execAsync(executor,['-out',logname,myPath,logname] | programAndScript | splitCommandLineParameters(parameters));
  ensureServer;
  scriptRunning('post',logname);
  true;
end;
@SuppressUnusedParameterWarning
startExecution(...)->false;

main(logname,program,...)->begin
  async({begin
    local killRequestReceived:=false;
    //We need the outer try for a graceful stop
    try({while(!killRequestReceived,sleep(HEARTBEAT_INTERVAL) orElse
                    //We need the inner try for robustness if server dies
                    try({sendIpcRequest(IPC_ID,logname)})==KILL_SIGNAL
                    ? killRequestReceived:=true
                    : void
              )}
       );
    killRequestReceived
    ? begin
        print('KILL SIGNAL RECEIVED - propagating');
        killAllMyChildren;
      end
    : void;
    end});
  boxPrint(join(program|...,' '));
  boxPrint('Run started at '&formatTime('yyyy-mm-dd hh:nn:ss.zzz',local startTime:=systime));
  boxPrint;
  local executionResult:=teeExec(program,...,::print);
  local endTime:=systime;
  boxPrint;
  boxPrint('Run finished at '&formatTime('yyyy-mm-dd hh:nn:ss.zzz',endTime));
  boxPrint('With exit code '&executionResult[1]);
  boxPrint('After '&niceInterval(endTime-startTime));
  boxPrint;
  print(FINAL_LINE);
end;
