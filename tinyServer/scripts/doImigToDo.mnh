#!C:\bin\mnh.exe -silent -headless
WORK_IN:='D:\wip';
//WORK_IN:=myPath.extractFileDirectory;

MY_IPC_ID:='23f2o3od23ni_doImigToDo';
mutable receivedKillSignal:=false;

todoIterator(maxTodos:Numeric)->{begin
  local todos:=WORK_IN.allFiles('*.todo').systemSpecificFilename.sort;
  local handedOut:=0;
save;
  (handedOut+=1)>maxTodos OR receivedKillSignal
  ? void
  : todos.size=0
    ? void
    : begin
        local result:=todos.head;
        todos:=todos.tail;
        result;
      end;
end}.toIteratableExpression;

createPrintMethod(id)->{$0.isStringList ? print(join('(Task '&id&') '&$0,"\n")) : print('(Task ',id,') ',$0)};

nextPrintMethod->begin
  local taskCounter:=rangeGenerator(1);
save;
  createPrintMethod(taskCounter());
end;

private processToDo(todo:String,delayOuput:Boolean)->receivedKillSignal ? void : begin
  local printMethod:=nextPrintMethod;
  local log:=['+-'&todo.clean(['-'],'-')&'-+',
              '| '&todo                 &' |',
              '+-'&todo.clean(['-'],'-')&'-+'];
  delayOuput
  ? printMethod(todo&' started')
  : printMethod(log);
  executeTodo(todo,delayOuput ? ((line)->log|=line) : printMethod);
  delayOuput
  ? printMethod(log)
  : void;
end;

//*Create kill switch - takes effect after evaluation
main('kill')->sendIpcRequest(MY_IPC_ID,'KILL').assert;

//*List todos
main('list')->todoIterator(Inf)
              .pMap({["\t",$filename,"\n\t...",$filename.fileLines.trailing].join})
              .each(entry,print('(',index+1,') ',entry));

//*Process todos
//*  [n] (any integer) : number of todos to process (default=1)
//*  all               : process all todos
//*  parallel          : process todos in parallel
main(...)->begin
  assert(!isIpcServerRunning(MY_IPC_ID),'Script is already running');
  startIpcServer(MY_IPC_ID,(request)->begin request=='KILL' ? print('RECEIVED KILL SIGNAL!') orElse receivedKillSignal:=true : 0; end);

  local workInParallel:=false;
  local limit:=1;
  (...).each(parameter,
    parameter='parallel'     ? begin workInParallel:=true; limit:=(limit=1 ? mnhInfo['configured_cpus'] : limit); end :
    parameter='all'          ? limit:=Inf :
    parameter.softCast.isInt ? limit:=parameter.softCast :
    parameter='-h'           ? return print(helpOnMain) :
    print(helpOnMain) orElse
    fail('Unknown parameter: ',parameter));

  print('Processing ',limit==Inf ? todoIterator(Inf).toList.size : limit,' todos ',workInParallel ? 'in parallel' : void);
  assertUniqueInstance;

  workInParallel
  ? todoIterator(limit).pMap((file)->processToDo(file,true )).agg(|)
  : todoIterator(limit). map((file)->processToDo(file,false)).agg(|);
end;

@SuppressUnusedWarning
ensureInstance->isIpcServerRunning ? void : executor.execAsync([myPath,'all']);

