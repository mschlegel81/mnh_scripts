#!C:\bin\mnh.exe -silent -headless -out ?.log
WORK_IN:='D:\wip';
//WORK_IN:=myPath.extractFileDirectory;

KILL_SWITCH_NAME:=changeFileExt(myPath,'.killswitch');

private killSwitchExists->begin
  local switchFoundBefore:=false;
save;
  fileExists(KILL_SWITCH_NAME)
  ? begin
      deleteFile(KILL_SWITCH_NAME);
      switchFoundBefore:=true;
    end
  : switchFoundBefore;
end;

todoIterator(maxTodos:Numeric)->{begin
  local todos:=WORK_IN.allFiles('*.todo').systemSpecificFilename.sort;
  local handedOut:=0;
save;
  (handedOut+=1)>maxTodos OR killSwitchExists
  ? void
  : todos.size=0
    ? void
    : begin
        local result:=todos.head;
        todos:=todos.tail;
        result;
      end;
end}.toIteratableExpression;

createPrintMethod(id)->{print('(Task ',id,') ',$0)};

nextPrintMethod->begin
  local taskCounter:=rangeGenerator(1);
save;
  createPrintMethod(taskCounter());
end;

private processToDo(todo:String)->begin
  local printMethod:=nextPrintMethod;
  printMethod('+-'&todo.clean(['-'],'-')&'-+');
  printMethod('| '&todo                 &' |');
  printMethod('+-'&todo.clean(['-'],'-')&'-+');
  executeTodo(todo,printMethod);
end;

//*Create kill switch - takes effect after evaluation
main('kill')->isIpcServerRunning ? begin
  writeFile(KILL_SWITCH_NAME,' ');
  print(KILL_SWITCH_NAME,' created');
end : warn('There is no instance running to kill');

//*List todos
main('list')->todoIterator(Inf)
              .pMap({["\t",$filename,"\n\t...",$filename.fileLines.trailing].join})
              .each(entry,print('(',index+1,') ',entry));

//*Process todos
//*  [n] (any integer) : number of todos to process (default=1)
//*  all               : process all todos
//*  parallel          : process todos in parallel
main(...)->begin
  local workInParallel:=false;
  local limit:=1;
  (...).each(parameter,
    parameter='parallel'     ? begin workInParallel:=true; limit:=(limit=1 ? mnhInfo['configured_cpus'] : limit); end :
    parameter='all'          ? limit:=Inf :
    parameter.softCast.isInt ? limit:=parameter.softCast :
    parameter='-h'           ? return print(helpOnMain) :
    print(helpOnMain) orElse
    fail('Unknown parameter: ',parameter));

  print('Processing ',limit,' todos ',workInParallel ? 'in parallel' : void);
  assertUniqueInstance;

  workInParallel
  ? todoIterator(limit).pMap(::processToDo).agg(|)
  : todoIterator(limit). map(::processToDo).agg(|);
end;

@SuppressUnusedWarning
ensureInstance->isIpcServerRunning ? void : executor.execAsync([myPath,'all']);
