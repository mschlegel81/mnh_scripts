USE tinyServer_html,processUtil;

getProcessMap->begin
  local lines:=exec('wmic',['process','get','Caption,ParentProcessId,ProcessId,CommandLine'])[0].trim.filter({$x<>''});
  local commonSpaces:=intersect@(lines.map({$x.matchComposite(' ').getInner(1)}));
  commonSpaces:=commonSpaces.minus(commonSpaces-1).|([0,lines.length.max]).sort;
  local splitStarts :=commonSpaces.leading;
  local splitLengths:=commonSpaces.tail-commonSpaces.leading;
  lines:=lines.each(line,line.copy(splitStarts,splitLengths).trim.softCast);
  local header:=lines.head;
  local PM:=lines.tail
                 .each(l,header.each(h,l[index]==''
                         ? void
                         : (h => l[index])).toMap
                         .mergeMaps(['children'=>[]].toMap,::orElse))
                 .each(processEntry,processEntry['ProcessId']=>processEntry).toMap;
  PM.getInner(1).each(p,begin
    local parent:=p['ParentProcessId'];
    PM[parent].isVoid
    ? void
    : begin
        PM[parent,'children']|=p['ProcessId'];
      end;
  end);
  PM;
end;

private isProcessChildOfAnyOther(processMap:Map, PID:Int)->begin
  local pPID:=processMap[PID,'ParentProcessId'];
  pPID != PID AND !isVoid(processMap[pPID]);
end;

@SuppressUnusedWarning
servePath('/processes/kill',parameters:Map)->begin
  local PID:=parameters['index'];
  PID.isInt
  ? begin stopProcess(PID); sleep(1); end
  : void;
  redirectTo('/processes');
end;

servePath('/processes',parameters:Map)->begin
  local PM:=getProcessMap;

  local ordered:=PM.getInner(0).sort;
  local roots:=ordered.filter({!isProcessChildOfAnyOther(PM,$PID)});
  local printed:=[].toSet;
  local result:=[];
  local recurse:={begin
    result|=[[$indent&($last ? '\--' : '+--')&(PM[$pid,'Caption'] orElse '<?>'),$pid,PM[$pid,'CommandLine'] orElse '']];
    printed|=$pid;
    local newIndent:=$last
          ? $indent + '   '
          : $indent + '|  ';
    local children:=(PM[$pid,'children'] orElse []).sort.filter({!($c in printed)});
    children.each(child,recurse(newIndent,index+1=children.size,child));
  end};

  roots.each(r,recurse('',index+1=roots.size,r));
  result:=[['Caption'.tag('b'),'PID'.tag('b'),'','Command Line'.tag('b')]]|
          result.map({[tag($x[0].copy(3),'code'),
                       $x[1],
                       htmlLink(tag('kill','b'),encodeRequest('','processes/kill',['index'=>$x[1]].toMap)),
                       tag($x[2],'code')]});

  htmlPage('Processes',
    tag('Processes','h2')&
    htmlTable(result),
    false).wrapTextInHttp;
end;

@SuppressUnusedWarning
register:=begin
  headLinks|=htmlLink('Processes','processes');
  void;
end;


