USE loggingRunner,tinyServer_html,tinyServer_config,javascriptUtils;

datastore queued  :=[];
datastore previous:=[];
SPECIAL_TASK_RESTART:='RESTART';

getNextTask->queued.size<=0 ? [] : begin
  local task:=queued.head;
  local scriptName  :=task[1];
  local scriptParams:=task[2];
  queued:=queued.tail;
  writeDataStores;
  scriptName=SPECIAL_TASK_RESTART
  ? SPECIAL_TASK_RESTART
  : [scriptName.fullScriptName.systemSpecificFilename,scriptParams];
end;

nextTaskIsRestart->
  queued.size>0 AND queued[0,1]==SPECIAL_TASK_RESTART
  ? begin
      queued:=queued.tail;
      writeDataStores;
      true;
    end
  : false;

private fmtT(pointInTime)->'<class="right">'&
                               formatTime(floor(pointInTime)==floor(systime)
                               ? 'hh:nn:ss'
                               : 'yyyy/mm/dd hh:nn:ss',pointInTime)&"</class>";

getQueuedSection(withLink:Boolean)->
  tag(
  tag('Queue'&(withLink ? '    '&htmlLink('(+)','enqueue') : void), 'h2')&
  htmlTable(
  [['Enqueued at','','Script'].map({$x.tag('b')})] |
    queued.each(x,[fmtT(x[0]),
                   htmlLink('remove','dequeue?index='&index&'&mainView='&ord(withLink)),
                   x[1].tag('code')&(x[2].trim=='' ? '' : '<br>'&tag('   '&x[2],'code')),
                   htmlLink('force start','forceStart?taskHash='&hash(x)&'&mainView='&ord(withLink)),
                   index=0 ? '' :
                   htmlLink('move to front','moveToFront?taskHash='&hash(x)&'&mainView='&ord(withLink))])),'div');

getHistorySection->begin
  local report:=getTaskReport;
  tag(
  tag('History','h2')&
  htmlTable([['#','Started','Script','Log','Status'].map({$x.tag('b')})]|
    report.each(r,
      [r['index'],
       fmtT(r[STARTTIME]),
       tag(r[SCRIPT].extractFileName,'code')&(trim(r[PARAMETERS])==''
                                              ? ''
                                              : '<br>'& tag('   '&r[PARAMETERS],'code')),
       r[FILESTATS]==[0.0,-1] ? '- log missing -' : htmlLink(getLogName(r['index']).extractFileName,
                                                       encodeRequest('','displayFile',['filename'=>getLogName(r['index'])].toMap)),
       (r[RUNNING]
       ? tag('running ','b')
         & ((r[KILLREQUESTED] orElse false)
            ? tag('kill reqested','i')
            : htmlLink('kill',encodeRequest('','kill',['index'=>r['index']].toMap)))
       : ((r[KILLREQUESTED] orElse false) ? 'killed' : r[FINISHED] ? 'finished' :  'cancelled'))&'<br>'&
       fmtT(r[FINISHTIME] orElse systime)])
   ),'div');
end;

killTask(parameters:Map)->begin
  local indexToKill:=parameters['index'];
  indexToKill.isInt
  ? setKillRequest(indexToKill)
  : void;
  redirectTo(parameters['mainView']=1 ? START_PAGE : ENQUEUE_PAGE);
end;

dequeueTask(parameters:Map)->begin
  local indexToDrop:=parameters['index'];
  indexToDrop.isInt
  ? begin
      tPrint('Dropping todo ',queued[indexToDrop,1],' ',queued[indexToDrop,2]);
      queued[indexToDrop]:=void;
    end
  : void;
  redirectTo(parameters['mainView']=1 ? START_PAGE : ENQUEUE_PAGE);
end;

addTask(parameters:Map)->begin
  enqueueTask(parameters['scriptName'],
              parameters['cmdLineParameters'] orElse '');
  redirectTo(ENQUEUE_PAGE);
end;

enqueuePage(parameters:Map)->begin
  local prevMap:=previous;
  local selectedScript:=parameters['scriptName'];
  local scriptParameters:=parameters['cmdLineParameters'];

  !(selectedScript  .isVoid) AND
  !(scriptParameters.isVoid)
  ? begin
      enqueueTask(selectedScript,
                  scriptParameters);
      return redirectTo(ENQUEUE_PAGE);
    end
  : void;

  prevMap:=prevMap.getInner(1).group(prevMap.getInner(0));

  htmlPage('Enqueue task',
  '<FORM name="myForm">'&
  getHeadLinks&
  getQueuedSection(false)&
  tag(
  tag('Enqueue task','h2')&htmlOuterTable(
    filesInScriptFolder
    .each(script,[htmlLink(script.tag('code'),encodeRequest('','displayFile',['filename'=>script.fullScriptName].toMap)),
                  htmlLink(tag('[customize]','b'),'enqueue?scriptName='&script),
                  script==selectedScript
                  ? begin
                      ((prevMap[script] orElse []).each(par,
                        htmlLink(trim(par)='' ? '&lt;no parameters&gt;' : tag(par,'code'),
                                 encodeRequest('','addTask',['scriptName'=>script,'cmdLineParameters'=>par].toMap)),
                        '<br>',&))&
                      jsTextInputField('cmdLineParameters','',parameters,100);
                    end
                  : begin
                      local par:=prevMap[script,0] orElse '';
                      htmlLink(trim(par)='' ? '&lt;no parameters&gt;' : tag(par,'code'),
                               encodeRequest('','addTask',['scriptName'=>script,'cmdLineParameters'=>par].toMap));
                    end]
                 ))&
  jsHiddenInputFields(parameters).join
  ,'div')&
  (parameters['scriptName'].isVoid ? void : '<br>'&htmlLink('enqueue task',http.encodeRequest('','addTask',parameters)))
  &'</FORM>'
  ,false).wrapTextInHttp;
end;

forceStart(parameters:Map)->begin
  local taskHash:=parameters['taskHash'];
  local taskIndex:=queued.each(q,q.hash==taskHash ?index : void,head);
  isInt(taskIndex) AND (0<=taskIndex<queued.size)
  ? begin
      tPrint('Force start...');
      taskIndex=0
      ? void
      : queued:=queued[taskIndex|filter([0..queued.size-1],{$x<>taskIndex})];
      queued.size>0 AND queued[0,1]==SPECIAL_TASK_RESTART
      ? void
      : startExecution@getNextTask;
    end
  : void;
  redirectTo(parameters['mainView']=1 ? START_PAGE : ENQUEUE_PAGE);
end;

moveToFront(parameters:Map)->begin
  local taskHash:=parameters['taskHash'];
  local taskIndex:=queued.each(q,q.hash==taskHash ?index : void,head);
  isInt(taskIndex) AND (0<taskIndex<queued.size)
  ? begin
      tPrint('Moving task to front: ',queued[taskIndex]);
      queued:=queued[taskIndex|filter([0..queued.size-1],{$x<>taskIndex})];
    end
  : void;
   redirectTo(parameters['mainView']=1 ? START_PAGE : ENQUEUE_PAGE);
end;

private addToPrevious(script,parameters)->begin
  previous:=[[script,parameters]]|previous;
  previous.size>1
  ? [1..previous.size-1].each(i,previous[i]==previous[0] ? previous[i]:=void
                                                         : void)
  : void;
  previous:=head(previous,MAX_HISTORY_SIZE);
end;

enqueueTask(script,parameters)->begin
  tPrint('Planned new task ',script,' ',parameters.toString);
  queued|=[[systime,script,parameters.toString]];
  addToPrevious(script,parameters.toString);
end;

