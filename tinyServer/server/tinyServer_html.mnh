USE tinyServer_config;
htmlPage(title:String,body:String,refresh:Boolean)->//!~<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<head>
<meta content="text/html; charset=UTF-8" http-equiv="content-type"><title>~&title&'</title>'&
(refresh ? '<meta http-equiv="refresh" content="5" >' : void)&
//!~<style>
body {
  background-color: #222222;
  border-style: none;
  border-width: 0;
  margin: 5pt;
  text-transform: none;
  text-align: justify;
  color: #EEEEEE;
  line-height: normal;
  font-family: "Century Gothic", CenturyGothic, AppleGothic, sans-serif;
  font-size: medium;
  font-style: normal;
}
a {
  color: #FFFFFF;
  background-color: #444444;
}
code {
  font-family: Courier-New,Courier;
  white-space: pre;
}
table {
  border-collapse: collapse;
}
th, td {
  padding: 3px;
  text-align: left;
  border-bottom: 1px solid #555555;
}
tr:hover {background-color:#444444;}
h2 {
  font-style: inherit;
  font-size: 200%;
}
.codeblock {
  overflow:scroll;
  width:95%;
  background-color:#333333;
}
</style>
</head>
<body>~&body&'</body>';

tag(content,t)->format('<%s>%s</%s>',t,content,t);
htmlTable(L:List)->'<table>'&join('<tr>'&L.map({join('<td>'&$row&'</td>')})&'</tr>')&'</table>';
htmlLink(linkText:String,linkTarget:String)->'<a href="'&linkTarget&'">'&linkText&'</a>';
redirectTo(path)->wrapTextInHttp('<html><head><meta http-equiv="Refresh" content="0; url='&path&'"/></head><body></body></html>');
htmlClean(text:String)->
text.replace(['&'  ,'"'   ,"'"   ,'<' ,'>'],
         '&'&['amp','quot','apos','lt','gt']&';');

mutable headLinks:=[];

private mutable fileServed:=[].toMap;
serveFile(filename:String)->
fileExists(filename) ? begin
  local cachedResult:=fileServed[filename];
  local currentFileInfo:=fileInfo(filename);
  cachedResult.isVoid OR !(cachedResult[0]==currentFileInfo)
  ? begin
      local response:=filename.extractFileExt.lower=='.ico'
                      ? wrapTextInHttp(fileContents(filename),200,['Cache-Control'=>'max-age=3600','Content-type'=>'image/x-icon'].toMap)
                      : formatHtmlPage(filename.fileLines,filename.extractFileName).wrapTextInHttp;
      fileServed[filename]:=[currentFileInfo,response];
      response;
    end
  : cachedResult[1];
end : void;

memoized getHeadLinks->headLinks.join("&nbsp;&nbsp;").tag('div');
