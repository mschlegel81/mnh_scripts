#!C:\bin\mnh.exe -GUI -quiet +out ?.log(1)
USE tinyServer_html,tinyServer_config,loggingRunner,serveTasks,cpuUsage,generators;

@SuppressUnusedWarning
USE serveProcesses,serveFiles;

private LOG_NAME:=changeFileExt(myPath,'.log');
private uptimeFormat:='{floor($0/3600)}:%{floor($0/60) mod 60}2.2d:%{floor($0) mod 60}2.2d';

//--------------------------------------------------------------------------:CPU Usage
private getStatusSection->tag(
  ('Status').tag('h2')&htmlOuterTable(
  [['Date:'  .tag('b'),formatTime('dd.mm.yyyy',      systime) ,
    'Time:'  .tag('b'),formatTime('hh:nn:ss',        systime) ,
    'Uptime:'.tag('b'),format(uptimeFormat,time)]])&getCpuDiagram,'div');

@SuppressUnusedParameterWarning
startPage(parameters:Map)->htmlPage('Server Overview',getHeadLinks&getStatusSection&getTasksSection,true).wrapTextInHttp;

@SuppressUnusedParameterWarning
restartPage(parameters:Map)->begin
  enqueueTask(SPECIAL_TASK_RESTART_SERVER,'');
  redirectTo(START_PAGE);
end;

@SuppressUnusedParameterWarning
restartSysPage(parameters:Map)->begin
  enqueueTask(SPECIAL_TASK_RESTART_SYSTEM,'');
  redirectTo(START_PAGE);
end;

@SuppressUnusedParameterWarning
shutdownSysPage(parameters:Map)->begin
  enqueueTask(SPECIAL_TASK_SHUTDOWN,'');
  redirectTo(START_PAGE);
end;

@SuppressUnusedParameterWarning
ping(parameters:Map)->wrapTextInHttp('pong');

mutable serveStatistics:=[].toMap;

logServeStats->
  begin
    print('+---------------------------------- - - -');
    print('| Time ',formatTime(systime));
    print('| Uptime ',formatTime('hh:nn:ss',time/(24*60*60)));
    print('+---------------------------------- - - -');
    local list:=
    serveStatistics
      .map({$x[0]|$x[1]})
      .sort(2)
      .trailing(10);
    local totScale:=100/list.getInner(2).max;
    local avgScale:=100/(list.getInner(2)/list.getInner(1)).max;
    local timeLines:=[];

    list:=
    list.each(entry,
       begin
         timeLines|=[[entry[2]         ,'s (tot)',"#".repeat(round(entry[2]         *totScale))],
                     [entry[2]/entry[1],'s (avg)',"#".repeat(round(entry[2]/entry[1]*avgScale))]];
         format("\nRequest %s\n      x %s",entry[0],entry[1]);
       end);
    timeLines:=timeLines.map({$x.join("\t")}).join("\n").formatTabs;

    list.each(l,
      print(l),
      print(timeLines[2*index]),
      print(timeLines[2*index+1]));
  end;

serveStatSection->begin
  local list:=
  serveStatistics
    .map({$x[0]|$x[1]})
    .sort(2)
    .reverseList;
  local totScale:=100/list.getInner(2).max;
  local avgScale:=100/(list.getInner(2)/list.getInner(1)).max;

  tag(
  tag('Statistics','h2')&
  list.each(entry,
    [tag(entry[0],'b'),'tot.',round(entry[2]         *1000)&'ms',"#".repeat(round(entry[2]         *totScale))],
    ['x'&entry[1]     ,'avg.',round(entry[2]/entry[1]*1000)&'ms',"#".repeat(round(entry[2]/entry[1]*avgScale))]).htmlTable,'div');
end;

private scriptStatusOnStartup:=inspectAll.getInner(0).sort.map({[$x,$x.fileStats]});
private currentScriptStatus  ->scriptStatusOnStartup.map({[$x[0],$x[0].fileStats==$x[1] ? 'up to date' : 'FILE IS CHANGED']});

@SuppressUnusedParameterWarning
adminPage(parameters:Map)->begin
  local environmentDiv:=
  tag(tag('Environment', 'h2')&getEnv.map({$x[0]=>$x[1].toString}).sort.htmlTable,'div');
  local setupDiv:=
  tag(tag('Configuration', 'h2')&htmlTable(
   [['SERVE_AT_IP'               ,SERVE_AT_IP],
    ['SERVE_AT_SOCKET'           ,SERVE_AT_SOCKET],
    ['MAX_HISTORY_SIZE'          ,MAX_HISTORY_SIZE          ],
    ['LOG_FOLDER'                ,LOG_FOLDER                ],
    ['START_WHEN_WORKLOAD_BELOW' ,START_WHEN_WORKLOAD_BELOW ],
    ['SAMPLES_FOR_WORKLOAD_CHECK',SAMPLES_FOR_WORKLOAD_CHECK]]
  ) ,'div');
  local pageMap:=
  tag(tag('Page map', 'h2')&htmlTable(
   PAGE_MAP.getInner(0).sort.map({htmlLink($x,$x)}).chunkIterator(4).toList
  ) ,'div');
  local mnhInfoDiv:=
  tag(tag('MNH info', 'h2')&htmlTable(mnhInfo.sort) ,'div');
  local scriptStatusDiv:=
  tag(tag('Script status', 'h2')&htmlTable(currentScriptStatus) ,'div');
  htmlPage('Server Administration',
   getHeadLinks
   &getStatusSection
   &htmlLink('<br>show server log<br>','showLog')
   &setupDiv
   &mnhInfoDiv
   &pageMap
   &scriptStatusDiv
   &environmentDiv
   &serveStatSection,false).wrapTextInHttp;
end;

PAGE_MAP:=[
  START_PAGE     => ::startPage,
  '/'            => ::startPage,
  ''             => ::startPage,
  ADMIN_PAGE     => ::adminPage,
  '/restart'     => ::restartPage,
  '/shutdown'    => ::shutdownSysPage,
  '/restartsys'  => ::restartSysPage,
  '/ping'        => ::ping,
  '/favicon.ico' => ::favicon,
  '/showlog' =>
    {begin
       isMap($0);
       redirectTo(encodeRequest('','displayFile',['filename'=>LOG_NAME].toMap));
     end},
//File related:------------------------------
  '/displayfile'=>
    {begin
       local filename:=$p['filename'];
       (isString(filename) AND fileExists(filename)
        ? serveFile(filename)
        : void) orElse redirectTo(START_PAGE);
     end},
  '/downloadfile'=> ::downloadFile,
  '/files'       => ::serveFileList,
//Task related:------------------------------
  ENQUEUE_PAGE   => ::enqueuePage,
  '/kill'        => ::killTask,
  '/dequeue'     => ::dequeueTask,
  '/addtask'     => ::addTask,
  '/forcestart'  => ::forceStart,
  '/movetofront' => ::moveToFront,
//Process related:---------------------------
  '/processes/kill' => ::killProcess,
  '/processes'      => ::processesPage
  ].toMap;

serve(M)->begin
  local path:=M['request','path'];
  local parameters:=path.extractParameters;
        path      :=path.extractPath.lower;
  local serveTime:=-time;

  local serveRoutine:=PAGE_MAP[path];
  serveRoutine.isVoid
  ? tPrint('Unhandled path: ',path) orElse return redirectTo(START_PAGE)
  : void;
  local response:= //log info and redirect to start page
  try(serveRoutine,[parameters],
  {begin
     tPrint('Unhandled path: ',path);
     $messages.map({'    '&$x.join("\t")}).join("\n").print;
     redirectTo(START_PAGE);
   end});
  serveTime+=time;
  serveStatistics[path]:=(serveStatistics[path] orElse [0,0])+[1,serveTime];
  response orElse fail;
end;

main->begin
  assertUniqueInstance;
  local sinceLastTaskStart:=0;
  startHttpServer(SERVE_AT_IP&':'&SERVE_AT_SOCKET,::serve,-1);
  loggingRunner.ensureServer;
  tPrint('server is up at ',SERVE_AT_IP&':'&SERVE_AT_SOCKET);

  while(!restartScheduled,begin
    logCpuUsage();
    (sinceLastTaskStart+=1)>=SAMPLES_FOR_WORKLOAD_CHECK AND isCpuAlmostIdle
      ? begin
          local task:=getNextTask;
          task in SPECIAL_TASKS
          ? specialTaskAction(task)
          : startExecution@task
            ? sinceLastTaskStart:=0
            : void;
          sleep(2);
        end
      : sleep(2);
  end);
  logServeStats;
  writeAllDataStores;
end;

@after
restart->begin
  shutdownTriggeredBySpecialTask==SPECIAL_TASK_RESTART_SERVER
  ? begin
      tPrint('Performing restart');
      local ipcIsUpAgain:=false;
      local numberOfTries:=0;
      while(!ipcIsUpAgain,begin
        execAsync(executor,[myPath]);
        sleep(1);
        ipcIsUpAgain:=isLoggingRunnerIpcServerRunning;
        assert((numberOfTries+=1)<60); //try for about 1 minute, then fail
      end);
    end
  : shutdownTriggeredBySpecialTask==SPECIAL_TASK_RESTART_SYSTEM
  ? begin
      tPrint('Restarting system');
      execPipeless('Shutdown.exe',['-r','-t','00']);
    end
  : shutdownTriggeredBySpecialTask==SPECIAL_TASK_SHUTDOWN
  ? begin
      tPrint('Shutting down system');
      execPipeless('Shutdown.exe',['-s','-t','00']);
    end
  : fail;
end;
