#!C:\bin\mnh.exe -convertPrintToLog -logDateFmt hh:mm:ss.zzz -logLocationLength 15 +log ?.log(1)
IP_AND_PORT:='127.0.0.1:80';
NULL_MARKER:='[[0]]';
mutable contents:=[];
contents_filename:=$1;
datastore cachedSecondaries:=[].toMap;

//RESOURCES:=begin
//  local resourceFileName:=changeFileExt(myPath,'.res');
//  fileExists(resourceFileName)
//  ? return resourceFileName.fileContents.decompress.deserialize
//  : void;
//  local r:=
//  ['/test/support/home.css','/build/mathquill.css','/build/mathquill.js','/test/support/jquery-1.7.2.js','/build/font/Symbola.woff2'].map((path)->path=>begin
//    local filename:='.'&path;
//    fileExists(filename)
//    ? filename.fileContents
//    : fail(path);
//  end).toMap;
//  writeFile(resourceFileName,r.serialize.compress);
//  r;
//end;

HEADER:=//!~<!DOCTYPE html><html>
<meta content="text/html; charset=UTF-8" http-equiv="content-type">
<head><!--meta name="viewport" content="width=624"-->
<title>mathEdit</title>
<link rel="stylesheet" type="text/css" href="build/mathquill.css">
</head>
<body><div id="body">
<script type="text/javascript">
function doPost(payload, reloadAfter) {
  var url = "http://~&IP_AND_PORT&//!~/mathPart";
  var xhr = new XMLHttpRequest();
  xhr.open("POST", url);
  xhr.setRequestHeader("Accept", "application/json");
  xhr.setRequestHeader("Content-Type", "application/json");
  xhr.onreadystatechange = function () {
    if (xhr.readyState === 4) {
      if (reloadAfter) window.location.reload(true);
    }};
  xhr.send(payload);
};

function postUpdate(index,data) {
  doPost(JSON.stringify({"index": index, "data": data}),false);
};

function postDropLine(index) {
  doPost(JSON.stringify({"index": index, "doDrop": true}),true);
};

function postAddNewLine() {
  doPost(JSON.stringify({"index": -1, "doAppend": true}),true);
};

function toggleVisibility(index) {
  var mathstyle = false;
  var x = document.getElementById('math'+index);
  var y = document.getElementById('text'+index);
  if (x.style.display  === 'none') {
    x.style.display  = 'block';
	y.style.display  = 'none';
	mathstyle = true;
  } else {
    x.style.display  = 'none';
	y.style.display  = 'block';
	mathstyle = false;
  }
  doPost(JSON.stringify({"index": index, "mathstyle": mathstyle}),false);
}
</script>
<table width=100%>~;
MIDDLE:=//!~<tr><td/><td><button onclick="postAddNewLine()">add line</button></td></tr>
</table>

<script type="text/javascript" src="test/support/jquery-1.7.2.js"></script>
<script type="text/javascript" src="build/mathquill.js"></script>
<script type="text/javascript">
MQ = MathQuill.getInterface(2);~;
FOOTER:=//!~</script></body></html>~;

page->begin
  table:=contents.each(c,
          '<tr><td><button onclick="toggleVisibility('&index&')">t/m</button></td><td>',
          '<span id="math'&index&'" style="'&(c[0] ? void : 'display:none; ')&'width:100%; align:left">'&c[1]&'</span>',
          '<input type="text" id="text'&index&'" style="'&(c[0] ? 'display:none; ' : void )&'width:100%" value="'&c[1]&'"></td>',
          '<td><button onclick="postDropLine('&index&')">-</button></td></tr>').join("\n");
  bindings:=map(contents.size=0 ? [] : [0..contents.size-1],(index)->
          "\ntext"&index&" = $('#text"&index&"').bind('keydown keypress', function() {"&
          '    var now = text'&index&'.val();'&
          '    mq'&index&'.latex(now);'&
          '    postUpdate('&index&',now);'&
          '});'&
          "\nmq"&index&" = MQ.MathField($('#math"&index&"')[0], {  handlers: {  edit: function() {if (!text"&index&".is(':focus')) {postUpdate("&index&",mq"&index&".latex()); text"&index&".val(mq"&index&".latex());}}}});"&
          (contents[index,0]==false ? void : "text"&index&".val(mq"&index&".latex());"))
          .join("\n");
  [HEADER,table,MIDDLE,bindings,FOOTER].join;
end;

WRITE_INTERVAL:=10; //seconds
backgroundUpdate->begin
  lastWrite:=scriptTime;
save;
  scriptTime>lastWrite+WRITE_INTERVAL
  ? begin
      contents_filename.writeFile(contents.serialize);
      log('Saved state:',"\n",contents.map(::toString).join("\n"));
      lastWrite:=scriptTime;
    end
  : void;
end;

handleRequest('GET','/page.html',body)->page;
handleRequest('POST','/mathPart',body)->begin
  payload:=try({parseJson(body,NULL_MARKER)});
  log('body   : ',body,"\n",
      'payload: ',payload);

  payload.isVoid ? return httpError : void;
  idx:=payload['index'];
  isInt(idx) ? void : return httpError;

  payload["doAppend"]==true
    ? contents||=[contents[contents.size-1,0] orElse true,'']
  : payload['mathstyle'].isBoolean AND 0<=idx<contents.size
    ? contents[idx,0]:=payload['mathstyle']
  : payload['data'].isString AND 0<=idx<contents.size
    ? contents[idx,1]:=payload['data']
  : payload['doDrop']==true AND 0<=idx<contents.size
    ? contents[idx]:=void
  : return httpError;

  async(::backgroundUpdate);
  wrapTextInHttp('');
end;

memoized warnOnce(method,path,body)->begin
  warn("method: ",method);
  warn("path  : ",path  );
  warn("body  : ",body  );
  httpError;
end;

memoized obtainFile(path)->begin
  result:=cachedSecondaries[path];
  result.isVoid ? void : return result.decompress;

  filename:='.'+path;
  fileExists(filename)
  ? begin
      result:=filename.fileContents.wrapTextInHttp(
        filename.extractFileExt=='.css' ? 'text/css' :
        filename.extractFileExt=='.js' ? 'application/javascript' : 'text');
      cachedSecondaries[path]:=result.compress;
      result;
    end
  : void;
end;

handleRequest('GET',path,body)->obtainFile(path) orElse warnOnce('GET',path,body);

handleRequest(method,path,body)->warnOnce(method,path,body);

main(path)->begin
  if fileExists(path)
  then contents:=fileContents(path).deserialize
  else if ask('File '&path&' does not exist. Do you want to create it?',['Y','N'])!='Y' then halt;

  serverIp:=startHttpServer(IP_AND_PORT,(request:Map)->handleRequest(request['request','method'],request['request','path'],request['body']) ,600);
  print('Now running at ',serverIp);
  openUrl('http://'&serverIp&'/page.html');
  //localAsync({begin
  //  ask('Press q to quit',['q']);
  //  writeAllDataStores;
  //  sleep(1);
  //  halt;
  //end});
  while isServerRunning(serverIp) do sleep(10);
end;

page.print;

