//*Overloaded getName to work with any type:
private getName(s:Scalar,isMapEntry      )->s.toString;
private getName(l       ,isMapEntry=false)->'\';
private getName(l       ,isMapEntry=true )->l.head;
//*Overloaded getChildren to work with any type:
private getChildren(s:Scalar,isMapEntry      )->[];
private getChildren(l       ,isMapEntry=false)->l;
private getChildren(l       ,isMapEntry=true )->l.trailing;

private treePrint(Tree,indent,isMapEntry:Boolean,last:Boolean)->begin
  print(indent,last ? '\--' : '+--',Tree.getName(isMapEntry));
  local newIndent:=last
                   ? indent+'   '
                   : indent+'|  ';
  local children:=Tree.getChildren(isMapEntry);
  children.each(child,child.treePrint(newIndent,Tree.isMap,index=children.size-1));
end;

treePrint(Tree)->begin
  print(Tree.getName(false));
  local children:=Tree.getChildren(false);
  children.each(child,child.treePrint('',Tree.isMap,index=children.size-1));
  void;
end;


folderStructure(rootName,rootPath)->
  [rootName,folders(rootPath&'/*').map({folderStructure($x.extractFileName,$x)}).{$L==[] ? void : $L}].{$x.isStringList(1) ? $x[0] : $x};

folderStructure(root)->folderStructure(root,root);

main(path)->folderStructure(path).treePrint;
