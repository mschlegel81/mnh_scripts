#!C:\bin\mnh.exe -quiet -convertPrintToLog -logDateFmt hh:mm:ss -logLocationLength 15 +log stdOut(1)
ducktype Fingerprint(L:NumericList(3))->L[0]>=-1 AND
                         L[1].isInt AND L[1]>=-1 AND
                         L[2].isInt AND L[2]>=-1;
ducktype FingerprintMap       (M:Map)->M.getInner(0).isStringSet AND M.getInner(1).each(e,e.isFingerprint ,AND);
ducktype FingerprintContentMap(M:Map)->M.getInner(0).isStringSet AND M.getInner(1).each(e,e.isList(2) and e[0].isFingerprint and e[1].isExpression(0),AND);
ducktype ContentMap(M:Map)->M.getInner(0).isStringSet AND M.getInner(1).isStringCollection;

ducktype BackupConfig(M:Map(5))->M['backupNameBase'].isString  AND
                                 M['root']          .isString  AND
                                (M['basePattern']   .isString OR
                                 M['basePattern']   .isStringList)  AND
                                 M['recurse']       .isBoolean AND
                                 M['matcher']       .isExpression(1);
FILE_EXTENSION:='.ib';
MAX_CHUNK_SIZE:=500*1024²;//=500MiB
MAX_NUMBER_OF_DELTAS:=50;
DELETED:=[-1,-1,-1].toFingerprint;
sortableSystime->formatTime('yyyymmddhhnnss',systime);

private getInfo(filename:String)->begin
  local info:=filename.fileInfo;
  filename=>(info['time']| fileStats(info['path']).trailing(2)).toFingerprint;
end;

doWrite(filename:String,fingerprintMap:FingerprintMap,contentMap:ContentMap)->begin
  log('Writing ',filename);
  writeFile(filename,[fingerprintMap,contentMap.serialize(true)].serialize(false)).assert(filename,' could not be written');
end;

private writeState(getNextFilename:Expression,rootPath:String,state:FingerprintMap)->begin
  local fingerprintMap:=[].toMap;
  local contentMap    :=[].toMap;
  local sizeTally:=0;
  state.sort.sort((a,b)->a[0].extractFileExt<=b[0].extractFileExt)
  .each(entry,begin
     local relativeName:=relativeFileName(rootPath,entry[0]);
     entry[1]==DELETED ? void : begin
       assert(entry[1]==getInfo(entry[0])[1],entry[0],' has changed');
       contentMap    [relativeName]:=fileContents(entry[0]);
     end;
     fingerprintMap[relativeName]:=entry[1];
     (sizeTally+=entry[1,1]) > MAX_CHUNK_SIZE
     ? begin
         assert(fingerprintMap.isFingerprintMap);
         assert(contentMap.isContentMap);
         doWrite(getNextFilename(),fingerprintMap,contentMap);
         fingerprintMap:=[].toMap;
         contentMap    :=[].toMap;
         sizeTally:=0;
       end
     : void;
   end);
  fingerprintMap.size>0
  ? doWrite(getNextFilename(),fingerprintMap,contentMap)
  : void;
end;

private contentMapWrapper(s:String)->(key)->begin
  local contentMap:=s.deserialize;
save;
  contentMap[key];
end;
private apply(e:Expression,key:String)->{e(key)};

private readState(backupFileName:String)->begin
  local data:=backupFileName.fileContents.deserialize;
  local getContent:=contentMapWrapper(data[1]);
  data[0].each(entry,begin
    entry[0]=>[entry[1],apply(getContent,entry[0])];
  end).toMap;
end;

private readIndex(backupFileName:String)->backupFileName.fileContents.deserialize[0];

fileState(rootPath:String,basePattern:String,recurse:Boolean,matcher:Expression(1))->
  allFiles(rootPath,basePattern,recurse)
    .filter(matcher)
    .pMap(::getInfo)
    .toMap
    .toFingerprintMap;

formatSize(sizeInBytes:Int)->
  sizeInBytes<9999     ?  sizeInBytes           &"\vB" :
  sizeInBytes<10238976 ? (sizeInBytes div 1024 )&"\vkiB" :
                         (sizeInBytes div 1024²)&"\vMiB";

stateDelta_listing(localState:FingerprintMap,backupState:FingerprintMap,rootPath:String)->begin
  local localRelative:=localState.map((entry)->relativeFileName(rootPath,entry[0])=>entry[1]).toMap;

  union(localRelative.getInner(0),
        backupState.getInner(0))
  .sort
  .pMap((key)->begin
     local L:=localRelative[key] orElse DELETED;
     local B:=backupState  [key] orElse DELETED;
     L==B OR L[2]==B[2] ? void : begin
       local messages:=
       (L==DELETED AND !(B==DELETED)) ? ['missing locally'] :
       (B==DELETED AND !(L==DELETED)) ? ['missing in backup'] :
       [ L[0]<B[0] ? format("backup is newer\t(%s\t<\t%s)",formatTime(L[0]),formatTime(B[0])) : void,
         L[0]>B[0] ? format(" local is newer\t(%s\t>\t%s)",formatTime(L[0]),formatTime(B[0])) : void,
         L[1]<B[1] ? format("backup is larger\t(\v%s\t<\t%s\v)",formatSize(L[1]),formatSize(B[1])) : void,
         L[1]>B[1] ? format(" local is larger\t(\v%s\t>\t%s\v)",formatSize(L[1]),formatSize(B[1])) : void];
       join(key|messages,"\t");
     end;
   end)
  .agg(|);
end;


stateDelta(previous:FingerprintContentMap,current:FingerprintMap,rootPath:String)->begin
  local M:=previous                                      //Deleted entries:
    .map((entry)->entry[1,0]==DELETED ? void : entry[0]) // - not previously deleted
    .minus(relativeFileName(rootPath,current.getInner(0)))   // - not contained in current state
    .map((filename)->(rootPath&'/'&filename)=>DELETED)
    .toMap;

  current.each(entry,
    begin
      (previous[relativeFileName(rootPath,entry[0]),0] orElse DELETED)[[1,2]]==entry[1,[1,2]] //Ignore time, only consider size and hash
      ? void
      : M[entry[0]]:=entry[1];
    end);
  M;
end;

stateDelta(previous:FingerprintMap,current:FingerprintContentMap,rootPath:String, allowDeleting:Boolean)->begin
  local M:=allowDeleting
           ? previous                                      //Deleted entries:
             .map((entry)->entry[1,0]==DELETED ? void : entry[0]) // - not previously deleted
             .minus((rootPath&'/'&current.getInner(0)))   // - not contained in current state
             .map((filename)->filename=>[DELETED,{''}])
             .toMap
           : [].toMap;
  current.each(entry,
    begin
      (previous[rootPath&'/'&entry[0]] orElse DELETED)==entry[1,0] OR (!allowDeleting AND previous[rootPath&'/'&entry[0],0].orElse(-Inf)>entry[1,0,0])
      ? void
      : M[rootPath&'/'&entry[0]]:=entry[1];
    end);
  M;
end;

doBackup(config:BackupConfig)->begin
  log('Looking for changes in ',config['root']);
  local backupPattern:=format('%s_%%s%s',config['backupNameBase'],FILE_EXTENSION);
  local previousBackups:=backupPattern.format('*').files().sort;
  local nextBackup:=rangeGenerator(sortableSystime.toInt).map((k)->backupPattern.format(k));
  local currentState:=fileState(config['root'],
                                config['basePattern'],
                                config['recurse'],
                                config['matcher']);
  local allWriteFutures:=[];
  log('  Computed state: ',currentState.size,' (',currentState.typeOf,')');
  previousBackups.size=0
  ? begin
      log('  Creating initial backup');
      printf('    %s',currentState.getInner(0).sort);
      allWriteFutures|=writeState(nextBackup,config['root'],stateDelta([].toMap.toFingerprintContentMap,currentState,config['root']));
    end
  : begin
      local previousDeltas:=previousBackups.map({$b.readState});

      local allMerged:=begin
        local s:=[].toMap;
        previousDeltas.each(delta,s:=delta.mergeMaps(s,::orElse));
      end;
      local increment:=allMerged.each(prev,stateDelta(prev,currentState,config['root']));

      while(increment.size>1 AND
            increment[increment.size-1]==increment[increment.size-2],
            increment:=increment.leading);
      local obsoleteBackups:=previousBackups.tail(increment.size);
      previousBackups      :=previousBackups.head(increment.size);
      increment:=increment.trailing;
      log('  Delta ready: ');
      printf('    %s',increment.getInner(0).sort);

      increment.size=0
      ? return log('  Not writing zero increment')
      : void;

      obsoleteBackups.map({log('  ',$f,' is obsolete') orElse deleteFile($f)});

      previousBackups.size>MAX_NUMBER_OF_DELTAS
      ? begin
          log('  Max number of deltas exceeded. Consolidating to single backup ',nextBackup);
          previousBackups.each(f,f.deleteFile);
          allWriteFutures|=nextBackup.writeState(config['root'],currentState);
        end
      : allWriteFutures|nextBackup.writeState(config['root'],increment);
    end;
  allWriteFutures;
end;

doRestore(config:BackupConfig, allowDeleting:Boolean)->begin
  local allBackups:=files(format('%s_*%s',config['backupNameBase'],FILE_EXTENSION)).sort;
  allBackups.size>0 ? void :  return warn('No backups to restore found!');
  log('Restoring to ',config['root']);
  local deltaToApply:=
  fileState(config['root'],
            config['basePattern'],
            config['recurse'],
            config['matcher'])
  .stateDelta(
    allBackups
      .each(backupFile,
             backupFile.readState,
             aggregator({$1.mergeMaps($0,::orElse)}))
      .filter({config['matcher']($x[0])})
      .toFingerprintContentMap,config['root'],allowDeleting);

  deltaToApply.each(entry,begin
    local filename:=expandedFileName(entry[0]);
    entry[1,0]==DELETED
    ? begin
        assert(allowDeleting);
        log('  Deleting ',filename,' ',deleteFile(filename) ? 'o.k.' : 'FAILED');
      end
    : begin
        local fileAge:=entry[1,0,0];
        local fileContents:=entry[1,1]();
        log('  Writing ',filename,' ',writeFile(filename,fileContents) AND setFileDate(filename,fileAge) ? 'o.k.' : 'FAILED');
      end;
  end);
end;

listDelta(config:BackupConfig)->begin
  local allBackups:=files(format('%s_*%s',config['backupNameBase'],FILE_EXTENSION)).sort;
  print('Listing delta for ',config['root']);
  local deltaToApply:=
  fileState(config['root'],
            config['basePattern'],
            config['recurse'],
            config['matcher'])
  .stateDelta_listing(
    allBackups
      .each(backupFile,
             backupFile.readIndex,
             aggregator({$1.mergeMaps($0,::orElse)}))
      .orElse([].toMap)
      .filter({config['matcher']($x[0])})
      .toFingerprintMap,config['root']);
  printf('%s',deltaToApply);
end;

USE incrementalBackup_config;
@SuppressUnusedWarning
StartupAssertion:=ALL_CONFIGS.each(config,assert(config.isBackupConfig,'Invalid config: ',config));

filteredConfigs()->ALL_CONFIGS;
filteredConfigs(...)->begin
  local f:=union@((...).map((r)->ALL_CONFIGS[ALL_CONFIGS.getInner('root').matches(r)]));
  f.size==0
  ? ALL_CONFIGS
  : f.sort;
end;

copyIfDifferent(srcAndDest:StringList(2))->begin
//  local stats:=srcAndDest.fileStats;
//  stats[0]==stats[1]
  local srcInfo :=fileInfo(srcAndDest[0]);
  local destInfo:=fileInfo(srcAndDest[1]);

  srcInfo['size']==destInfo['size'] AND
  abs(srcInfo['time']-destInfo['time'])<1/(24*60)
  ? void
  : copyFile@srcAndDest
    ? note('Copied ',srcAndDest.join(" -> "))
    : warn('Copy failed ',srcAndDest.join(" -> "));
end;

syncFolders(srcFolder,destFolder,allowDeletion:Boolean)->begin
  log('Starting sync ',srcFolder,'->',destFolder);
  local srcFiles :=replace('!'&srcFolder.allFiles('*').expandedFileName,
                           '!'&srcFolder.&('/').expandedFileName,'');
  local destFiles:=replace('!'&destFolder.allFiles('*').expandedFileName,
                           '!'&destFolder.&('/').expandedFileName,'');
  //delete files only contained in dest:
  allowDeletion
  ? destFiles.minus(srcFiles).map((name)->expandedFileName(destFolder&'/'&name)).map((file)->note('Deleting: ',file) orElse deleteFile(file))
  : void;
  //copy the rest:
  srcFiles.map((name)->expandedFileName([srcFolder,destFolder]&'/'&name)).map(::copyIfDifferent);
  log('Finished sync ',srcFolder,'->',destFolder);
end;

//*Backup and sync...
main->begin
  main('backup');
  main('sync');
end;

main('sync')->begin
  assertUniqueInstance;
  local mounted:=driveInfo;
  SYNC_CONFIGS.pEach(cfg,begin
    local serial      :=cfg['drive_serial'] orElse fail;
    local description :=cfg['drive_description'] orElse fail;
    local targetFolder:=cfg['target_folder'] orElse fail;
    targetFolder:=mounted.map((info)->info[1,'serial']==serial ? info[0]&':'&targetFolder&'\' : void).agg(orElse);
    targetFolder.isVoid ? warn(description,' is not mounted') : begin
      syncFolders('ib',targetFolder&'ib',true);
      (myPath|inspect['uses'].getInner(1)).each(scriptToCopy,
      copyIfDifferent(scriptToCopy=>targetFolder & scriptToCopy.extractFileName));
    end;
  end);
end;

//*Reverse sync
main('sync','r')->begin
  assertUniqueInstance;
  local mounted:=driveInfo;
  SYNC_CONFIGS.each(cfg,begin
    local serial      :=cfg['drive_serial'] orElse fail;
    local description :=cfg['drive_description'] orElse fail;
    local sourceFolder:=cfg['target_folder'] orElse fail;
    sourceFolder:=mounted.map((info)->info[1,'serial']==serial ? info[0]&':'&sourceFolder&'\' : void).agg(orElse);
    sourceFolder.isVoid ? warn(description,' is not mounted') : begin
      syncFolders(sourceFolder&'ib','ib',false);
    end;
  end);
end;

//*Backup files; give an additional matcher to select one backup set
main('delta',...)->begin
  myPath.extractFileDirectory.changeDirectory;
  map(filteredConfigs@...,::listDelta);
end;

//*Backup files; give an additional matcher to select one backup set
main('backup',...)->begin
  assertUniqueInstance;
  myPath.extractFileDirectory.changeDirectory;
  map(filteredConfigs@...,::doBackup);
end;

//*Restore files; give an additional matcher to select one backup set
main('restore',...)->begin
  assertUniqueInstance;
  myPath.extractFileDirectory.changeDirectory;
  map(filteredConfigs@...,(config)->doRestore(config,true));
end;

//*Restore files without deleting missing files and without overwriting newer files
main('merge',...)->begin
  assertUniqueInstance;
  myPath.extractFileDirectory.changeDirectory;
  map(filteredConfigs@...,(config)->doRestore(config,false));
end;

//*List currently backed up files (it is best to redirect the output into a text file)
main('list',...)->(filteredConfigs@...).each(config,begin
  local allBackups:=files(format('%s_*%s',config['backupNameBase'],FILE_EXTENSION)).sort;
  printf('%s',
  allBackups
    .each(backupFile,note('Reading ',backupFile),
           backupFile.readIndex,
           aggregator({$1.mergeMaps($0,::orElse)}))
    .orElse([])
    .filter((entry)->config['matcher'](entry[0]))
    .sort
    .map((entry)->entry[1]==DELETED
                  ? void
                  : format("%s\t%s\t\%s\t%x",entry[0],formatTime(entry[1,0]),formatSize(entry[1,1]),entry[1,2])));
end,|);


//*Create a consolidated backup of the current state; previous backups will be deleted
main('consolidate',...)->(filteredConfigs@...).each(config,begin
  log('Looking for changes in ',config['root']);
  local backupPattern:=format('%s_%%s%s',config['backupNameBase'],FILE_EXTENSION);
  local previousBackups:=backupPattern.format('*').files().sort;
  local nextBackup:=rangeGenerator(sortableSystime.toInt).map((k)->backupPattern.format(k));
  local currentState:=fileState(config['root'],
                                config['basePattern'],
                                config['recurse'],
                                config['matcher']);
  log('  Computed state: ',currentState.size,' (',currentState.typeOf,')');
  log('  Creating consolidated backup');
  printf('    %s',currentState.getInner(0).sort);
  writeState(nextBackup,config['root'],stateDelta([].toMap.toFingerprintContentMap,currentState,config['root']));
  previousBackups.map(::deleteFile);
end);


