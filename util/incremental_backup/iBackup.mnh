#!C:\bin\mnh.exe
USE sync_util,iBackup_config,backup_util;

@SuppressUnusedWarning=startup hook
ensure_working_dir:=begin
  assertUniqueInstance;
  myPath.extractFileDirectory.changeDirectory;
end;

//*Backup and sync...
main->begin
  main('backup');
  main('sync');
end;

fileIsRelevantForSync    (filename)->(filename.extractFileExt='.mnh' AND filename.extractFileNameOnly<>'iBackup_config') OR filename.extractFileExt in [DATA_EXTENSION,INDEX_EXTENSION] AND filename.hasPrefix(ALL_CONFIGS.getInner('backupNameBase')).agg(OR);
fileIsRelevantForFullSync(filename)->(filename.extractFileExt='.mnh' AND filename.extractFileNameOnly<>'iBackup_config') OR filename.extractFileExt in [DATA_EXTENSION,INDEX_EXTENSION];

syncPush(isRelevant:Expression(1))->begin
  local mounted:=driveInfo;
  copyFile(myPath,BACKUP_ROOT_DIR&'/'&myPath.extractFileName);
  SYNC_CONFIGS.pEach(cfg,begin
    local serial      :=cfg['drive_serial'] orElse fail;
    local description :=cfg['drive_description'] orElse fail;
    local targetFolder:=cfg['target_folder'] orElse fail;
    targetFolder:=mounted.map((info)->info[1,'serial']==serial ? info[0]&':'&targetFolder&'\' : void).agg(orElse);
    BACKUP_ROOT_DIR == targetFolder ? void :
    targetFolder.isVoid ? printWithTime(description,' is not mounted') : begin
      syncFlat(BACKUP_ROOT_DIR,targetFolder&BACKUP_ROOT_NAME,false,isRelevant);
    end;
  end);
  FTP_SYNC_CONFIGS.each(cfg,begin
    syncToFTP(BACKUP_ROOT_DIR,cfg['host'],cfg['user'],cfg['pass'],cfg['path']&'/'&BACKUP_ROOT_NAME,false,isRelevant);
  end);
  afterSync;
end;

syncPull(isRelevant:Expression(1))->begin
  local mounted:=driveInfo;
  SYNC_CONFIGS.each(cfg,begin
    local serial      :=cfg['drive_serial'] orElse fail;
    local description :=cfg['drive_description'] orElse fail;
    local sourceFolder:=cfg['target_folder'] orElse fail;
    sourceFolder:=mounted.map((info)->info[1,'serial']==serial ? info[0]&':'&sourceFolder&'\' : void).agg(orElse);
    BACKUP_ROOT_DIR == sourceFolder ? void :
    sourceFolder.isVoid ? printWithTime(description,' is not mounted') : begin
      syncFlat(sourceFolder&BACKUP_ROOT_NAME,BACKUP_ROOT_DIR,false,isRelevant);
    end;
  end);
  FTP_SYNC_CONFIGS.each(cfg,begin
    syncFromFTP(cfg['host'],cfg['user'],cfg['pass'],cfg['path']&'/'&BACKUP_ROOT_NAME,BACKUP_ROOT_DIR,false,isRelevant);
  end);
end;

main('sync')->syncPush(::fileIsRelevantForSync);

//*Reverse sync
main('sync','r')->syncPull(::fileIsRelevantForSync);

//*Backup files; give an additional matcher to select one backup set
main('delta',...)->map(filteredConfigs@...,::listDelta);

filteredConfigs()->ALL_CONFIGS;
filteredConfigs(...)->begin
  local f:=union@((...).map((r)->ALL_CONFIGS[ALL_CONFIGS.getInner('root').matches(r) or ALL_CONFIGS.getInner('backupNameBase').matches(r)]));
  f.size==0
  ? ALL_CONFIGS
  : f.sort;
end;

//*Backup files; give an additional matcher to select one backup set
main('backup',...)->map(filteredConfigs@...,::createBackup);

//*Restore files; give an additional matcher to select one backup set
main('restore',...)->map(filteredConfigs@...,(config)->restoreBackup(config,true));

//*Restore files without deleting missing files and without overwriting newer files
main('merge',...)-> map(filteredConfigs@...,(config)->restoreBackup(config,false));

//*List currently backed up files (it is best to redirect the output into a text file)
main('list',...)->map(filteredConfigs@...,::listDelta);

//*Show diff between file in backup and current state
main('diff',filename)->begin
  local diffListing:=ALL_CONFIGS.each(config,fileDiff(config,expandedFileName(filename), 3),orElse);
  diffListing.isVoid ? printWithTime('File could not be found in backups') : printf('%s',diffListing);
end;

//*Show history of file
main('history',filename)->begin
  local diffListing:=ALL_CONFIGS.each(config,fileHistory(config,expandedFileName(filename), 3),orElse);
  diffListing.isVoid ? printWithTime('File could not be found in backups') : printf('%s',diffListing);
end;

//*Revert single file to the latest backup
main('revert',filename)->begin
  local diffListing:=ALL_CONFIGS.each(config,fileRevert(config,expandedFileName(filename), true, ''),orElse);
  diffListing.isVoid ? printWithTime('File could not be found in backups') : printf('%s',diffListing);
end;

//*Revert single file to a selected backup
main('revert',filename,revision)->begin
  local diffListing:=ALL_CONFIGS.each(config,fileRevert(config,expandedFileName(filename), false, revision),orElse);
  diffListing.isVoid ? printWithTime('File could not be found in backups') : printf('%s',diffListing);
end;

//*Pull all remote repositories and push all to distribute copies
main('distribute')->begin
  syncPull(::fileIsRelevantForFullSync);
  syncPush(::fileIsRelevantForFullSync);
end;

//*If all goes wrong, call this one...
main('emergency_restore')->begin
  syncPull(::fileIsRelevantForFullSync);
  emergencyRestore(ALL_CONFIGS);
end;

@after
checkBackupOfSelf->begin
  local backup:=BACKUP_ROOT_DIR&'/'&myPath.extractFileName;
  local color:=(text:String,delta)-> delta=0 ? text : (delta>0 ? #27'[92m' : #27'[91m')&text&#27'[0m';
  backup.fileExists and !(backup.fileStats==myPath.fileStats)
  ? begin
      local I:=[backup,myPath].fileInfo.map((info)->[info['path'],info['size'],info['time']]);
      print('Check a backup of self:');
      print(I[0,0],"\t",color(formatSize(I[0,1]),I[0,1]-I[1,1]),"\t",color(formatTime(I[0,2])              ,I[0,2]-I[1,2]),"\n",
            I[1,0],"\t",color(formatSize(I[1,1]),I[1,1]-I[0,1]),"\t",color(formatTime(I[1,2])              ,I[1,2]-I[0,2]));
    end
  : void;
end;
