USE sync_util;
//*A type containing [size, hash, time] of a file
ducktype FingerPrint(I:List(3))->I[0].isInt and I[1].isInt and I[2].isNumeric;
type BackupConfig(M:Map(5))->M['backupNameBase'].isString  AND
                             M['root']          .isString  AND
                            (M['basePattern'].isString OR M['basePattern'].isStringList)  AND
                             M['recurse']       .isBoolean AND
                             M['matcher']       .isExpression(1);
ducktype ContentMap(M:Map)->M.getInner(0).isStringSet AND M.getInner(1).each(value,value.isList(2) AND value[0].isFingerPrint AND value[1].isExpression(0),AND);

DELETED_FINGERPRINT:=[0,-1,0];
DELETED_ENTRY:=[DELETED_FINGERPRINT,()->''];
MAX_CHUNK_SIZE:=500*1024Â²;
BACKUP_ROOT_NAME:='iBackup';
BACKUP_ROOT_DIR:=myPath.extractFileDirectory;

makeConfig(backupNameBase:String)->['backupNameBase'=>backupNameBase,
                                    'root'=>'emergency_restore_'&backupNameBase,
                                    'basePattern'=>'*.*',
                                    'recurse'=>true,
                                    'matcher'=>(x)->true].toMap.toBackupConfig;

datastore cached_fingerprints:=[].toMap;

obtainFingerprint(filename:String)->begin
  fromCache:=cached_fingerprints[filename];
  trueTime :=fileInfo(filename)['time'];

  fromCache.isVoid OR fromCache.trailing<>trueTime
  ? cached_fingerprints[filename]:=filename.fileStats.trailing(2)|trueTime
  : fromCache;
end;

localFolderContents(config:BackupConfig)->begin
  trueRoot:=expandedFileName(config['root']);
  allFiles(trueRoot,
           config['basePattern'],
           config['recurse'])
  .filter(config['matcher'])
  .map((filePath)->relativeFileName(trueRoot,filePath)=>[obtainFingerprint(filePath),()->fileContents(filePath)])
  .toMap;
end;

writeContents(baseName:String,contents:ContentMap)->begin
  //Sorting the files by extension usually results in slightly improved compression
  asList:=contents.sort.sort((entry)->entry[0].extractFileExt).toList;
  //Something may has changed. Checkout the actual contents...
  asList:=asList.map((key,value)->begin
    actualContent:=value[1]();
    actualHash:=[actualContent.byteLength,actualContent.sha256];
    value[0]==DELETED_FINGERPRINT OR actualHash==value[0].head(2)
    ? [key,[value[0],actualContent]]
    : begin
        printWithTime("\e[93;3m",key," is excluded because of fingerprint mismatch\e[0m");
        cached_fingerprints:=[].toMap;
        writeDataStores;
        void;
      end;
  end);
  fileData       :=asList.map((key,value)->     value[1]);
  metadataSection:=asList.map((key,value)->[key,value[0]]);

  fileData_S:=fileData       .serialize(true,false);
  metaData_S:=metadataSection.serialize(true,false);

  ok:=writeFile(baseName.changeFileExt(INDEX_EXTENSION),metaData_S) AND
      writeFile(baseName.changeFileExt(DATA_EXTENSION ),fileData_S);
  info:=ok
        ? fileInfo(baseName&'*').getInner('size').agg(+).formatSize
        : '';
  printWithSuccess(['  Writing '&baseName&' containing '&contents.size&' files of '&formatSize(contents.getInner(1).getInner(0).getInner(0).agg(+)),info],ok);
end;

private contentListWrapper(filePath:String)->(index:Int)->begin
  contentList:=filePath.fileContents.deserialize;
save;
  contentList[index];
end;
private apply(e:Expression,key:Int)->()->e(key);

backupFileToContentMap(backupFilePath:String)->begin
  metadataSection:=deserialize(backupFilePath.changeFileExt(INDEX_EXTENSION).fileContents);
  wrapper        :=contentListWrapper(backupFilePath.changeFileExt(DATA_EXTENSION));
  metadataSection.each(entry,
    entry[0]=>[entry[1],apply(wrapper,index)]).toMap;
end;

chunkContents(contents:ContentMap)->begin
  outputChunks:=[];
  currentChunk:=[];
  chunkSize:=0;
  contents.sort.sort((entry)->entry[0].extractFileExt).each(entry,begin
    (chunkSize + entry[1,0,0] > MAX_CHUNK_SIZE) AND (currentChunk.size>0)
    ? begin
        outputChunks||=currentChunk.toMap;
        currentChunk:=[entry];
        chunkSize:=entry[1,0,0];
      end
    : begin
        currentChunk||=entry;
        chunkSize+=entry[1,0,0];
      end;
  end,trailing);
  outputChunks||=currentChunk.toMap;
  outputChunks;
end;

dropDeletes(delta:ContentMap)->delta.filter((key,value)->!(value[0]==DELETED_FINGERPRINT));
filterMatchedFiles(content:ContentMap,config:BackupConfig)->content.filter((key,value)->config['matcher'](expandedFileName(config['root']&'/'&key))).toMap.toContentMap;

//*Returns a content map containing all entries of Target where
//* - no corresponding entry in Current exists
//* - the fingerprint heads (size and hash) differ
//*Additionally entries which are in Current and not in Target will be added as DELETED_ENTRY = {DELETED_ENTRY}
contentsDelta(Current:ContentMap,Target:ContentMap)->begin
  newOrChanged:=Target.pFilter((key,value)->Current[key].isVoid OR !(Current[key,0].head(2)==value[0].head(2))).toMap;
  deleted:=Current.dropDeletes.getInner(0).minus(Target.getInner(0)).map((key)->key=>DELETED_ENTRY).toMap;
  mergeMaps(newOrChanged,deleted,::orElse);
end;

currentMonth->formatTime('mm',systime);
backupNameToMonth(backupName:String)->begin
  lastDatePart:=backupName.replace(BACKUP_ROOT_DIR,'').matchComposite('\d{8}').trailing[0];
  assert(!lastDatePart.isVoid);
  formatTime('mm',parseTime('yyyymmdd',lastDatePart));
end;

//*Returns a tuple [listOfBackups:StringList,fullBackupRequired:Boolean]
findBackups(config:BackupConfig)->findBackups(config,false);

findBackups(config:BackupConfig, includeBackupsBeforeLastFullBackup:Boolean)->begin
  fileList:=[INDEX_EXTENSION,DATA_EXTENSION].each(ext,
             regex.replace(files(f'{BACKUP_ROOT_DIR}/{config["backupNameBase"]}*{ext}'),'\'&ext&'$',''));
  orphans:=
  sort(fileList[0].minus(fileList[1]).toList&INDEX_EXTENSION |
       fileList[1].minus(fileList[0]).toList&DATA_EXTENSION);
  orphans.size=0 ? void : printf("  \e[91;5m  Orphaned file %s\e[0m",orphans);
  fileList:=intersect(fileList[0],fileList[1]).sort;
  fileList.size==0
  ? return [[],true] :
  indexOfLastFullBackup:=
    includeBackupsBeforeLastFullBackup
    ? 0
    : indexOf(fileList.matches(FULL_BACKUP_STEM_SUFFIX&'$')).max;
  indexOfLastFullBackup.isVoid
  ? [[]                                  ,true]
  : [fileList.tail(indexOfLastFullBackup), (backupNameToMonth(fileList[indexOfLastFullBackup])<>currentMonth) AND (indexOfLastFullBackup<fileList.size-20)];
end;

listAll(config:BackupConfig)->begin
  root:=config['root'];
  printWithTime('Listing contents for folder ',root.expandedFileName,' (',config['backupNameBase'],')');
  BLUE:="\e[94m";
  RESET:="\e[00m";
  RED:="\e[91m";
  matcher:=config['matcher'];
  printf('%s',
  findBackups(config,true)[0]
    .map(::backupFileToContentMap)
    .agg((older,newer)->mergeMaps(newer,older,::orElse))
    .orElse([].toMap)
    .dropDeletes
    .sort
    .map((key,value)->
      expandedFileName(root&'/'&key).matcher
      ? f"{key}\t{BLUE}{value[0,0].formatSize}\t{RESET}{formatTime(value[0,2])}\t{BLUE}%{value[0,1]}x{RESET}"
      : f"{key}\t{RED}{value[0,0].formatSize}\t{RED}{formatTime(value[0,2])}\t{RED}%{value[0,1]}x{RESET}"
      ));
end;


backupFilenameGenerator(config:BackupConfig,full:Boolean)->toIterableExpression({begin
  prefix:=BACKUP_ROOT_DIR&'/'&config['backupNameBase']&'_'&formatTime('yyyymmdd',systime)&'_';
  counter:=formatTime('hhnn',systime).toInt;
  suffix:=full ? FULL_BACKUP_STEM_SUFFIX : '';
  fname:='';
  while fileExists(fname:=f'{prefix}%{counter}4.4d{suffix}.{INDEX_EXTENSION}') do counter+=1;
save;
  fname:=f'{prefix}%{counter}4.4d{suffix}';
  suffix:='';
  counter+=1;
  fname;
end});

createFullBackup(config:BackupConfig)->begin
  printWithTime('Creating a full backup for ',config['root'],' (',config['backupNameBase'],')');
  zip(backupFilenameGenerator(config,true),
      localFolderContents(config).chunkContents)
  .map(::writeContents)
  .agg(and);
end;

createBackup(config:BackupConfig)->begin
  printWithTime('Creating backup for ',config['root'],' (',config['backupNameBase'],')');
  backups:=findBackups(config);
  requireFullBackup:=backups[1];
  backupState:=backups[0]
    .map(::backupFileToContentMap)
    .agg((older,newer)->mergeMaps(newer,older,::orElse)) orElse [].toMap;
  localState:=localFolderContents(config);
  delta:=contentsDelta(backupState,localState).filterMatchedFiles(config);
  delta.size=0
  ? (printWithTime('  Backup for ',config['root'],' (',config['backupNameBase'],') is up to date'))
  : requireFullBackup
    ? createFullBackup(config)
    : begin
        zip(backupFilenameGenerator(config,false),
            delta.chunkContents)
        .map(::writeContents)
        .agg(and);
      end;
end;

writeFileWithAge(filename:String,contentGetter:Expression(0),fingerprint:FingerPrint)->begin
  content:=contentGetter();
  info:=formatSize(content.byteLength);
  fingerprint[[0,1]]==[content.byteLength,content.sha256]
  ? printWithSuccess(['Writing '&filename,info],
                     writeFile(filename,contentGetter()) AND
                     setFileDate(filename,fingerprint[2]))
  : printWithTime("\e[91;5mBackup of ",filename," is corrupted - hash/size mismatch!\e[0m");
end;

restoreBackup(config:BackupConfig, allowDelete:Boolean)->begin
  printWithTime(allowDelete ? 'Restoring' : 'Merging',' backup for ',config['root'],' (',config['backupNameBase'],')');
  backupState:=findBackups(config)[0]
    .map(::backupFileToContentMap)
    .agg((older,newer)->mergeMaps(newer,older,::orElse)) orElse [].toMap;
  localState:=localFolderContents(config);
  delta:=contentsDelta(localState,backupState)
              .{allowDelete ? $D : $D.dropDeletes}
              .toContentMap
              .filterMatchedFiles(config);
  //drop all deletes which refer to files not in local state (=which already have been deleted)
  delta:=delta.filter((key,value)->!(localState[key].isVoid AND value[0]==DELETED_FINGERPRINT));
  delta.size=0
  ? printWithTime('Backup for ',config['root'],' (',config['backupNameBase'],')',' contains no updates')
  : begin
      delta.map((key,value)->begin
        filename:=expandedFileName(config['root']&'/'&key);
        value[0]==DELETED_FINGERPRINT
        ? verboseDelete(filename)
        : writeFileWithAge(filename,value[1],value[0]);
      end);
    end;
  print;
end;

niceDiff(aState:StringList,bState:StringList,aCaption:String,bCaption:String,additionalLines>=0)->begin
  edit:=diff(aState,bState,true)['edit']
    .pEach(e,e[0]='+' ? [e[0],e[1]+1,e[2]+1,bState[e[2]]]
                      : [e[0],e[1]+1,e[2]+1,aState[e[1]]]);
  runs:=
    begin
      indexes:=edit.pEach(e,e[0]<>' ' ? [index-additionalLines..index+additionalLines] : void,|) //add additional lines to each run and concatenate all
                         .unique //remove duplicate lines and sort
                         .each(i,i>=edit.size or i<0 ? void : i);
      splits:=(indexes.tail<>indexes.leading+1);
      [indexes[true|splits],indexes[splits|true]].transpose;
    end;
  ["\e[91m--- "&aCaption&"\e[0m","\e[92m+++ "&bCaption&"\e[0m"]|
  runs.each(run,
      join(["@@ \e[91m-",edit[run[0],1],',',edit[run[1],1]-edit[run[0],1]+1,
              "\e[92m +",edit[run[0],2],',',edit[run[1],2]-edit[run[0],2]+1,"\e[0m @@"]),
      edit[[run[0]..run[1]]].each(e,(e[0]='.' ? '  ' : e[0].replace(['+','-'],["\e[92m+","\e[91m-"])&' ')&e[3]&"\e[0m"),|);
end;

fileDiff(config:BackupConfig, localFileName:String, additionalLines>=0)->begin
  nameInBackup:=relativeFileName(expandedFileName(config['root']),localFileName);
  stateFromBackup:=(
  findBackups(config)[0]
    .map(::backupFileToContentMap)
    .agg((older,newer)->mergeMaps(newer,older,::orElse)) orElse [].toMap)[nameInBackup];
  stateFromBackup.isVoid OR stateFromBackup[0]==DELETED_FINGERPRINT ? return void : begin
    stateFromBackup:=regex.split(stateFromBackup[1](),"\r?\n");
    localState:=localFileName.fileLines;
    niceDiff(stateFromBackup, localState, 'backup', localFileName,additionalLines);
  end;
end;

fullRevert(config:BackupConfig, backup_id:String)->begin
  allBackups:=findBackups(config,true)[0];
  assert(backup_id in allBackups.extractFileNameOnly,'Could not find revision ',backup_id);
  backupState:=allBackups.filter((b)->b.extractFileNameOnly<=backup_id)
                               .map(::backupFileToContentMap)
                               .agg((older,newer)->mergeMaps(newer,older,::orElse)) orElse [].toMap;
  localState:=localFolderContents(config);
  delta:=contentsDelta(localState,backupState)
              .dropDeletes
              .toContentMap
              .filterMatchedFiles(config);
  //drop all deletes which refer to files not in local state (=which already have been deleted)
  delta:=delta.filter((key,value)->!(localState[key].isVoid AND value[0]==DELETED_FINGERPRINT));
  delta.size=0
  ? printWithTime('Folder ',config['root'],' (',config['backupNameBase'],')',' is up to date with backup ',backup_id)
  : begin
      delta.map((key,value)->begin
        filename:=expandedFileName(config['root']&'/'&key);
        value[0]==DELETED_FINGERPRINT
        ? verboseDelete(filename)
        : writeFileWithAge(filename,value[1],value[0]);
      end);
      print;
    end;
end;

fileRevert(config:BackupConfig, localFileName:String, pickLatest:Boolean, backup_id:String)->begin
  !pickLatest AND !hasPrefix(backup_id,config['backupNameBase']) ? return void :
  nameInBackup:=relativeFileName(expandedFileName(config['root']),localFileName);
  if nameInBackup.hasPrefix('..') then return void;
  states:=
  findBackups(config,true)[0].map((backupName)->begin
    [backupName.extractFileNameOnly,
     backupName.backupFileToContentMap[nameInBackup]];
  end)
  .filter((b)->b.size=2).map((id,val)->[id,val[0],val[1]]);
  dataSource:=pickLatest ? states.trailing : states.filter((name,time,lines)->name==backup_id)[0];
  if not dataSource.isList(3)
  then return "\e[91mBackup "&backup_id&" could not be found\e[0m"
  else begin
    writeFileWithAge(localFileName,dataSource[2],dataSource[1]);
    ['File ',localFileName,' reset to state ',dataSource[0],' from ',formatTime(dataSource[1].trailing)].join;
  end;
end;

fileHistory(config:BackupConfig, localFileName:String, additionalLines>=0)->begin
  nameInBackup:=relativeFileName(expandedFileName(config['root']),localFileName);
  states:=
  findBackups(config,true)[0].map((backupName)->begin
    ['backup:'&backupName.extractFileNameOnly,
     backupName.backupFileToContentMap[nameInBackup]];
  end)
  .filter((b)->b.size=2).map((id,val)->[id&' ('&formatTime(val[0,2])&')',regex.split(val[1](),"\r?\n")]);
  states.size=0 ? return void :

  log(states.size,' Backups have been found');
  print(#27'[92m+++ ',states.head[0],#27'[0m');
  states.head[1].join("\n").print;

  states||=[localFileName,fileLines(localFileName)];

  consoleWidth:=exec('cmd',['/C','mode','con'])[0].filter((L)->L.matches(': *\d+$'))[1].split(':')[1].trim.softCast;
  hLine:=repeatString('â',consoleWidth-1);

  [states.leading,states.tail].transpose
  .map((older,newer)->niceDiff(older[1],newer[1],older[0],newer[0],3)|hLine)
  .agg(|);
end;

emergencyRestore(configs:List)->begin
  knownBaseNames:=configs.getInner('backupNameBase');
  synthesizedConfigs:=
    allFiles(myPath.extractFileDirectory,'*'&INDEX_EXTENSION,false)
    .extractFileNameOnly
    .map(::extractBackupPrefix)
    .filter((n)->n not in knownBaseNames)
    .unique
    .map(::makeConfig);
  synthesizedConfigs.map((cfg)->restoreBackup(cfg,false));
end;

BAR_CELL:=[' ',"â","â","â","â","â","â","â","â"];

bar(fillFraction:Numeric,maxWidth:Int)->begin
  k:=round(max(0,min(1,fillFraction))*8*maxWidth);
  format('%-'&maxWidth&'.'&maxWidth&'s',repeatString(BAR_CELL[7],k div 8)&BAR_CELL[k mod 8]);
end;

printBackupSummary(knownConfigurations:List,onlyKnown:Boolean,diffOnly:Boolean)->begin
  color:=(s:String,sig:Numeric)->(sig>0 ? #27'[92m' : sig<0 ? #27'[91m' : #27'[00m')&"\v"&s&"\v"#27'[0m';

  consoleWidth:=exec('cmd',['/C','mode','con'])[0].filter((L)->L.matches(': *\d+$'))[1].split(':')[1].trim.softCast;
  tab:=
    allFiles(myPath.extractFileDirectory,'*'&[INDEX_EXTENSION,DATA_EXTENSION])
    .fileInfo
    .map((f)->f['path'].extractFileNameOnly.extractBackupPrefix=>[f['path'].extractFileNameOnly,f['size'],f['path']])
    .{$L.getInner(1).group($L.getInner(0))}
    .map((baseName,backupFiles)->begin
       isKnown:=baseName in knownConfigurations.getInner('backupNameBase');
       numberOfBackups:=
       sizeOfBackups:=
       backup_fileCount:=
       backup_fileSize:=
       numberOfOldBackups:=
       sizeOfOldBackups:=0;
       config:=knownConfigurations.filter((cfg)->cfg['backupNameBase']==baseName)[0] orElse void;
       diffOnly ? void : begin
         contents:=backupFiles.getInner(2)
                              .filter((n)->n.matches(INDEX_EXTENSION&'$'))
                              .map((idxFileName)->idxFileName.fileContents.deserialize.map((k,v)->k=>v[0]))
                              .agg(|);
         contents:=contents.getInner(1).group(contents.getInner(0),::orElse).getInner(1);
         backup_fileCount:=contents.size;
         backup_fileSize :=contents.agg(+);
         sets:=backupFiles.getInner(1).group(backupFiles.getInner(0),::+).sort;
         numberOfOldBackups:=sets.getInner(0).matches(FULL_BACKUP_STEM_SUFFIX&'$').indexOf.max;
         sizeOfOldBackups  :=sets.head(numberOfOldBackups).getInner(1).agg(+) orElse 0;
         numberOfBackups   :=sets.size;
         sizeOfBackups     :=sets.getInner(1).agg(+) orElse 0;
       end;

       deltaTable:=isKnown
                   ? begin
                       backupState:=findBackups(config)[0]
                         .map(::backupFileToContentMap)
                         .agg((older,newer)->mergeMaps(newer,older,::orElse)).orElse([].toMap)
                         .dropDeletes
                         .filterMatchedFiles(config);
                       localState:=localFolderContents(config).filterMatchedFiles(config);
                       union(backupState.getInner(0),localState.getInner(0)).sort.each(key,begin
                         fullName:=expandedFileName(config['root']&'/'&key);
                         fullName:=[fullName,relativeFileName(expandedFileName('.'),fullName)].sort(::length)[0];
                         localFingerprint :=localState [key,0] orElse DELETED_FINGERPRINT;
                         backupFingerprint:=backupState[key,0] orElse DELETED_FINGERPRINT;
                         localFingerprint.head(2)==backupFingerprint.head(2)
                         ? void
                         : [fullName,
                            localState [key].isVoid ? ' '                                  : color(formatSize(localFingerprint [0]),localFingerprint [0]-backupFingerprint[0]),
                            localState [key].isVoid ? "\e[91m\v       missing     \v\e[0m" : color(formatTime(localFingerprint [2]),localFingerprint [2]-backupFingerprint[2]),
                            backupState[key].isVoid ? ' '                                  : color(formatSize(backupFingerprint[0]),backupFingerprint[0]-localFingerprint [0]),
                            backupState[key].isVoid ? "\e[91m\v       missing     \v\e[0m" : color(formatTime(backupFingerprint[2]),backupFingerprint[2]-localFingerprint [2])];
                       end);
                     end
                   : [];
       [baseName,isKnown,config orElse [],
        numberOfBackups,sizeOfBackups,
        backup_fileCount,backup_fileSize,
        numberOfOldBackups,sizeOfOldBackups,
        deltaTable];
     end);

    onlyKnown ? tab:=tab[tab.getInner(1)] : void;
    diffOnly  ? tab:=tab.filter((row)->!(row[9].orElse([])==[])) : void;
    tab:=tab.sort(0).sort(1); //sort by name, then by "known"
    baseNameLength:=max(tab.getInner(0).length.max,
                        tab.getInner(2).map((cfg)->cfg==[] ? void : cfg['root'].length).max);
    maxSize:=tab.transpose[[4,6,8]].flatten.max;
    barWidth:=consoleWidth-65;

    tab.map((baseName,isKnown,config,
             numberOfBackups,sizeOfBackups,
             backup_fileCount,backup_fileSize,
             numberOfOldBackups,sizeOfOldBackups,
             deltaTable)->begin
      diffOnly
      ? void
      : begin
          printf("Base name  :\t%-"&baseNameLength&"s\t\tâ  count\tâ\vsize"&
               "\n%s\tBackup files\tâ%7s\tâ%10s %s"&
               "\n\t\tRestorable  \tâ%7s\tâ%10s %s"&
               (numberOfOldBackups==0 ? void : "\n\t\tOld backups \tâ%7s\tâ%10s %s"),
               baseName                                          ,
               isKnown ? f"Root folder:\t{config['root']}" : "\t",numberOfBackups ,formatSize(sizeOfBackups),   bar(sizeOfBackups/maxSize,barWidth),
                                                                  backup_fileCount,formatSize(backup_fileSize), bar(backup_fileSize/maxSize,barWidth),
                                                                  numberOfOldBackups==0 ? void : numberOfOldBackups,
                                                                  numberOfOldBackups==0 ? void : formatSize(sizeOfOldBackups),
                                                                  numberOfOldBackups==0 ? void : bar(sizeOfOldBackups/maxSize,barWidth));
        end;
      isKnown
      ? begin
          deltaTable.size=0
          ? (diffOnly ? void : print("\e[F\e[96mNo diff\e[0m","\n",repeatString('â',baseNameLength+27),'â¼âââââââââ¼',repeatString('â',consoleWidth-55)))
          : begin
              indent:=baseNameLength+14;
              deltaTable_:=deltaTable.transpose.map((col)->col.join("\n").formatTabs);
              column_widths:=deltaTable_.map((col)->regex.replace(col,#27'\[\d+m','').length.max.max(4));
              commonFormat:=repeatString(' ',indent)&
                                  '%-'&column_widths[0]&'s â '&
                                  '%-'&column_widths[1]&'s â '&
                                  '%-'&column_widths[2]&'s â '&
                                  '%-'&column_widths[3]&'s â '&
                                  '%-'&column_widths[4]&'s';
                  printf(repeatString(' ',indent)&
                     '%-'&column_widths[0]&'s â '&
                     '%-'&(column_widths[1]+column_widths[2]+3)&'s â %s','','Local','Backup');
              printf(commonFormat,'File','Size','Time','Size','Time');
              diffOnly ? begin
                           printf(#27'[2FBase name  : %s'&"\n"&
                                        'Root folder: %s',baseName,config['root']);
                         end : void;
              print(repeatString(' ',indent),
                    repeatString('â',column_widths[0]+1),'â¼',
                    repeatString('â',column_widths[1]+2),'â¼',
                    repeatString('â',column_widths[2]+2),'â¼',
                    repeatString('â',column_widths[3]+2),'â¼',
                    repeatString('â',column_widths[4]+3));
              commonFormat.printf@deltaTable_;
              print(repeatString('â',column_widths[0]+1+indent),'â´',
                    repeatString('â',column_widths[1]+2),'â´',
                    repeatString('â',column_widths[2]+2),'â´',
                    repeatString('â',column_widths[3]+2),'â´',
                    repeatString('â',consoleWidth-indent-12-column_widths[[0..3]].agg(+)));
            end;
        end
      : print("\e[F\e[91munknown config\e[0m\n",repeatString('â',baseNameLength+27),'â¼âââââââââ¼',repeatString('â',consoleWidth-55));
    end);
    diffOnly and tab.size==0 ? print("\e[96mNo diff\e[0m") : void;
end;

deleteBrokenFiles(checkedEntries:List)->
  printWithTime('Looking for broken backups') orElse
  allFiles(BACKUP_ROOT_DIR,'*'&[INDEX_EXTENSION,DATA_EXTENSION])
  .{$L.group($L.extractFileNameOnly)}
  .sort
  .map((g)->g[1].sort.reverseList)
  .each(pair,pair.size==1 ? print orElse verboseDelete(pair[0]) : begin
     KEY:=[pair[0].extractFileNameOnly,pair.fileInfo.map((i)->[i['size'],i['time']])];
     KEY in checkedEntries
     ? KEY
     : begin
         try(::deserialize,[pair[0].fileContents]).isVoid OR
         try(::deserialize,[pair[1].fileContents]).isVoid
         ? print orElse pair.map(::verboseDelete)
         : begin
             printWithSuccess('  Backup '&pair[0].extractFileNameOnly,true);
             KEY;
           end;
       end;
   end);

deleteOldBackups->begin
  allFiles(BACKUP_ROOT_DIR,'*'&[INDEX_EXTENSION,DATA_EXTENSION])
    .{$L.group($L.extractFileNameOnly)}
    .map((key,pair)->pair.size==1
                     ? begin verboseDelete(pair[0]); void; end
                     : [key.extractBackupPrefix,pair[0].changeFileExt('')])
    .{$L.getInner(1).group($L.getInner(0))}
    .map((key,fileList)->begin
       l:=fileList.sort
             .each(backup,
              try(::deserialize,[fileContents(backup&INDEX_EXTENSION)]).isVoid OR
              try(::deserialize,[fileContents(backup&DATA_EXTENSION)]).isVoid
              ? map(backup&[DATA_EXTENSION,INDEX_EXTENSION],::verboseDelete)
              : backup);
       l.head(indexOf(l.matches('_full$')).max)
        .each(base,base&INDEX_EXTENSION,base&DATA_EXTENSION);
     end)
    .agg(|)
    .agg(::verboseDelete);
end;

listRevisions->allFiles(BACKUP_ROOT_DIR,'*'&INDEX_EXTENSION).extractFileNameOnly.sort;

listRevisionContents(matchString:String)->
  allFiles(BACKUP_ROOT_DIR,'*'&INDEX_EXTENSION).filter((n)->n.extractFileNameOnly.matches(matchString))
  .sort
  .each(revisionIndexFile,begin
     print(revisionIndexFile.extractFileNameOnly);
     D:=revisionIndexFile.fileContents.deserialize.map((key,value)->key|value).transpose;
     printf(" \t%s\t%s\t%s\t%x",D[0],D[1].map(::formatSize),D[3].map(::formatTime),D[2]);
   end);
