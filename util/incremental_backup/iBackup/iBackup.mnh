#!C:\bin\mnh.exe
USE sync_util,iBackup_config,backup_util;

ALL_FILES_OF_ME:=map(myPath | inspect['uses'].getInner(1),::expandedFileName);
ALL_FILES_OF_ME_EXCEPT_CONFIG:=ALL_FILES_OF_ME[!matches(ALL_FILES_OF_ME.lower,'_config\.mnh$')];

CONFIGS_INCLUDING_SELF:=ALL_CONFIGS||
  ['root'          =>'.',
   'backupNameBase'=>'backup_tool',
   'basePattern'   =>'*.mnh',
   'recurse'       =>true,
   'matcher'       =>(x)->x in ALL_FILES_OF_ME].toMap.toBackupConfig;

CONFIGS_INCLUDING_SELF_EXCLUDING_CONFIG:=ALL_CONFIGS||
  ['root'          =>'.',
   'backupNameBase'=>'backup_tool',
   'basePattern'   =>'*.mnh',
   'recurse'       =>true,
   'matcher'       =>(x)->x in ALL_FILES_OF_ME_EXCEPT_CONFIG].toMap.toBackupConfig;

createSyntheticConfig(s)->begin
  print(#27'[91;5mNo matching config found'#27'[0m');
  beep;
  ask('Do you want to create a synthetic config?',['Yes','No'])=='No'
  ? halt
  : [['root'          =>'tmp_'&s.head,
      'backupNameBase'=>s.head,
      'basePattern'   =>'*.*',
      'recurse'       =>true,
      'matcher'       =>(x)->true].toMap.toBackupConfig];
end;

filteredConfigsForBackup()->CONFIGS_INCLUDING_SELF;
filteredConfigsForBackup(...)->begin
  local f:=union@((...).map((r)->CONFIGS_INCLUDING_SELF[CONFIGS_INCLUDING_SELF.getInner('root').matches(r) or CONFIGS_INCLUDING_SELF.getInner('backupNameBase').matches(r)]));
  f.size==0
  ? createSyntheticConfig(...)
  : f.sort;
end;

filteredConfigsForRestore()->CONFIGS_INCLUDING_SELF_EXCLUDING_CONFIG;
filteredConfigsForRestore(...)->begin
  local f:=union@((...).map((r)->CONFIGS_INCLUDING_SELF_EXCLUDING_CONFIG[CONFIGS_INCLUDING_SELF_EXCLUDING_CONFIG.getInner('root').matches(r) or CONFIGS_INCLUDING_SELF_EXCLUDING_CONFIG.getInner('backupNameBase').matches(r)]));
  f.size==0
  ? createSyntheticConfig(...)
  : f.sort;
end;

@SuppressUnusedWarning=startup hook
ensure_working_dir:=begin
  assertUniqueInstance;
  myPath.extractFileDirectory.changeDirectory;
end;

//*Backup and sync...
main->begin
  main('backup');
  main('sync');
end;

fileIsRelevantForSync    (filename)->filename.extractFileExt=='.mnh' OR filename.extractFileExt in [DATA_EXTENSION,INDEX_EXTENSION] AND filename.hasPrefix(CONFIGS_INCLUDING_SELF.getInner('backupNameBase')).agg(OR);
fileIsRelevantForFullSync(filename)->filename.extractFileExt in [DATA_EXTENSION,INDEX_EXTENSION,'.mnh'];

syncPush(isRelevant:Expression(1))->begin
  local mounted:=driveInfo;
  copyFile(myPath,BACKUP_ROOT_DIR&'/'&myPath.extractFileName);
  local ftpSyncFuture:=future({
    FTP_SYNC_CONFIGS.each(cfg,begin
    syncToFTP(BACKUP_ROOT_DIR,cfg['host'],cfg['user'],cfg['pass'],cfg['path']&'/'&BACKUP_ROOT_NAME,false,isRelevant);
    true;
  end)});
  SYNC_CONFIGS.pEach(cfg,begin
    local serial      :=cfg['drive_serial'] orElse fail;
    local description :=cfg['drive_description'] orElse fail;
    local targetFolder:=cfg['target_folder'] orElse fail;
    targetFolder:=mounted.map((info)->info[1,'serial']==serial ? info[0]&':'&targetFolder&'\' : void).agg(orElse);
    BACKUP_ROOT_DIR == targetFolder ? void :
    targetFolder.isVoid ? printWithTime(description,' is not mounted') : begin
      syncFlat(BACKUP_ROOT_DIR,targetFolder&BACKUP_ROOT_NAME,false,isRelevant);
    end;
  end);
  ftpSyncFuture();
  afterSync;
end;

syncPull(isRelevant:Expression(1))->begin
  local mounted:=driveInfo;
  SYNC_CONFIGS.each(cfg,begin
    local serial      :=cfg['drive_serial'] orElse fail;
    local description :=cfg['drive_description'] orElse fail;
    local sourceFolder:=cfg['target_folder'] orElse fail;
    sourceFolder:=mounted.map((info)->info[1,'serial']==serial ? info[0]&':'&sourceFolder&'\' : void).agg(orElse);
    BACKUP_ROOT_DIR == sourceFolder ? void :
    sourceFolder.isVoid ? printWithTime(description,' is not mounted') : begin
      syncFlat(sourceFolder&BACKUP_ROOT_NAME,BACKUP_ROOT_DIR,false,isRelevant);
    end;
  end);
  FTP_SYNC_CONFIGS.each(cfg,begin
    syncFromFTP(cfg['host'],cfg['user'],cfg['pass'],cfg['path']&'/'&BACKUP_ROOT_NAME,BACKUP_ROOT_DIR,false,isRelevant);
  end);
end;

//*Sync (i.e. copy from local backup folder to all remote backup folders)
main('sync')->syncPush(::fileIsRelevantForSync);

//*Reverse sync
main('sync','r')->syncPull(::fileIsRelevantForSync);

//*Backup files; give an additional matcher to select one backup set
main('delta',...)->map(filteredConfigsForBackup@...,::listDelta);

//*Backup files; give an additional matcher to select one backup set
main('backup',...)->map(filteredConfigsForBackup@...,::createBackup);

//*Restore files; give an additional matcher to select one backup set
main('restore',...)->map(filteredConfigsForRestore@...,(config)->restoreBackup(config,true));

//*Restore files without deleting missing files and without overwriting newer files
main('merge',...)-> map(filteredConfigsForRestore@...,(config)->restoreBackup(config,false));

//*List currently backed up files (it is best to redirect the output into a text file)
main('list',...)->map(filteredConfigsForBackup@...,::listAll);

//*Show diff between file in backup and current state
main('diff',filename)->begin
  local diffListing:=CONFIGS_INCLUDING_SELF.each(config,fileDiff(config,expandedFileName(filename), 3),|);
  diffListing.isVoid ? printWithTime('File could not be found in backups') : printf('%s',diffListing);
end;

//*Show history of file
main('history',filename)->begin
  local diffListing:=CONFIGS_INCLUDING_SELF.each(config,fileHistory(config,expandedFileName(filename), 3),|);
  diffListing.isVoid ? printWithTime('File could not be found in backups') : printf('%s',diffListing);
end;

//*Revert single file to the latest backup
main('revert',filename)->begin
  local diffListing:=CONFIGS_INCLUDING_SELF.each(config,fileRevert(config,expandedFileName(filename), true, ''),orElse);
  diffListing.isVoid ? printWithTime('File could not be found in backups') : printf('%s',diffListing);
end;

//*Revert single file to a selected backup
main('revert',filename,revision)->begin
  local diffListing:=CONFIGS_INCLUDING_SELF.each(config,fileRevert(config,expandedFileName(filename), false, revision),orElse);
  diffListing.isVoid ? printWithTime('File could not be found in backups') : printf('%s',diffListing);
end;

//*Pull all remote repositories and push all to distribute copies
main('distribute')->begin
  syncPull(::fileIsRelevantForFullSync);
  deleteBrokenFiles;
  syncPush(::fileIsRelevantForFullSync);
end;

//*If all goes wrong, call this one...
main('emergency_restore')->begin
  syncPull(::fileIsRelevantForFullSync);
  deleteBrokenFiles;
  emergencyRestore(CONFIGS_INCLUDING_SELF_EXCLUDING_CONFIG);
end;

//*Show a summary of backup sizes
main('status')->printBackupSummary(CONFIGS_INCLUDING_SELF.getInner('backupNameBase'));

//*Delete backups which cannot be read
main('repair')->deleteBrokenFiles;
