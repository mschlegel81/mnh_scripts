getProcessMap->begin
  local PM:=getTaskInfo.map({$x['PID'] => $x.mergeMaps(['children'=>[]].toMap,::orElse)}).toMap;
  PM.getInner(1).each(p,begin
    local parent:=p['parentPID'];
    PM[parent].isVoid
    ? void
    : PM[parent,'children']|=p['PID'];
  end);
  PM;
end;

private isProcessChildOfAnyOther(processMap:Map, PID:Int)->begin
  local pPID:=processMap[PID,'parentPID'];
  pPID != PID AND !isVoid(processMap[pPID]);
end;

main->begin
  local PM:=getProcessMap;

  local ordered:=PM.getInner(0).sort;
  local roots:=ordered.filter({!isProcessChildOfAnyOther(PM,$PID)});
  local printed:=[].toSet;
  local result:=[];
  local recurse:={begin
    result|=[[$indent&($last ? '└──' : '├──')&(PM[$pid,'caption'] orElse '<?>'),$pid,PM[$pid,'commandLine'] orElse '']];
    printed|=$pid;
    local newIndent:=$last
          ? $indent + '   '
          : $indent + '│  ';
    local children:=(PM[$pid,'children'] orElse []).sort.filter({!($c in printed)});
    children.each(child,recurse(newIndent,index+1=children.size,child));
  end};
  roots.each(r,recurse('',index+1=roots.size,r));
  result.map((line)->line.join("\t")).join("\n").print;
end;


