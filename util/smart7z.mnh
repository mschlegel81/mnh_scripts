SEVEN_ZIP_PATH:='c:\Program Files\7-Zip\7z.exe';
datastore fileListPerFolder:=[].toMap;
datastore zipHashPerFolder:=[].toMap;

zipName(folder='.')->'dev.7z';
zipName(folder)->folder&'.7z';

getFolderContents(folder:String,acceptAllMatching:Expression(1),recursive:Boolean)->
  allFiles(folder,'',recursive).pMap((f)-> acceptAllMatching(f)
                                           ? [systemSpecificFilename(f),fileStats(f).trailing]
                                           : void).sort;
getFolderContents('.'                    )->getFolderContents('.',   {!$x.matches('\.((log)|(7z)|(lst))$') AND !$x.matches(myPath.extractFileNameOnly&'\.datastore') },false);
getFolderContents(folder in (['art.source',
                              'Sudoku3']))->getFolderContents(folder,{!$x.matches('/backup/')
                                                                  AND !$x.matches('\.((exe)|(o)|(ppu)|(a)|(compiled)|(obj)|(res))$')},true);
getFolderContents(folder='mnh_scripts'   )->getFolderContents(folder,{!$x.matches('((/\.git)|(/backup)|(/oeis/oeis_server\.datastore.*))')},true);
getFolderContents(folder='mnh5'          )->getFolderContents(folder,(x)->!x.matches('(/consoles/lib/)|(/ide/compilates/)|(/demos/.*\.png$)|(/demos/inputs/.*\.txt$)|(/demos/.*\.datastore)|(\.exe$)'),true);
getFolderContents(folder:String          )->getFolderContents(folder,(x)->true,true);

showFolderChanges(folder:String)->begin
  assertGuiStarted;
  local oldList :=fileListPerFolder[folder] orElse [];
  local currList:=getFolderContents(folder);
  oldList==currList ? return print('No changes in folder ',folder) : void;
  local commonEntries:=oldList.intersect(currList);
  oldList :=oldList .minus(commonEntries).toMap;
  currList:=currList.minus(commonEntries).toMap;
  print('Changes for folder '&folder);
  oldList.getInner(0)
         .union(currList.getInner(0))
         .each(name,name=>
                    oldList [name].isVoid ? 'new' :
                    currList[name].isVoid ? 'deleted' :
                                            'modified: '&oldList[name]&' <> '&currList[name])
         .sort
         .map({'  '&$x.join("\t")})
         .join("\n")
         .print;
end;

updateArchiveForFolder(folder:String)->begin
  local oldList :=fileListPerFolder[folder] orElse [];
  local currList:=getFolderContents(folder);
  local zip:=zipName(folder);
  oldList==currList AND fileExists(zip) AND fileStats(zip).trailing==(zipHashPerFolder[folder] orElse 0) ? return void : void;
  //create file list for zipping
  deleteFile(zip);
  print('Updating ',zip);
  writeFileLines(local list:=zipName(folder)&'.lst',currList.getInner(0),#10#13);
  SEVEN_ZIP_PATH.exec(['a','-mx9','-mmt1','-bd',zip,'@'&list]);
  deleteFile(list);
  fileListPerFolder[folder]:=currList;
  zipHashPerFolder [folder]:=fileStats(zip).trailing;
end;

main(folder)->updateArchiveForFolder(folder);
main(folder,'diff')->showFolderChanges(folder);

main->begin
  ['3rd_party','art.source','git','graveyard','mnh_scripts','mnh5','Sudoku3','web','art.bin']
  .each(folder,showFolderChanges(folder),future(::updateArchiveForFolder,[folder]))
  .map({$f()});
end;
