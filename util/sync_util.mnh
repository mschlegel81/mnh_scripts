verboseStatus(successful:Boolean)->begin
  successful
  ? print(#27'[92m(OK)'#27'[0m')
  : print(#27"[91;5m(failed)"#27'[0m');
  successful;
end;

verboseDelete(filename)->begin
  printDirect('Deleting ',filename,'  ');
  deleteFile(filename).verboseStatus;
end;

verboseCopy(source,target)->begin
  printDirect('Copy ',source,' => ',target,'  ');
  copyFile(source,target).verboseStatus;
end;

verboseFtpDelete(file,connection,prefix)->begin
  printDirect('Delete ',prefix,file);
  connection.ftpDeleteFile(file).verboseStatus;
end;

verboseUpload(source,target,connection,prefix)->begin
  printDirect('Upload ',source,' => ',prefix,target,'  ');
  connection.ftpUpload(source,target).verboseStatus;
end;

verboseDownload(source,target,connection,prefix)->begin
  printDirect('Download ',prefix,source,' => ',target,'  ');
  connection.ftpDownload(source,target).verboseStatus;
end;

syncFlat(sourceFolder:String,targetFolder:String                          )->syncFlat(sourceFolder,targetFolder,false);
syncFlat(sourceFolder:String,targetFolder:String,allowDelete:Boolean      )->syncFlat(sourceFolder,targetFolder,allowDelete,(f)->true);
syncFlat(sourceFolder:String,targetFolder:String,includeFile:Expression(1))->syncFlat(sourceFolder,targetFolder,false,includeFile);
syncFlat(sourceFolder:String,targetFolder:String,allowDelete:Boolean,includeFile:Expression(1))->begin
  local SF:=allFiles(sourceFolder,'*',false).map((f)->relativeFileName(sourceFolder,f)=>fileInfo(f)['size']).filter((file,size)->includeFile(file)).toMap;
  local TF:=allFiles(targetFolder,'*',false).map((f)->relativeFileName(targetFolder,f)=>fileInfo(f)['size']).filter((file,size)->includeFile(file)).toMap;
  local toBeCopied :=SF.filter((name,fileSize)->(TF[name] orElse -1)<>fileSize).toMap;
  local toBeDeleted:=TF.filter((name,fileSize)->(SF[name].isVoid AND allowDelete) OR !isVoid(toBeCopied[name])).toMap;
  toBeDeleted.getInner(0)
    .map((f)->expandedFileName(targetFolder&'/'&f))
    .each(f,verboseDelete(f));
  toBeCopied.getInner(0)
    .map((f)->[expandedFileName(sourceFolder&'/'&f),expandedFileName(targetFolder&'/'&f)])
    .each(pair,verboseCopy@pair);
  print(  #27'[92mSync ',sourceFolder,' => ',targetFolder,' finished'#27'[0m')
end;

syncToFTP(srcFolder,host,user,pass,ftpDestFolder                          )->syncToFTP(srcFolder,host,user,pass,ftpDestFolder,false);
syncToFTP(srcFolder,host,user,pass,ftpDestFolder,allowDelete:Boolean      )->syncToFTP(srcFolder,host,user,pass,ftpDestFolder,allowDelete,(f)->true);
syncToFTP(srcFolder,host,user,pass,ftpDestFolder,includeFile:Expression(1))->syncToFTP(srcFolder,host,user,pass,ftpDestFolder,false,includeFile);
syncToFTP(srcFolder,host,user,pass,ftpDestFolder,allowDelete:Boolean,includeFile:Expression(1))->begin
  local SF:=allFiles(srcFolder,'*',false).map((f)->relativeFileName(srcFolder,f)=>fileInfo(f)['size']).filter((file,size)->includeFile(file)).toMap;
  local connection:=ftpConnect(host,user,pass).setTimeout(10000);
  connection() ? void : return warn('Login failed ',connection:=void);
  local TF:=connection.getListing(ftpDestFolder)
    .filter((entry)->!entry['directory'])
    .map((entry)->entry['filename']=>entry['size'])
    .filter((name,fileSize)->includeFile(name))
    .toMap;
  local toBeCopied :=SF.filter((name,fileSize)->(TF[name] orElse -1)<>fileSize).toMap;
  local toBeDeleted:=TF.filter((name,fileSize)->(SF[name].isVoid AND allowDelete) OR !isVoid(toBeCopied[name])).toMap;
  local prefix:='ftp://'&host;
  toBeDeleted.getInner(0)
    .map((f)->(ftpDestFolder&'/'&f))
    .each(f,verboseFtpDelete(f,connection,prefix),AND) AND
  toBeCopied.getInner(0)
    .map((f)->[expandedFileName(srcFolder&'/'&f),(ftpDestFolder&'/'&f)])
    .each(pair,verboseUpload(pair[0],pair[1],connection,prefix),AND)
  ? print(  #27'[92mSync ',srcFolder,' => ',prefix,' finished'#27'[0m')
  : print(#27'[91;5mSync ',srcFolder,' => ',prefix,' failed'#27'[0m');
  connection:=void;
end;

syncFromFTP(host,user,pass,ftpSrcFolder,destFolder                          )->syncFromFTP(host,user,pass,ftpSrcFolder,destFolder,false);
syncFromFTP(host,user,pass,ftpSrcFolder,destFolder,allowDelete:Boolean      )->syncFromFTP(host,user,pass,ftpSrcFolder,destFolder,allowDelete,(f)->true);
syncFromFTP(host,user,pass,ftpSrcFolder,destFolder,includeFile:Expression(1))->syncFromFTP(host,user,pass,ftpSrcFolder,destFolder,false,includeFile);
syncFromFTP(host,user,pass,ftpSrcFolder,destFolder,allowDelete:Boolean,includeFile:Expression(1))->begin
  local connection:=ftpConnect(host,user,pass).setTimeout(10000);
  connection() ? void : return warn('Login failed ',connection:=void);
  local SF:=connection.getListing(ftpSrcFolder)
    .filter((entry)->!entry['directory'])
    .map((entry)->entry['filename']=>entry['size'])
    .filter((name,fileSize)->includeFile(name))
    .toMap;
  local TF:=allFiles(destFolder,'*',false).map((f)->relativeFileName(destFolder,f)=>fileInfo(f)['size']).filter((file,size)->includeFile(file)).toMap;
  local toBeCopied :=SF.filter((name,fileSize)->(TF[name] orElse -1)<>fileSize).toMap;
  local toBeDeleted:=TF.filter((name,fileSize)->(SF[name].isVoid AND allowDelete) OR !isVoid(toBeCopied[name])).toMap;
  local prefix:='ftp://'&host;
  toBeDeleted.getInner(0)
    .map((f)->expandedFileName(destFolder&'/'&f))
    .each(f,verboseDelete(f));
  toBeCopied.getInner(0)
    .map((f)->[(ftpSrcFolder&'/'&f),expandedFileName(destFolder&'/'&f)])
    .each(pair,verboseDownload(pair[0],pair[1],connection,prefix),AND);
  ? print(  #27'[92mSync ',prefix,' => ',destFolder,' finished'#27'[0m')
  : print(#27'[91;5mSync ',prefix,' => ',destFolder,' failed'#27'[0m');
  connection:=void;
end;

syncToFTP  ('C:\dev\private\ib','192.168.1.1','user','pwd','/volume/ib');
//syncFromFTP('192.168.1.1','user','pwd','/volume/ib','C:\dev\private\ib');

//'C:\dev\private\ib_copy',true);

