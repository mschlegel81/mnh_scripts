BLOCK:=[" ","▁","▂","▃","▄","▅","▆","▇","█"];
TOTAL_KEY:='TOTAL';

private memoized singleton(x)->x;

getCurrentInfo->begin
  obtainInfo:=()->getTaskInfo
     .map((ti)->ti['PID'].singleton=>[ti['caption'       ].singleton,
                                      ti['commandLine'   ].singleton,
                                      ti['workingSetSize'].singleton,
                                      ti['userModeTime'  ].singleton]).toMap;
  prevInfo:=obtainInfo();
save;
  cpuLoad:=getCPULoadPercentage;
  currInfo:=obtainInfo();
  totalMemory:=currInfo.getInner(1).getInner(2).agg(+);
  totalUserModeTimeDelta:=0;
  result:=currInfo.map((PID,value)->begin
    prevValue:=prevInfo[PID];
    if not prevValue.isVoid then begin
      userModeTimeDelta:=max(0,value[3]-prevValue[3]);
      totalUserModeTimeDelta+=userModeTimeDelta;
      [PID,value[0],value[1]]=>[value[2],userModeTimeDelta];
    end;
  end);
  prevInfo:=currInfo;
  loadFactor:=[1,10*cpuLoad/totalUserModeTimeDelta];
  ['load'=>mergeMaps(result.map((keys,value)->keys[0]=>round(value*loadFactor).map(::singleton)).toMap,[TOTAL_KEY=>[totalMemory,cpuLoad*10].map(::singleton)].toMap,::orElse),
   'caption'=>result.getInner(0).map((pid,caption,cmdLine)->pid=>caption).toMap.mergeMaps([TOTAL_KEY=>TOTAL_KEY].toMap,::orElse),
   'cmdLine'=>result.getInner(0).map((pid,caption,cmdLine)->pid=>cmdLine).toMap.mergeMaps([TOTAL_KEY=>''       ].toMap,::orElse)].toMap;
end;

formatBlock(text:StringList,col1Width:Int,
            history:NumericList,totalWidth:Int,blockHeight:Int,lineIndex:Int,commandLine:String)->begin
  txt:=begin
    T:=format('%-'&col1Width&'s',text)&' ';
    blank:=repeatString(' ',col1Width+1);
    lineIndex=0
    ? begin
        T:=format("\e[90m%s\e[0m",T.leading)|T.trailing;
        T[0]:="\e[1;1H"&T[0];
        while T.size<blockHeight do T:=T.leading|blank|T.trailing;
      end
    : while T.size<blockHeight do T:=blank|T;
    T;
  end;


  totalBarSize:=totalWidth-col1Width-1;
  _H:=history.map((x)->x.isNan OR x.isInfinite ? 0 : x);
  H0:=_H.head((totalBarSize div 4)); _H:=_H.tail((totalBarSize div 4)).chunkMap(2).each(x,x.agg(+)*0.5);
  H0|=_H.head((totalBarSize div 4)); _H:=_H.tail((totalBarSize div 4)).chunkMap(2).each(x,x.agg(+)*0.5);
  H0|=_H.head((totalBarSize div 4)); _H:=_H.tail((totalBarSize div 4)).chunkMap(2).each(x,x.agg(+)*0.5);
  H0|=_H.head(totalBarSize-3*(totalBarSize div 4));
  while H0.size<totalWidth - col1Width - 1 do H0|=0;

  splitAtIdx:=(totalBarSize div 4)*[1,2,3];
  bars:=H0
    .head(totalWidth - col1Width - 1)
    .each(x,[round(8*blockHeight*x),index in splitAtIdx ? '│' : ' '])
    .map((H,space)->BLOCK[([blockHeight-1..0]*8).each(d,max(0,min(8,H-d)))].replace(' ',space))
    .transpose
    .map(::join);
  if length(commandLine)>0 then begin
    if length(commandLine)>=totalBarSize
    then bars[blockHeight-1]:=copy(commandLine,0,totalBarSize)
    else bars[blockHeight-1]:=copy(bars[blockHeight-1],0,totalBarSize-length(commandLine))&commandLine;
  end;

  (lineIndex and 1)=1
  ? "\e[94m"&txt&bars.replace('│',"\e[0m│\e[94m")&"\e[0m"
  :          txt&bars;
end;

formatSampleTimes(history:NumericList,col1Width:Int,totalWidth:Int)->begin
  totalBarSize:=totalWidth-col1Width-1;
  _H:=history        .tail((totalBarSize div 4)).chunkMap(2).each(x,x.agg(+)/x.size);
  T1:=_H.head; _H:=_H.tail((totalBarSize div 4)).chunkMap(2).each(x,x.agg(+)/x.size);
  T2:=_H.head; _H:=_H.tail((totalBarSize div 4)).chunkMap(2).each(x,x.agg(+)/x.size);
  T3:=_H.head;
  T4:=_H.head(totalBarSize-3*(totalBarSize div 4)).trailing;

  splitAtIdx:=(totalBarSize div 4)*[1,2,3,4];

  [repeatString(' ',col1Width+1+splitAtIdx[0]-8),
   T1==[] ? '        ' : formatTime('hh:mm:ss',T1),
   '│',
   repeatString(' ',splitAtIdx[1]-splitAtIdx[0]-9),
   T2==[] ? '        ' : formatTime('hh:mm:ss',T2),
   '│',
   repeatString(' ',splitAtIdx[2]-splitAtIdx[1]-9),
   T3==[] ? '        ' : formatTime('hh:mm:ss',T3),
   '│',
   repeatString(' ',splitAtIdx[3]-splitAtIdx[2]-10),
   T4==[] ? '        ' : formatTime('hh:mm:ss',T4),
   "\e[K\r"
  ].join;
end;

SMOOTH:=exp(-[0..100]²/1000);

formatMemAndCpu(mem:Int,cpu:Int,textWidth:Int,focusCpu:Boolean)->begin
  cpuStr:=format('CPU:%4.0f%%',cpu/10);
  memStr:=format('%7.2fMiB',mem/1024²);
  focusCpu
  ? memStr&repeatString(' ',textWidth-length(cpuStr)-length(memStr))&cpuStr
  : cpuStr&repeatString(' ',textWidth-length(cpuStr)-length(memStr))&memStr;
end;

sumLists(x,y)->x.size=y.size ? x+y : transpose([x,y],[0,0]).transpose.agg(+);

main->begin
  cpuGraphs:=true;
  continue:=true;
  groupByCaption:=false;

  localAsync({while continue do begin
    (signal:=ask('',['q','c','g'],false))=='q'
    ? continue:=false
    : signal=='g'
      ? groupByCaption:=!groupByCaption
      : cpuGraphs     :=!cpuGraphs;
  end});

  nextConsoleSizeQuery:=0;
  conSize:=[80,40];
  barHeight:=8;
  topCount:=10;
  captions:=[].toMap;
  loadHistory:=[].toMap;
  relevantKeys:=[].toSet;
  sampleTimes:=systime-[0..10000]/24/60/60*2;
  repeat begin
    stepEnd:=scriptTime+2;

    current:=getCurrentInfo;
    load    :=current['load'];
    captions:=current['caption'].mergeMaps(captions,::orElse);
    cmdLines:=current['cmdLine'];
    union(load.getInner(0),loadHistory.getInner(0)).map((key)->loadHistory[key]:=head([load[key] orElse [0,0]]|(loadHistory[key] orElse []),conSize[0]*4));
    sampleTimes:=                                                                head( systime                | sampleTimes                ,conSize[0]*4);

    scriptTime>nextConsoleSizeQuery AND !isGuiStarted
    ? begin
        newConSize:=exec('cmd',['/C','mode','con'])[0].filter((L)->L.matches(': *\d+$'))[[1,0]].split(':').getInner(1).trim.softCast;
        newConSize==conSize ? void : execPipeless('cmd',['/C','cls']);
        conSize:=newConSize;
        barHeight:=max(4,(conSize[1]-1) div 11);
        topCount:=(conSize[1]-1) div barHeight-1;
        nextConsoleSizeQuery:=scriptTime+30;
        mnhInfo['used_mem']>209715200
        ? begin
            //Housekeeping:
            relevantKeys|=TOTAL_KEY;
            captions:=captions.filter((key,value)->key in relevantKeys or value in relevantKeys).toMap;
            relevantKeys|=captions.flatten.toSet;
            loadHistory:=loadHistory.filter((key,value)->key in relevantKeys).toMap;
            relevantKeys:=[].toSet;
            callMemoryCleaner;
            loadHistory:=loadHistory.map((key,value)->key.singleton=>value.map(::singleton)).toMap;
            captions   :=captions   .map((key,value)->key.singleton=>value      .singleton).toMap;
          end
        : void;
      end
    : void;

    ProcessCountHistoric:=groupByCaption ? loadHistory.getInner(0).map((pid)->captions[pid] orElse f'PID:{pid}?').elementFrequency : void;
    ProcessCountCurrent :=groupByCaption ? load       .getInner(0).map((pid)->captions[pid] orElse f'PID:{pid}?').elementFrequency : void;
    entries:=groupByCaption
             ? begin
                 L:=loadHistory.toList;
                 group(L.getInner(1),
                       L.getInner(0).map((pid)->captions[pid] orElse f'PID:{pid}?'),::sumLists);
               end
             : loadHistory;

    sortKey:=entries.map((key,value)->key==TOTAL_KEY ? void : key|zip(value,SMOOTH).map((x,y)->x*y).agg(+));

    top_k:=TOTAL_KEY|sortKey[sortKey.getInner(1+ord(cpuGraphs)).sortPerm.reverseList.head(topCount)].getInner(0);
    top_k:=transpose([top_k,entries.getAll(top_k)]).map((key,value)->[key,value.getInner(ord(cpuGraphs))]|value.head);
    relevantKeys|=top_k.getInner(0).toSet;

    top_k:=top_k.map((key,bar,mem,cpu)->[key==TOTAL_KEY
                                         ? ['[Q]uit',
                                            cpuGraphs ? 'Top [C]pu users' : '[C] Top memory users',
                                            groupByCaption ? '[G]rouped' : 'un[G]rouped']
                                         : groupByCaption
                                           ? [ProcessCountCurrent[key]==ProcessCountHistoric[key]==1 ? void : format('%s/%s processes',ProcessCountCurrent[key] orElse 0,ProcessCountHistoric[key] orElse 0),
                                              key.toString]
                                           : [key.isInt ? f'PID: {key}' : key,
                                              captions[key]]
                                         ,mem,cpu
                                         ,key==TOTAL_KEY ? bar/bar.max : bar/top_k.tail.getInner(1).flatten.max
                                         ,groupByCaption ? '' : cmdLines[key] orElse '']);
    textWidth:=max(20,top_k.getInner(0).flatten.length.max);

    lineNumber:=-1;

    top_k.map((txt,mem,cpu,bar,commandLine)->
      formatBlock(txt|formatMemAndCpu(mem,cpu,textWidth,cpuGraphs),
                  textWidth,
                  bar,
                  conSize[0],barHeight,
                  lineNumber+=1,
                  commandLine))
      .agg(|)
      .join("\e[K\n")
      .&("\e[K\n")
      .&(formatSampleTimes(sampleTimes,textWidth,conSize[0]))
      .printDirect;
    sleepUntil(stepEnd);
  end until not continue;
end;
