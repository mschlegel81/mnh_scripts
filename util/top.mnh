taskSummary->begin
  local info:=getTaskInfo;
  group(info.map((i)->[i['userModeTime'],i['workingSetSize']]),
        info.map((i)->i['caption']),::+);
end;

mutable windowWidth:=100;
fillHalf(s:String)->format('%-'&(windowWidth div 2)&'s',s);

barOf(caption:String, barWidth)->
  fillHalf(caption&repeat('=',round(barWidth)-length(caption)));

showLog(previousSummary,currentSummary)->begin
  local cpuHistory:=
  local memHistory:=[];
save;
  local totalMemoryUsed:=currentSummary.getInner(1).getInner(1).agg(+);
  cpuHistory:=trailing(cpuHistory| getCPULoadPercentage,300);
  memHistory:=trailing(memHistory| totalMemoryUsed     ,300);

  local topMemoryUsers :=currentSummary.toList.sort((e)->e[1,1]).trailing(5).reverseList;
  local topCpuUsers:=currentSummary.map((key,value)->key=>value[0]-(previousSummary[key] orElse [0,0])[0]).sort(1);
  local totalUserTime:=topCpuUsers.getInner(1).agg(+);
  topCpuUsers:=topCpuUsers.trailing(5).reverseList.map((key,value)->key=>value/totalUserTime*cpuHistory.trailing);

  local P0:=zip(cpuHistory/100,memHistory/memHistory.max).map((cpuPercent,memPercent)->barOf('CPU',windowWidth/2*cpuPercent)&' '&barOf('MEM',windowWidth/2*memPercent)).toList.join("\n");
  topCpuUsers   :=topCpuUsers.map((topCpu)->f"{topCpu[0]}\t%{topCpu[1]}3.1f%%").join("\n").formatTabs;
  topMemoryUsers:=topMemoryUsers.map((topMem)->f"{topMem[0]}\t%{topMem[1,1]/1024Â²}3.1fMiB").join("\n").formatTabs;

  clearPrint;
  print(P0);
  zip(topCpuUsers,topMemoryUsers).map((left,right)->fillHalf(left)&' '&fillHalf(right)).toList.join("\n").print;
end;

mutable haltQueried:=false;
queryWidthInBackground->async({
  while(!haltQueried,begin
    local answer:=ask('',['+','-','q'],false);
    answer=='+' ? windowWidth+=2 :
    answer=='-' ? windowWidth-=2 :
    answer=='q' ? haltQueried:=true : void;
  end)});

main->begin
  queryWidthInBackground;
  local prevSummary:=taskSummary;
  while(!haltQueried,begin
    sleep(1);
    showLog(prevSummary,prevSummary:=taskSummary);
  end);
end;

