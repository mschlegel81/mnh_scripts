#!C:\bin\mnh_light.exe -silent -restrict noexe
UNCHANGED_TIMEOUT:=10; //one day timeout - realistically this timeout is never reached
DISPLAY_THRESHOLD:=1/24; //one hour
LOG_FILE_PATTERN:='Y:\server\logs\log*.txt';
currentLogs->files(LOG_FILE_PATTERN).fileInfo.map((info)->info['path']=>info['time']).toMap;

latestLogFile->begin
  latestSeenTimes:=currentLogs
    .map((entry)->entry[0] => ((systime-entry[1])<DISPLAY_THRESHOLD
                                ? 0
                                : entry[1])).toMap;
save;
  current:=currentLogs;
  latest:=current.filter((info)->!(info[1]==latestSeenTimes[info[0]])).sort(1).head;
  latest:=latest.size==0
          ? current.sort(1).trailing
          : latest;
  latestSeenTimes[latest[0]]:=latest[1];
  latest[0];
end;

skipEntriesFromIterator(i:IterableExpression,count=0)->i;
skipEntriesFromIterator(i:IterableExpression,count>0)->begin
  [1..count].map(()->i());
  i;
end;

nextIterator(currentLogFile,linesReadFromLog)->fileLineIterator(currentLogFile,UNCHANGED_TIMEOUT).skipEntriesFromIterator(linesReadFromLog[currentLogFile] orElse 0);
main->begin
  async({begin ask('Press Q to quit',['q']); halt; end});
  sleep(1);
  print;
  currentLogFile:=0;
  linesReadFromLog:=[currentLogFile=>0].toMap;
  getFileIterator:={begin
    fileChanged:=!((llf:=latestLogFile)==currentLogFile);
    currentLogFile:=llf;
    assert(!isVoid(currentLogFile),'There is no log');
    fileChanged
    ? printf("==========================================\nNow displaying: %s\n==========================================",currentLogFile)
    : void;
    try(::nextIterator,[currentLogFile,linesReadFromLog],(x)->begin warn(x); sleep(10); ['Unable to fetch log at '&formatTime(systime)].toIterableExpression; end);
  end};
  nextLineFromLog:=getFileIterator();
  sleep(1);
  print;
  while true do begin
    line:=nextLineFromLog();
    line.isVoid
    ? nextLineFromLog:=getFileIterator()
    : begin
        linesReadFromLog[currentLogFile]+=1;
        print(line);
      end;
  end;
end;
