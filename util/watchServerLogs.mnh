#!C:\bin\mnh_light.exe -silent -restrict noexe
UNCHANGED_TIMEOUT:=10; //one day timeout - realistically this timeout is never reached
DISPLAY_THRESHOLD:=1/24; //one hour
LOG_FILE_PATTERN:='Y:\server\logs\*.*';
currentLogs->files(LOG_FILE_PATTERN).fileInfo.map((info)->info['path']=>info['time']).toMap;

latestLogFile->begin
  local latestSeenTimes:=currentLogs
    .map((entry)->entry[0] => ((systime-entry[1])<DISPLAY_THRESHOLD
                                ? 0
                                : entry[1])).toMap;
save;
  local current:=currentLogs;
  local latest:=current.filter((info)->!(info[1]==latestSeenTimes[info[0]])).sort(1).head;
  latest:=latest.size==0
          ? current.sort(1).trailing
          : latest;
  latestSeenTimes[latest[0]]:=latest[1];
  latest[0];
end;

skipEntriesFromIterator(i:IteratableExpression,count=0)->i;
skipEntriesFromIterator(i:IteratableExpression,count>0)->begin
  [1..count].map(()->i());
  i;
end;

main->begin
  async({begin ask('Press enter to quit'); halt; end});
  sleep(1);
  print;
  local currentLogFile:=0;
  local linesReadFromLog:=[currentLogFile=>0].toMap;
  local getFileIterator:={begin
    local fileChanged:=!((local llf:=latestLogFile)==currentLogFile);
    currentLogFile:=llf;
    assert(!isVoid(currentLogFile),'There is no log');
    fileChanged
    ? printf("==========================================\nNow displaying: %s\n==========================================",currentLogFile)
    : void;
    fileLineIterator(currentLogFile,UNCHANGED_TIMEOUT).skipEntriesFromIterator(linesReadFromLog[currentLogFile] orElse 0);
  end};
  local nextLineFromLog:=getFileIterator();
  sleep(1);
  print;
  while(true,begin
    local line:=nextLineFromLog();
    line.isVoid
    ? nextLineFromLog:=getFileIterator()
    : begin
        linesReadFromLog[currentLogFile]+=1;
        print(line);
      end;
  end);
end;
